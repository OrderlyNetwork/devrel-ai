[
  {
    "question": "How do I set up custom broker fees on Orderly and where can I find the Python tool and documentation?",
    "answer": "Orderly lets you define a total fee (custom + base) by passing it when updating user fees. You can set a default tier on the backend and then track user volumes yourself, sending updates as volumes change. A Python helper tool and full instructions are available in the docs under “Building on EVM → User Flows → Custom Fees”. See the “Custom Fees” guide at staging-docs.orderly.network/build-on-evm/user-flows/custom-fees.",
    "last_referenced_date": "2024-02-05T22:06:00"
  },
  {
    "question": "How do I use the useDeposit hook to deposit tokens in the latest SDK, given that deposit() now takes no parameters?",
    "answer": "In @orderly.network/hook v1.1.2 and later, useDeposit returns a setQuantity function plus a parameter-free deposit() method. First call setQuantity(\"<amount>\") to set the deposit amount, then call await deposit() without any arguments. For a complete example, see the Assets.tsx demo in the example-dex repository.",
    "last_referenced_date": "2024-02-09T06:45:15"
  },
  {
    "question": "What does the delegateSignerEnabled option do in the Orderly SDK and how do I use it?",
    "answer": "delegateSignerEnabled allows you to use a smart contract account (e.g., multisig) to interact with Orderly while an externally owned account (EOA) pays gas and signs EIP-712 messages. The main use case is multisig wallets (e.g., Gnosis). See the “Building on EVM → User Flows → Delegate Signer” guide for full instructions on deploying and using a delegate signer.",
    "last_referenced_date": "2024-02-08T22:38:32"
  },
  {
    "question": "Which API endpoint returns the withdrawal fee for a token, and how can I retrieve deposit fees?",
    "answer": "Call the public REST endpoint GET /v1/public/get-token-info. Its response includes the field withdraw_fee (flat USDC fee) under each token’s data. For deposit costs (gas + cross-chain), call the vault contract’s getDepositFee method on-chain to determine how much ETH/value you must attach.",
    "last_referenced_date": "2024-02-09T14:01:27"
  },
  {
    "question": "How can I programmatically fetch my broker’s daily trading volumes to build a leaderboard, and handle pagination?",
    "answer": "Use the private endpoint GET /v1/volume/broker/daily?start_date=YYYY-MM-DD&end_date=YYYY-MM-DD to retrieve daily volume records. The API supports pagination via page (1-based) and size (max ~500) query parameters. In the SDK, you can use usePrivateInfiniteQuery for infinite scrolling. To group by account, add aggregatedBy=ACCOUNT.",
    "last_referenced_date": "2024-04-05T15:28:37"
  },
  {
    "question": "How do I retrieve the list of brokers on testnet versus mainnet?",
    "answer": "For testnet, point your calls at https://testnet-api-evm.orderly.org/v1/public/broker/name. For mainnet, use the public endpoint /v1/public/broker/list on your production API base URL.",
    "last_referenced_date": "2024-02-07T14:38:48"
  },
  {
    "question": "What chains and token standards does Orderly currently support for deposits, and what is the minimum order size?",
    "answer": "Orderly currently accepts only native USDC on Arbitrum and Optimism. The minimum order size is the USDC-equivalent of 10 USDC. You can verify precise tick sizes and limits per symbol via GET /v1/public/get-available-symbols (check base_tick and base_min for each market).",
    "last_referenced_date": "2024-02-20T14:01:55"
  },
  {
    "question": "How do I estimate a liquidation price before placing an order using the SDK hooks?",
    "answer": "In SDK v1.1+, use useOrderEntry or useOrderHook with the option {watchOrderbook:true}. The returned form state includes estLiqPrice. Ensure your wallet is connected, account registered, and balance > 0. If estLiqPrice returns null, upgrade to v1.1.3+ to pick up intermittent fixes. As a fallback, compute it manually using formulas under “Perpetual Futures → Formulas & Definitions” in the docs.",
    "last_referenced_date": "2024-02-22T21:00:49"
  },
  {
    "question": "How do I update my account’s maximum leverage via API and SDK?",
    "answer": "Call the private endpoint PUT /v1/account/update-leverage-setting with your broker_id, account_id, and desired max leverage. The SDK also exposes a corresponding function in the account or leverage module—look for updateLeverageSetting in the SDK’s account hooks.",
    "last_referenced_date": "2024-02-26T15:07:23"
  },
  {
    "question": "How do I fix the Next.js error “Global CSS cannot be imported from within node_modules” when using @orderly.network/react?",
    "answer": "In your next.config.js, add the package to transpilePackages so Next.js processes its CSS import. For example:\n{\n  // ...\n  transpilePackages: [\n    \"@orderly.network/react\"\n  ]\n}\nIf the error references @uiw/react-split, include it there too. Then restart your dev server.",
    "last_referenced_date": "2024-03-07T14:08:28"
  },
  {
    "question": "Is there a hook to settle PnL on Orderly, or do I have to use API directly?",
    "answer": "Yes. The useAccount hook in @orderly.network/hook supports PnL settlement operations. You can see an example in the Assets.tsx component in the example-dex repository.",
    "last_referenced_date": "2024-03-08T17:59:10"
  },
  {
    "question": "How do I fix the import error “export 'OrderlyConfigProvider' was not found in '@orderly.network/hooks'” when upgrading the hooks SDK?",
    "answer": "In the latest @orderly.network/hooks release, OrderlyConfigProvider was renamed. To pick up the change now, install the internal build:\n\nnpm install @orderly.network/hooks@internal\n\nThen import and use OrderlyProvider instead of OrderlyConfigProvider. The fix will be included in the next main‐package release, so you won’t need the @internal postfix once it’s published.",
    "last_referenced_date": "2023-12-07T02:36:04"
  },
  {
    "question": "Which WebSocket topics should I subscribe to for real‐time deposit, withdrawal, and position updates using the hooks SDK?",
    "answer": "Use the private WebSocket APIs:\n\n• For deposits and withdrawals, subscribe to the “wallet-transactions” topic (private WS endpoint).  \n• For position updates, subscribe to the “position-push” topic (private WS endpoint).  \n• For order fill notifications, use the private “execution-report” WebSocket API under Notifications.",
    "last_referenced_date": "2024-07-30T09:31:56"
  },
  {
    "question": "Is there an async way to know when a deposit or withdrawal transaction has been executed, like ethers.js tx.wait?",
    "answer": "Orderly’s hooks don’t expose a tx.wait. After calling deposit() or withdraw(), poll one of these:\n\n• The “check withdrawals” API on the REST side to see if the withdrawal is finalized.  \n• Your Orderly account balance via private query to confirm the funds moved.  \n\nUse usePrivateQuery or raw REST calls to implement your own “wait for execution” logic.",
    "last_referenced_date": "2024-01-02T21:39:59"
  },
  {
    "question": "Where can I find Orderly’s EVM vault smart contract addresses and source code for cross-chain deposits/withdrawals?",
    "answer": "Smart contract addresses are published in the docs under “Building on EVM → Smart Contract Addresses”.  \n\n• Deposit contract details: “Building on EVM → Deposit” guide.  \n• Code is open source in these GitHub repos:  \n  – https://github.com/OrderlyNetwork/evm-cross-chain  \n  – https://github.com/OrderlyNetwork/contract-evm",
    "last_referenced_date": "2024-01-02T23:10:12"
  },
  {
    "question": "When using usePrivateQuery for a GET request, how can I also receive the meta object along with the rows?",
    "answer": "Pass a formatter option to usePrivateQuery so you get the raw response including meta. For example:\n\nconst { data } = usePrivateQuery<API.Holding[]>('/v1/client/holding', {\n  formatter: response => response\n});\n\nThe returned data object will include both the rows and meta fields.",
    "last_referenced_date": "2024-03-04T10:02:27"
  },
  {
    "question": "How can I inspect the current state of the WebSocket connection in the browser when using the hooks SDK?",
    "answer": "The hooks SDK exposes a global object on window for debugging. In your browser console, inspect:\n\nwindow.__Orderly_WS\n\nThis object contains the current WebSocket connection state and data.",
    "last_referenced_date": "2024-02-17T03:05:33"
  },
  {
    "question": "How do I set custom referral rebate rates when creating a referral code via the referral SDK?",
    "answer": "Pass decimal rebate rates (not BPS) when calling the referral hook or API. For example, to give 20% to the referrer and 10% to the referee:\n\n{\n  max_rebate_rate: 0.3,         // total rebate = referrer + referee\n  referrer_rebate_rate: 0.2,   // 20%\n  referee_rebate_rate: 0.1     // 10%\n}\n\nEnsure max_rebate_rate equals the sum of the other two rates.",
    "last_referenced_date": "2024-05-07T10:44:16"
  },
  {
    "question": "In the hooks SDK, how do I switch the chain ID after calling account.setAddress for walletconnect or web3onboard integrations?",
    "answer": "After setting the address, call the switchChainId method on the account object. For example:\n\nconst { account } = useAccount();\naccount.setAddress(address, { provider, chain: { id: hexChainId } });\n// Then switch chain:\naccount.switchChainId(currentChainId);\n\nThis ensures the SDK updates to the new chain.",
    "last_referenced_date": "2024-03-19T09:54:08"
  },
  {
    "question": "How can I cancel all open orders programmatically if there’s no direct “cancel all” SDK function?",
    "answer": "Use the generic mutation hook to delete all orders via REST:\n\nconst [cancelAll] = useMutation('/v1/orders', 'DELETE');\n\nCalling cancelAll() has the same effect as a “cancel all orders” feature in the SDK.",
    "last_referenced_date": "2024-02-28T12:18:27"
  },
  {
    "question": "What are the vault contract and USDC token addresses for the Base chain integration?",
    "answer": "On Base, the vault contract and USDC addresses are:\n\n• Vault: 0x816f722424B49Cf1275cc86DA9840Fbd5a6167e9  \n• USDC: 0x833589fcd6edb6e08f4c7c32d4f71b54bda02913  \n\nUse these addresses when configuring the SDK or interacting on Base.",
    "last_referenced_date": "2024-04-04T14:54:00"
  },
  {
    "question": "How can I access the Orderly Network audit reports?",
    "answer": "Orderly publishes its smart contract and backend audit reports in a GitHub repository. You can find them under the “Audits” folder at:\nhttps://github.com/OrderlyNetwork/Audits",
    "last_referenced_date": "2025-05-08T04:49:14"
  },
  {
    "question": "Which public REST API endpoint returns funding rate history for a specific market?",
    "answer": "Call GET /v1/public/get-funding-rate-history-for-one-market. See the public API docs under “Public EVM API → RESTful API → Public → get-funding-rate-history-for-one-market”.",
    "last_referenced_date": "2024-11-14T18:12:06"
  },
  {
    "question": "Which private API endpoint returns my trade history?",
    "answer": "Use GET /v1/client/trades. It’s documented under “Private EVM API → RESTful API → Private → get-trades” in the API reference.",
    "last_referenced_date": "2024-11-21T09:51:58"
  },
  {
    "question": "How can I integrate a portfolio tracking page in my app using the Orderly SDK?",
    "answer": "The Component SDK v2 includes a built-in portfolio page component. To migrate or add it, follow the guide at:\nhttps://orderly.network/docs/sdks/migrate",
    "last_referenced_date": "2024-11-21T16:14:03"
  },
  {
    "question": "What is the URL for the Orderly Network block explorer?",
    "answer": "You can view on-chain activity and transaction details at:\nhttps://explorer.orderly.network",
    "last_referenced_date": "2024-11-19T11:31:04"
  },
  {
    "question": "Where can I find the open source JavaScript SDK for Orderly?",
    "answer": "The Orderly JavaScript SDK is open source on GitHub. See:\nhttps://github.com/OrderlyNetwork/js-sdk",
    "last_referenced_date": "2024-03-25T23:08:36"
  },
  {
    "question": "Where is the private API documentation for the automated referral generation update (builder-auto-referral-update)?",
    "answer": "See the private API docs under “Build on Omnichain → EVM API → RESTful API → Private → builder-auto-referral-update”:\nhttps://orderly.network/docs/build-on-omnichain/evm-api/restful-api/private/builder-auto-referral-update",
    "last_referenced_date": "2025-05-08T05:02:11"
  },
  {
    "question": "Does Orderly support hidden (iceberg) orders, and where can I find this option in the trading interface?",
    "answer": "Yes—iceberg (hidden) orders are supported. In the trading UI’s order type selector, scroll to the bottom of the list and enable the “hidden” option. You can combine it with limit or other order types.",
    "last_referenced_date": "2024-06-19T17:13:35"
  },
  {
    "question": "How can I enable traders to place orders programmatically via my DEX using Orderly’s API, ensuring trades are attributed to my broker account?",
    "answer": "Have users connect through your front end so they receive an Orderly account_id linked to your broker_id. Then use the private endpoint POST /v1/order/create with your ed25519 API authentication (see API Authentication docs). Trades placed via this call will be credited to your broker account. Details at:\nhttps://orderly.network/docs/build-on-evm/evm-api/restful-api/private/create-order",
    "last_referenced_date": "2024-11-26T11:31:42"
  },
  {
    "question": "Does the Orderly SDK provide a UI component for displaying trade history?",
    "answer": "There’s no dedicated UI component in the SDK for trade history. For now, you can direct users to the Orderly Dashboard at:\nhttps://orderly-dashboard.orderly.network/\nwhich shows all trades and supports CSV export.",
    "last_referenced_date": "2024-11-21T09:58:24"
  },
  {
    "question": "How do I configure the Orderly React Components SDK to support additional chains and testnets, such as Arbitrum Sepolia, Solana Devnet, and Monad Testnet?",
    "answer": "Use the `chainFilter` prop on `OrderlyAppProvider`. For example:\n```tsx\n<OrderlyAppProvider\n  brokerId=\"your_broker_id\"\n  brokerName=\"Your Name\"\n  networkId=\"testnet\"\n  chainFilter={{\n    mainnet: [],\n    testnet: [\n      ArbitrumSepolia,\n      SolanaDevnet,\n      {\n        id: 10143,\n        chainInfo: {\n          name: \"Monad Testnet\",\n          public_rpc_url: \"https://testnet-rpc.monad.xyz\",\n          chainId: 10143,\n          currency_symbol: \"MON\",\n          explorer_base_url: \"\",\n          vault_address: \"\"\n        }\n      }\n    ]\n  }}\n>\n  {children}\n</OrderlyAppProvider>\n```\nAdjust the arrays based on your environment. See the full example at 2025-02-20T17:54:03.",
    "last_referenced_date": "2025-02-20T17:54:03"
  },
  {
    "question": "Can the administrator programmatically view a user’s transaction history? Is there an API for this?",
    "answer": "You can use the Orderly Dashboard (~https://orderly-dashboard.orderly.network/?broker_id=YOUR_BROKER_ID) which exposes user history via a public API under the hood. It’s not yet documented, but the dashboard uses that API to fetch deposits, trades, withdrawals, etc.",
    "last_referenced_date": "2024-07-01T07:09:13"
  },
  {
    "question": "We need to inspect the Solana adapter logic for signing messages. How can we access the source code of the default Solana adapter package?",
    "answer": "The code is available in the Orderly JavaScript SDK repository on GitHub. Check out the “alpha-github” branch for the Solana adapter implementation: https://github.com/OrderlyNetwork/js-sdk/tree/alpha-github",
    "last_referenced_date": "2024-12-06T09:17:16"
  },
  {
    "question": "What are the WebSocket rate limits and connection constraints if I want to open multiple socket connections per IP or per account?",
    "answer": "Public WS: 1,000 messages per IP. Public per‐account topic: 80 msgs/sec. Private per‐account topic: 80 msgs/sec. Private WS has no IP‐level limit but still enforces per‐account topic limits.",
    "last_referenced_date": "2024-12-31T03:27:58"
  },
  {
    "question": "We’re using the dashboard’s /events endpoint to track user deposits and trades, but it’s slow or 502’ing. Is there a better endpoint?",
    "answer": "Yes—use the paginated /events_v2 endpoint in the dashboard query service. It returns a next_offset field for paging and is designed for higher performance. The old /events endpoint is deprecated.",
    "last_referenced_date": "2025-01-24T06:28:53"
  },
  {
    "question": "Is there an API endpoint to retrieve all users who have custom broker fee rates?",
    "answer": "Use the private REST endpoint GET /v1/private/get-user-fee-rates (see docs under “Build on Omnichain → EVM API → RESTful API → Private → get-user-fee-rates”). If you omit the address or account_id parameters, it returns all accounts with custom fee settings.",
    "last_referenced_date": "2025-03-01T01:52:11"
  },
  {
    "question": "How often does the dashboard’s events indexer update deposits and withdrawals? And how can I programmatically fetch daily trading volumes?",
    "answer": "Deposit and withdrawal events now index within seconds after the recent bug fix (you can retry your calls to /events_v2). For daily trading volumes, use the private endpoint GET /v1/private/get-builders-users-volumes, which refreshes once per day.",
    "last_referenced_date": "2024-12-16T15:10:50"
  },
  {
    "question": "Documentation is down—what’s the REST endpoint to update the broker’s default fee rate?",
    "answer": "Use the OpenAPI‐EVM spec temporarily at https://orderlynetwork.github.io/openAPI-EVM/ and call PUT /v1/broker/fee_rate/default to set your broker’s base maker and taker fee rates.",
    "last_referenced_date": "2024-08-26T20:56:13"
  },
  {
    "question": "Is it possible to completely unbind a referral code from a broker account?",
    "answer": "No—unbinding isn’t supported. As a workaround, you can set the referral code’s rebate rates to 0/0 (max_referral_rate=0, referrer_rate=0, referee_rate=0) to effectively disable it.",
    "last_referenced_date": "2024-09-03T16:55:07"
  },
  {
    "question": "How can I check which referral code is currently active for a user?",
    "answer": "Call the public endpoint GET /v1/public/check-referral-code with query parameters address and broker_id. The response data includes the user’s currently active referral code.",
    "last_referenced_date": "2024-09-09T14:02:28"
  },
  {
    "question": "We need the full terms for a referral code (not just existence). Which API provides the rebate terms for a given code?",
    "answer": "There’s no public endpoint for terms. Use the private endpoint GET /v1/private/get-referral-code-info (admin only) to list all codes with their rebate parameters, or GET /v1/private/get-referral-info if you know the owner’s address.",
    "last_referenced_date": "2024-08-20T06:39:45"
  },
  {
    "question": "Can a user set the current leverage for their account via the SDK or API, or can they only set the maximum leverage?",
    "answer": "Users can only set the maximum leverage for their account. There is no API or SDK call to set “current leverage”; you may only update the account’s max leverage setting.",
    "last_referenced_date": "2024-03-11T10:01:29"
  },
  {
    "question": "How do I place a TP/SL and a positional TP/SL order using the Orderly REST API?",
    "answer": "Use the POST /v1/algo/order endpoint. For a standard TP/SL order, send:  \n{\n  \"symbol\": \"PERP_NEAR_USDC\",\n  \"algo_type\": \"TP_SL\",\n  \"quantity\": \"5.5\",\n  \"trigger_price_type\": \"MARK_PRICE\",\n  \"order_tag\": \"test_tag\",\n  \"child_orders\": [\n    {\"symbol\":\"PERP_NEAR_USDC\",\"algo_type\":\"TAKE_PROFIT\",\"side\":\"SELL\",\"type\":\"MARKET\",\"trigger_price\":3.365,\"reduce_only\":true},\n    {\"symbol\":\"PERP_NEAR_USDC\",\"algo_type\":\"STOP_LOSS\",\"side\":\"SELL\",\"type\":\"MARKET\",\"trigger_price\":3.36,\"reduce_only\":true}\n  ]\n}  \nFor a positional TPSL (close-position) order, use algo_type \"POSITIONAL_TP_SL\" and child_orders with type \"CLOSE_POSITION\":  \n{\n  \"symbol\":\"PERP_NEAR_USDC\",\n  \"algo_type\":\"POSITIONAL_TP_SL\",\n  \"trigger_price_type\":\"MARK_PRICE\",\n  \"child_orders\":[\n    {\"symbol\":\"PERP_NEAR_USDC\",\"algo_type\":\"TAKE_PROFIT\",\"side\":\"SELL\",\"type\":\"CLOSE_POSITION\",\"trigger_price\":4.05,\"reduce_only\":true},\n    {\"symbol\":\"PERP_NEAR_USDC\",\"algo_type\":\"STOP_LOSS\",\"side\":\"SELL\",\"type\":\"CLOSE_POSITION\",\"trigger_price\":3.95,\"reduce_only\":true}\n  ]\n}",
    "last_referenced_date": "2024-03-11T12:38:28"
  },
  {
    "question": "How can I edit an existing TP/SL (TPSL) order via the REST API?",
    "answer": "Call PUT /v1/algo/order with a JSON body containing the parent algo order_id and an array of its child_orders, each with its order_id and fields to update (trigger_price, quantity, is_activated, etc.). Example:  \n{\n  \"order_id\": \"317800000\",\n  \"child_orders\": [\n    {\"order_id\": 317800001, \"trigger_price\": 2.995, \"quantity\": 7.7},\n    {\"order_id\": 317800002, \"trigger_price\": 1.99,  \"quantity\": 7.7}\n  ]\n}",
    "last_referenced_date": "2024-03-11T12:39:10"
  },
  {
    "question": "How can I cancel or deactivate only one leg (TP or SL) of a TPSL order?",
    "answer": "Use PUT /v1/algo/order and include both child orders in the payload. For the leg to cancel, set is_activated:false. For example:  \n{\n  \"order_id\": 4600159,\n  \"child_orders\": [\n    {\"order_id\":4600161, \"quantity\":0.00027, \"is_activated\":null},\n    {\"order_id\":4600160, \"quantity\":0.00027, \"is_activated\":false}\n  ]\n}",
    "last_referenced_date": "2024-03-13T02:06:43"
  },
  {
    "question": "Which endpoint should I use to fetch algorithmic orders versus all orders in the Orderly API?",
    "answer": "To fetch only algo orders, call the private REST endpoint GET /v1/algo/order (or GET /v1/algo/orders in the docs). To fetch all orders regardless of source, call GET /v1/client/order (or GET /v1/orders) with query parameter source_type=ALL.",
    "last_referenced_date": "2024-03-12T12:51:47"
  },
  {
    "question": "What does symbol IMR = 0.1 mean in a \"10x leverage\" listing announcement, and how does it interact with account-level leverage?",
    "answer": "IMR (Initial Margin Ratio) = 1 / max leverage. An IMR of 0.1 means a symbol has a 10x max leverage. The margin required = position notional × IMR. You still must respect your account’s max leverage setting. For example, with 100 USDC collateral and a symbol IMR = 0.1, you could open up to 1,000 USDC notional (10x).",
    "last_referenced_date": "2024-03-12T10:22:29"
  },
  {
    "question": "Which hook provides margin used by a position and the position's unrealized PnL ROI percentage?",
    "answer": "usePositionStream (from @orderly.network/hooks) returns PositionExt objects. The field mm is the margin used by that position, and unrealized_pnl_ROI is the unrealized PnL as an ROI percentage.",
    "last_referenced_date": "2024-03-18T09:30:06"
  },
  {
    "question": "How do I fix the \"ReferenceError: window is not defined\" error from @orderly.network/hooks when building with Next.js?",
    "answer": "This was fixed in the hooks SDK release v1.1.8. Upgrade your @orderly.network/hooks dependency to 1.1.8 or later to eliminate the server-side \"window is not defined\" error.",
    "last_referenced_date": "2024-03-19T15:06:33"
  },
  {
    "question": "Does the Orderly SDK support specifying slippage in trades, and where do I include slippage parameters?",
    "answer": "Slippage support is not yet exposed in the SDK hooks. If you use the REST API directly, include a slippage field when calling POST /v1/order/create. The slippage unit is a decimal (e.g., slippage: 0.01 equals 1%).",
    "last_referenced_date": "2024-04-19T07:55:21"
  },
  {
    "question": "Is the TPSL (Take-Profit/Stop-Loss) order with limit order type supported in the Orderly SDK?",
    "answer": "Not at the moment. Positional TPSL orders with limit‐type legs are not yet supported in the SDK.",
    "last_referenced_date": "2024-05-22T07:31:24"
  },
  {
    "question": "Which public REST API endpoint returns open interest (OI) data for all trading pairs?",
    "answer": "Call GET /v1/public/get-market-info-for-all-trading-pairs. Its response includes an open_interest field under each market’s data.",
    "last_referenced_date": "2024-07-24T09:06:37"
  },
  {
    "question": "Why am I getting a CALL_REVERTED error when depositing via the SDK on mainnet, and how can I resolve it?",
    "answer": "A CALL_REVERTED on deposit often means there wasn’t enough ETH in your wallet to cover gas * price + value. Due to increased cross-chain gas costs (LayerZero fee changes), ensure you top up ETH so you have sufficient funds for the gas estimate shown in your UI.",
    "last_referenced_date": "2024-03-12T13:38:34"
  },
  {
    "question": "Executed TPSL trades aren't showing up in /v1/trades. How can I retrieve those trades?",
    "answer": "TPSL executions are currently filtered out of the standard /v1/trades feed. You can retrieve them by querying trades by the algo order ID. A fix to include TPSL executions by default will be released soon.",
    "last_referenced_date": "2024-03-14T13:23:21"
  },
  {
    "question": "Is there a hook in the SDK to generate or share a position PnL card as an image?",
    "answer": "Yes. In the alpha SDK release v1.1.6-alpha.0, we added a hook to generate shareable position PnL cards. Documentation for this hook will be published next week.",
    "last_referenced_date": "2024-03-16T06:18:13"
  },
  {
    "question": "What developer integration options and resources are available for Orderly Network?",
    "answer": "Orderly Network provides four main integration paths:\n1. Python connector: https://github.com/OrderlyNetwork/orderly-evm-connector-python\n2. React Web hooks: see the Hooks SDK overview at https://sdk.orderly.network/docs/hooks/overview\n3. Direct REST and WebSocket APIs: docs include examples in Python, TypeScript, and Java.  \n4. React UI components: see https://sdk.orderly.network/components/introduction\nYou can also use our OpenAPI spec definitions if you want to build your own SDK.",
    "last_referenced_date": "2024-01-26T05:51:22"
  },
  {
    "question": "When using Orderly’s React hooks SDK deposit flow, do I need to create or manage a vault?",
    "answer": "No. When you call the deposit hook (useDeposit) in @orderly.network/hooks, the SDK will use an Orderly-managed vault on your behalf. You do not need to deploy or store your own vault contract.",
    "last_referenced_date": "2024-02-12T11:32:30"
  },
  {
    "question": "I’m getting “createClient is not exported from '@layerzerolabs/scan-client'” when importing @orderly.network/hooks. Has this been fixed?",
    "answer": "Yes. In the March 5, 2024 patch update, we removed the layer-zero scan-client dependency. Upgrade to the latest SDK (v1.1.5 or later) to eliminate the error. See the release notes under “March 5 2024 Patch Update” in the SDK changelog.",
    "last_referenced_date": "2024-03-05T22:37:49"
  },
  {
    "question": "Why does the useOrderbook hook sometimes return null entries for deeper price levels, and how can I avoid those nulls?",
    "answer": "By design, useOrderbook fills gaps with null when there are no orders at deeper levels, making it easier for UI rendering. We plan to add a parameter in an upcoming release so you can filter out null entries (only return populated price levels).",
    "last_referenced_date": "2024-02-22T13:37:09"
  },
  {
    "question": "What chain IDs should I use for Polygon mainnet and Polygon Mumbai testnet when calling Orderly’s EVM APIs?",
    "answer": "Call the public REST endpoint GET /v1/public/get-vault-chain-config to discover all supported chain IDs. Currently:\n• Polygon mainnet: chain_id 137\n• Polygon Mumbai testnet: chain_id 80001\nYou can also fetch testnet chain info via https://testnet-api-evm.orderly.org/v1/public/chain_info.",
    "last_referenced_date": "2024-02-26T14:33:05"
  },
  {
    "question": "How do I create Post-Only, IOC, FOK and hidden orders using the React hooks SDK?",
    "answer": "In the JavaScript SDK’s order types (see packages/types/src/order.ts), you have:\n• OrderType.POST_ONLY\n• OrderType.IOC\n• OrderType.FOK\nTo send a hidden (iceberg) order, set visible_quantity: 0 on your order payload. All of these are supported by the useOrderEntry hook—just pass the appropriate order_type or visible_quantity parameter.",
    "last_referenced_date": "2024-04-01T18:11:01"
  },
  {
    "question": "How can I fetch all open positions for my account using the hooks SDK?",
    "answer": "Use the usePositionsStream hook from @orderly.network/hooks. It returns a state object with a rows array containing all currently open positions. Example: const { data: positions } = usePositionsStream(); positions.rows will list them.",
    "last_referenced_date": "2024-04-01T19:13:54"
  },
  {
    "question": "What function do I call to close an open position via the SDK hooks?",
    "answer": "Submit a new order in the opposite direction of your open position using useOrderEntry with reduce_only: true. For example, to close a long position, place a SELL market or limit order with reduce_only set.",
    "last_referenced_date": "2024-04-02T04:38:47"
  },
  {
    "question": "Is it possible to close only part of an open position (partial close) with the hooks SDK?",
    "answer": "Yes. When you call useOrderEntry to place an order with reduce_only: true, you can specify any quantity up to the size of your open position to partially close it.",
    "last_referenced_date": "2024-04-02T05:25:59"
  },
  {
    "question": "How can I detect when an order has been filled using the hooks SDK?",
    "answer": "Subscribe to execution-report WebSocket events via the useWS hook. For example:\n\nuseEffect(() => {\n  if (!state.accountId) return;\n  const unsubscribe = ws.privateSubscribe(\"executionreport\", {\n    onMessage: data => {\n      // order fill data arrives here\n    }\n  });\n  return () => unsubscribe?.();\n}, [state.accountId]);\n\nAdditionally, useOrderStream and usePositionStream auto-update when fills occur.",
    "last_referenced_date": "2024-04-04T15:21:52"
  },
  {
    "question": "Can I specify leverage manually for a single order via the SDK hooks?",
    "answer": "No. Leverage is configured at the account level and applies across positions. You cannot pass leverage as a parameter to a single order. To see an estimated leverage impact, use the useOrderEntry hook, which exposes estimated leverage in its return data.",
    "last_referenced_date": "2024-04-05T14:08:29"
  },
  {
    "question": "How can I retrieve my account’s current leverage and maintenance margin ratio via hooks?",
    "answer": "Use the useMarginRatio hook from @orderly.network/hooks. It returns an object { marginRatio, currentLeverage, mmr }. No manual refresh is required; it updates in real time.",
    "last_referenced_date": "2024-04-05T17:47:37"
  },
  {
    "question": "What is free collateral and how can I get it via the SDK hooks?",
    "answer": "Free collateral is the amount of margin you can still deploy for new positions. In the SDK, use the useCollateral hook, which returns an object including freeCollateral, totalCollateral, totalValue, availableBalance, and unsettledPnL. See useCollateral source for details.",
    "last_referenced_date": "2024-04-05T20:52:27"
  },
  {
    "question": "How can I fetch my account’s deposit and withdrawal history using the hooks SDK?",
    "answer": "Use the generic private query hook: const { data: assetHistory } = usePrivateQuery(\"/v1/asset/history\");. The data object includes both deposits and withdrawals.",
    "last_referenced_date": "2024-04-09T10:41:18"
  },
  {
    "question": "Which function or hook should I call to settle my PnL programmatically?",
    "answer": "Call the settle method on your account instance. For example:\n\nconst account = useAccountInstance();\nawait account.settle();\n\nOr, if you’re using the useAccount hook: const { account } = useAccount(); account.settle();",
    "last_referenced_date": "2024-04-10T11:31:34"
  },
  {
    "question": "How can I retrieve and update my account’s maximum leverage setting via hooks?",
    "answer": "Use the useLeverage hook:\n\nconst [maxLeverage, { update, config: availableLeverages }] = useLeverage();\n\n• maxLeverage is your current max.\n• availableLeverages lists allowed leverage options.\n• update({ leverage: newValue }) sets a new max leverage.\n\nThe hook handles authentication and API calls for you.",
    "last_referenced_date": "2024-04-11T12:49:02"
  },
  {
    "question": "How can I fetch all take-profit/stop-loss (TP/SL) orders for my account using the hooks SDK?",
    "answer": "Use useOrderStream and filter by the algorithmic order types. For example:\n\nconst [orders] = useOrderStream({ status: 'INCOMPLETE' });\nconst tpSlOrders = orders?.filter(o => o.algo_type === 'TP_SL' || o.algo_type === 'POSITIONAL_TP_SL');\n\nWe will add a built-in includes/excludes parameter for TP_SL in the next SDK release.",
    "last_referenced_date": "2024-04-23T10:57:48"
  },
  {
    "question": "How can I estimate deposit confirmation time and show progress to users?",
    "answer": "On Polygon POS, deposits require 500 block confirmations (~15–20 minutes). On Optimism/Arbitrum, it’s 20 blocks (~40 seconds). You can poll your asset history (usePrivateQuery \"/v1/asset/history\") or subscribe to wallet-transactions via WebSocket to update a progress bar based on confirmations.",
    "last_referenced_date": "2024-04-24T02:33:53"
  },
  {
    "question": "How long do withdrawals take to process on Orderly?",
    "answer": "Withdrawals from our native L2s typically finalize within 1–2 minutes. If you’re using a cross-chain withdrawal, finality depends on the target chain’s confirmations (e.g., Polygon requires 500 blocks, ~15–20 minutes).",
    "last_referenced_date": "2024-03-27T10:51:12"
  },
  {
    "question": "How can I use the hooks SDK to get data on Ethereum mainnet rather than Polygon testnet?",
    "answer": "Initialize your provider with the mainnet networkId and call account.switchChainId(mainnetChainId) after setting your address. For example:\n\n<AccountProvider brokerId=\"your_broker_id\" networkId=\"mainnet\">\n  {/* your UI */}\n</AccountProvider>\n// then in code:\naccount.switchChainId(1);\n\nOnce switched, useCollateral, useOrderStream, etc., will fetch mainnet data.",
    "last_referenced_date": "2024-06-18T14:49:10"
  },
  {
    "question": "Which API endpoint returns current withdrawal fees by blockchain, and do these fees change?",
    "answer": "Call the public REST endpoint GET /v1/public/get-supported-collateral-info. The response includes a withdrawal_fee field per collateral contract. Fees are dynamic and adjusted regularly to reflect on-chain costs.",
    "last_referenced_date": "2024-06-21T04:31:08"
  },
  {
    "question": "How can I retrieve real-time and predicted funding rates to know if longs pay shorts?",
    "answer": "Use either:\n• WebSocket topic “estimated-funding-rate” (public WS)\n• REST endpoint GET /v1/public/get-predicted-funding-rate-for-one-market\nOr in the SDK, read the fundingRate field on the market info returned by useMarketsStream.",
    "last_referenced_date": "2024-07-03T02:59:44"
  },
  {
    "question": "How do I generate an Orderly API key programmatically without getting timestamp or expiration errors?",
    "answer": "Make sure you set the request’s timestamp and expiration dynamically on each call so they aren’t stale. We provide working examples in the Orderly examples repo under api: https://github.com/OrderlyNetwork/examples/tree/master/api. If you prefer a frontend flow, you can also use the broker-registration web UI at https://orderlynetwork.github.io/broker-registration/ to create your key interactively.",
    "last_referenced_date": "2024-06-21T14:37:46"
  },
  {
    "question": "How do I calculate the order_quantity to send when I want to trade a specific USDC amount?",
    "answer": "Simply divide the USDC amount by the current market price for that symbol. For example, if you want to trade $10 and the price is $2000 USDC, your order_quantity would be 0.005 (10 / 2000). To get live market prices, call the public REST endpoint GET /v1/public/get-market-info-for-one-trading-pair, then compute quantity = quoteAmount / price. Remember to round to the symbol’s base_tick (from GET /v1/public/get-available-symbols).",
    "last_referenced_date": "2024-06-27T16:04:45"
  },
  {
    "question": "Can I open long and short positions concurrently on the same symbol in Orderly?",
    "answer": "No. Orderly only supports one position per symbol at a time. If you place an order in the opposite direction, it will reduce or flip your existing position rather than opening a second, separate position.",
    "last_referenced_date": "2024-07-06T04:36:01"
  },
  {
    "question": "Which API endpoint returns the full orderbook snapshot so I can inspect current liquidity per pair programmatically?",
    "answer": "Call the private REST endpoint GET /v1/private/orderbook-snapshot with your authenticated broker credentials. This returns the full depth for bid and ask levels. For real-time updates, you can also subscribe to the public WebSocket topics “orderbook” and “order-book-update” under the public WS API documentation.",
    "last_referenced_date": "2024-07-19T08:21:48"
  },
  {
    "question": "When do daily trading fee rebates settle, and where are they credited?",
    "answer": "Fee rebates settle once per day around 00:00–00:30 UTC. Rebate credits are posted to your broker’s admin wallet Orderly account (the same account you use for trading under your broker_id).",
    "last_referenced_date": "2024-07-19T03:06:13"
  },
  {
    "question": "Is there an API to transfer funds directly between two Orderly accounts without on-chain withdraw and deposit?",
    "answer": "Yes. After the Sep 24 upgrade, Orderly supports internal transfers via the private REST endpoint POST /v1/private/create-internal-transfer. The payload requires a token (e.g., “USDC”) and a receiver_list of {account_id, amount}. No on-chain gas costs apply.",
    "last_referenced_date": "2024-09-27T01:02:17"
  },
  {
    "question": "Why do market orders for fast-moving or low-tick-size tokens sometimes fail with “order must fit in the filter requirement,” and how do I fix it?",
    "answer": "This was caused by a rounding bug in the Core/SDK when base_tick > 1 (for volatile tokens). We’ve released a hotfix in SDK version 1.5.14. Upgrade your @orderly.network/core or hooks package to v1.5.14+ to eliminate the error.",
    "last_referenced_date": "2024-10-25T04:07:37"
  },
  {
    "question": "How do I structure a BRACKET algo order with TP/SL child orders using the REST API?",
    "answer": "Use algo_type “BRACKET” at the top level with type “MARKET” or “LIMIT,” then nest an array of child_orders as follows:\n\n{\n  \"symbol\": \"PERP_ETH_USDC\",\n  \"algo_type\": \"BRACKET\",\n  \"quantity\": \"0.1\",\n  \"side\": \"BUY\",\n  \"type\": \"MARKET\",\n  \"child_orders\": [\n    {\n      \"symbol\": \"PERP_ETH_USDC\",\n      \"algo_type\": \"POSITIONAL_TP_SL\",\n      \"child_orders\": [\n        {\n          \"symbol\": \"PERP_ETH_USDC\",\n          \"algo_type\": \"TAKE_PROFIT\",\n          \"side\": \"SELL\",\n          \"type\": \"CLOSE_POSITION\",\n          \"trigger_price\": \"2600\",\n          \"reduce_only\": true\n        },\n        {\n          \"symbol\": \"PERP_ETH_USDC\",\n          \"algo_type\": \"STOP_LOSS\",\n          \"side\": \"SELL\",\n          \"type\": \"CLOSE_POSITION\",\n          \"trigger_price\": \"2200\",\n          \"reduce_only\": true\n        }\n      ]\n    }\n  ]\n}\n\nUpon success, you’ll receive rows for each child order with their order_ids.",
    "last_referenced_date": "2024-10-07T13:49:58"
  },
  {
    "question": "What endpoint and payload do I use for the USDC testnet faucet, and are there any limits?",
    "answer": "POST to https://testnet-operator-evm.orderly.org/v1/faucet/usdc with header Content-Type: application/json and body {\"user_address\": \"<your address>\"}. Testnet faucet requests take a few minutes to process, and each account may only call the faucet up to 3 times per lifetime.",
    "last_referenced_date": "2024-07-26T06:30:05"
  },
  {
    "question": "Can I restrict my Orderly API key so that withdraw requests only originate from my server’s IP address?",
    "answer": "Yes. Use the private REST endpoint PUT /v1/private/set-orderly-key-ip-restriction with your broker_id and the ed25519 key, specifying an allow_list of IPs. After this, withdraw requests signed by that key will only succeed when sent from those IPs.",
    "last_referenced_date": "2024-12-31T02:40:47"
  },
  {
    "question": "Is it possible to set different maker/taker fees for individual trading pairs instead of globally?",
    "answer": "No. Fees are configured globally per broker and apply across all symbols. You can only adjust fees per user (account) via custom fee routes, not by symbol.",
    "last_referenced_date": "2024-07-17T13:22:25"
  },
  {
    "question": "Which API endpoints can I use to programmatically retrieve liquidation prices, margin requirements (health factor), and funding rates for markets?",
    "answer": "• Liquidation price and margin requirements (health factor) are available via the private REST endpoint GET /v1/private/get-all-positions-info.  \n• As an alternative or for dynamic calculation, you can compute them yourself in the front end using formulas under “Perpetual Futures → Formulas & Definitions”.  \n• Live funding rates are available via the public WebSocket topic “estimated-funding-rate”.  \n• Predicted funding rates for all markets can be retrieved via GET /v1/public/get-predicted-funding-rates-for-all-markets.",
    "last_referenced_date": "2024-02-06T00:54:18"
  },
  {
    "question": "What are the WebSocket subscription limits if I want to open multiple socket connections or subscribe to multiple account topics?",
    "answer": "• Public WebSocket: up to 1,000 concurrent subscriptions per IP address.  \n• Private WebSocket: there is no IP‐level subscription limit, but you remain subject to per‐account topic rate limits (e.g., 80 messages/sec per account topic).",
    "last_referenced_date": "2024-02-27T06:31:43"
  },
  {
    "question": "When calling the private /v1/delegate_orderly_key endpoint I get “account does not exist.” What step did I miss in setting up the user account?",
    "answer": "Before you can delegate a key, you must register the user’s externally owned address as an Orderly account.  \n• Call the private endpoint POST /v1/register_account (include brokerId, chainId, timestamp, registrationNonce, signature, and userAddress).  \n• Alternatively, use the broker-registration UI at https://orderlynetwork.github.io/broker-registration/ to register the address interactively.  \nOnce registration succeeds, retry /v1/delegate_orderly_key.",
    "last_referenced_date": "2024-07-04T14:22:41"
  },
  {
    "question": "Is it possible to specify leverage on a per-order basis via the API, or is leverage only an account-level setting?",
    "answer": "Leverage on Orderly is configured at the account level (max leverage setting) and applies across all positions. You cannot pass a leverage parameter in an individual order payload. If you need per-order leverage controls, you must enforce them in your front end (e.g., block orders above a certain leverage).",
    "last_referenced_date": "2024-07-05T14:25:25"
  },
  {
    "question": "How do I structure a positional Take-Profit/Stop-Loss (POSITIONAL_TP_SL) algo order payload via the REST API?",
    "answer": "Use algo_type “POSITIONAL_TP_SL” at the top level and include only a child_orders array. Example:  \n{\n  \"algo_type\": \"POSITIONAL_TP_SL\",\n  \"trigger_price_type\": \"MARK_PRICE\",\n  \"symbol\": \"PERP_BTC_USDC\",\n  \"child_orders\": [\n    {\n      \"algo_type\": \"TAKE_PROFIT\",\n      \"reduce_only\": true,\n      \"side\": \"SELL\",\n      \"type\": \"CLOSE_POSITION\",\n      \"trigger_price\": 59000,\n      \"trigger_price_type\": \"MARK_PRICE\",\n      \"symbol\": \"PERP_BTC_USDC\",\n      \"is_activated\": true\n    },\n    {\n      \"algo_type\": \"STOP_LOSS\",\n      \"reduce_only\": true,\n      \"side\": \"SELL\",\n      \"type\": \"CLOSE_POSITION\",\n      \"trigger_price\": 56000,\n      \"trigger_price_type\": \"MARK_PRICE\",\n      \"symbol\": \"PERP_BTC_USDC\",\n      \"is_activated\": true\n    }\n  ]\n}  \nNote: Top‐level fields like price or quantity are unused for POSITIONAL_TP_SL; define your exit legs in child_orders.",
    "last_referenced_date": "2024-07-11T15:01:25"
  },
  {
    "question": "Why do I get “address and signature do not match” when calling /v1/delegate_signer on Base Sepolia testnet, even though the same code works on Arbitrum mainnet?",
    "answer": "Make sure you’re using the correct API base URL and EIP-712 domain for the network you registered on. For Arbitrum mainnet, calls must go to https://api-evm.orderly.org; for Base Sepolia testnet, use https://testnet-api-evm.orderly.org and the matching off-chain domain. Using the wrong domain or endpoint will cause signature-mismatch errors.",
    "last_referenced_date": "2024-07-05T13:47:33"
  },
  {
    "question": "Why do my market orders for ETH or other symbols sometimes fail with “The order must fit in the filter requirement,” and how can I fix it?",
    "answer": "That error means your order_quantity has too many decimal places for the symbol’s configured base_tick.  \n1. Call GET /v1/public/get-available-symbols to find base_tick for each market (e.g., PERP_ETH_USDC has base_tick 0.0001).  \n2. Round or truncate your quantity to at most the allowed decimal precision (4 decimals in this example).",
    "last_referenced_date": "2024-07-25T06:19:48"
  },
  {
    "question": "How do I update my broker’s default maker/taker fees via API, and how is the trading_fee in position history calculated?",
    "answer": "• To update your broker’s global fees, call the private endpoint POST /v1/broker/fee_rate/default with your brokerId, chainId, and the new maker/taker fee values, signed by your admin wallet.  \n• The trading_fee field in a position or position_history is the cumulative sum of all trading fees incurred by the trades that opened and closed that position. To calculate it yourself, fetch all trades for that position (e.g., via GET /v1/client/trades) and sum each trade’s fee.",
    "last_referenced_date": "2024-10-08T14:10:23"
  },
  {
    "question": "Can I fetch a user’s entire historical positions across all symbols in one call?",
    "answer": "Not today. The private endpoint GET /v1/client/position-history currently requires a symbol query parameter and cannot return all symbols. This is a known documentation bug, and we plan to add a symbol-optional or symbol-agnostic version in a future release.",
    "last_referenced_date": "2024-10-08T06:31:22"
  },
  {
    "question": "How do base_imr, base_mmr, and min_notional parameters relate to required collateral and minimum order size?",
    "answer": "• base_imr (initial margin ratio) = notional × IMR is the collateral needed to open a position.  \n• base_mmr (maintenance margin ratio) = notional × MMR is the buffer required to avoid liquidation.  \n• min_notional is the smallest notional size you can trade.  \nFor example, to open a $100 position with IMR=0.1 and MMR=0.05, you need at least $100×0.1 = $10 to open and $100×0.05 = $5 as maintenance, so $15 total collateral. You cannot place orders below the min_notional threshold (e.g., 10 USDC).",
    "last_referenced_date": "2024-07-25T13:01:49"
  },
  {
    "question": "How can I deploy my custom broker DEX built with Orderly as a Progressive Web App to allow users to install it on their mobile devices?",
    "answer": "You can ship your custom DEX frontend as a Progressive Web App (PWA). There’s no native app to publish—users simply open the DEX in their mobile browser and tap “Add to Home Screen.” This installs the PWA like an app and provides full trading functionality. See Arjun’s notes on PWAs in our BD channel.",
    "last_referenced_date": "2025-02-07T15:20:24"
  },
  {
    "question": "What’s the process for KOLs or brokers to obtain a TradingView Charting Library license for commercial use in their custom Orderly DEX UI?",
    "answer": "Have each KOL or broker go to tradingview.com/advanced-charts, click “Get the library,” and complete the form with their personal details (no company or legal entity required). They’ll then be contacted by TradingView to sign the Charting Library License Agreement. Once approved, they can integrate the library in their DEX UI.",
    "last_referenced_date": "2025-02-14T09:03:21"
  },
  {
    "question": "How do I decide between using the Orderly Component SDK versus the lower‐level Hooks SDK when building a custom broker DEX frontend?",
    "answer": "Use the Component SDK with theme overrides for minor branding or styling changes—this lets you swap colors, logos, and basic UI themes quickly. If your broker requires deep UI modifications (custom layouts or new components), switch to the Hooks SDK so you can build bespoke screens. Assess the scope: light tweaks → Component SDK; major UX work → Hooks SDK.",
    "last_referenced_date": "2025-02-04T06:33:38"
  },
  {
    "question": "Does the Orderly DEX UI support right‐to‐left (RTL) languages like Arabic, and how can I configure it for my broker frontend?",
    "answer": "Multi‐language support (including RTL scripts) is under active development. RTL layout (text and logos flipped) isn’t live yet, but the dev team is prioritizing it. If you need RTL support for your broker DEX, raise the request with @Orderly_Changli so we can accelerate that feature in the next SDK update.",
    "last_referenced_date": "2025-02-12T11:25:28"
  },
  {
    "question": "When calling the delegateSigner endpoint with a tuple [signerKey, address], what should the second element be?",
    "answer": "The second element should be the externally owned account (EOA) address that will pay gas and sign EIP-712 messages. Do not use the multisig address here.",
    "last_referenced_date": "2024-07-02T16:31:20"
  },
  {
    "question": "How can I make the Orderly React Components SDK display my broker’s name instead of the broker ID in the UI?",
    "answer": "Pass a brokerName prop to OrderlyAppProvider. For example:\n<OrderlyAppProvider brokerId=\"your_broker_id\" brokerName=\"Your Broker Name\" …>\n  {children}\n</OrderlyAppProvider>\nRefer to the React SDK docs under “Configuration → OrderlyAppProvider” for full details.",
    "last_referenced_date": "2024-07-04T16:29:26"
  },
  {
    "question": "How do I integrate a referral page UI in my React app using @orderly.network/referral?",
    "answer": "Import Referral and ReferralProvider from @orderly.network/referral, wrap the relevant part of your app with ReferralProvider configured with your URLs and handlers, then mount <Referral />. For example:\n\nimport { Referral, ReferralProvider } from '@orderly.network/referral';\n\n<ReferralProvider\n  becomeAnAffiliateUrl=\"https://ox.markets/\"\n  learnAffiliateUrl=\"https://ox.markets/\"\n  referralLinkUrl=\"https://ox.markets/\"\n  bindReferralCodeState={(isSuccess, error, hide, params) => { /* … */ }}\n  showReferralPage={() => {/* … */ }}\n  onEnterAffiliatePage={(params) => {/* … */ }}\n  onEnterTraderPage={(params) => {/* … */ }}\n>\n  <Referral />\n</ReferralProvider>\n\nSee the js-sdk-demo repository’s referral example for a complete integration.",
    "last_referenced_date": "2024-07-09T14:28:48"
  },
  {
    "question": "Why am I seeing “configStore is not defined, please use OrderlyProvider” when using the referral component?",
    "answer": "That error means you haven’t wrapped your app with the OrderlyAppProvider. Ensure your root React tree is wrapped with <OrderlyAppProvider> so the SDK’s configStore is initialized before you mount the referral components.",
    "last_referenced_date": "2024-07-10T06:31:25"
  },
  {
    "question": "How do I determine which merit epoch is currently active when using the get-start-and-end-date-of-all-epochs API?",
    "answer": "Call the public endpoint GET /v1/public/get-start-and-end-date-of-all-epochs, which returns an array of epochs with epoch_start and epoch_end timestamps. Compare your client’s current timestamp against those start/end values to identify the active epoch.",
    "last_referenced_date": "2024-06-28T10:47:06"
  },
  {
    "question": "Is there a mobile app for Orderly, and how can I install it on my device?",
    "answer": "Orderly is delivered as a Progressive Web App (PWA). On mobile browsers, use the browser’s “Install” or “Add to Home Screen” feature (e.g., via the share menu in Safari or the PWA install button in Brave/Chrome) to install it like a native app. No app store download is required.",
    "last_referenced_date": "2024-07-18T11:33:34"
  },
  {
    "question": "How often are trading fees settled to my broker’s admin wallet, and at what time?",
    "answer": "Trading fees are settled daily to your registered admin wallet. The settlement typically occurs each day around 08:00 UTC+8.",
    "last_referenced_date": "2024-07-15T08:51:35"
  },
  {
    "question": "Where do I claim or withdraw the accumulated trading fees from my Orderly admin wallet?",
    "answer": "Once you’ve enabled trading, accrued fees appear in your admin wallet balance on the Orderly dashboard. To claim them, use the withdrawal flow—either via the dashboard’s Withdraw action or by calling the SDK’s withdraw() method / REST private withdraw endpoint—to transfer funds on-chain from your Orderly admin account.",
    "last_referenced_date": "2024-07-20T07:50:58"
  },
  {
    "question": "How can I map an Orderly account ID to its corresponding EVM wallet address?",
    "answer": "Use the public REST endpoint GET /v1/public/check-if-account-exists with the account_id or user address. The response will indicate whether the account exists and return the linked EVM address.",
    "last_referenced_date": "2024-10-24T06:16:55"
  },
  {
    "question": "Do you have a Solana development SDK or API call signature examples for integrating Solana with Orderly?",
    "answer": "Use the Hooks SDK v2.0.0 and later, which is compatible with Solana. You can follow the example in the example-dex repository (https://github.com/OrderlyNetwork/example-dex), which integrates both EVM and Solana flows. Note that deposit is currently broken due to recent LayerZero parameter changes, and we plan to release an SDK update to fix it. Additionally, the Components SDK v2 (releasing next week) will ship with first-class Solana support.",
    "last_referenced_date": "2024-11-09T02:00:14"
  },
  {
    "question": "When initializing the Orderly React SDK for Solana only, can I omit EVM configurations to avoid unnecessary objects?",
    "answer": "Yes. In your OrderlyProvider (or OrderlyAppProvider), simply remove the EVM provider configuration. For example, see the Solana-only setup in the example-dex repo: app/providers/OrderlyProvider.tsx (lines 24–27) where only the Solana provider is passed. This prevents EVM modules from being initialized.",
    "last_referenced_date": "2024-11-13T08:33:47"
  },
  {
    "question": "How do I bypass Solana RPC simulation errors (e.g., in the testnet faucet) when sending transactions?",
    "answer": "Disable preflight simulation by passing skipPreflight: true in your sendTransaction options. For example:\n\nconst txHash = await connection.sendTransaction(tx, signers, { skipPreflight: true });\n\nThis avoids RPC simulation failures when the simulate endpoint is overloaded.",
    "last_referenced_date": "2024-11-13T07:49:58"
  },
  {
    "question": "Which hooks in the Orderly Hooks SDK auto-refresh holdings and collateral balances after deposit or withdrawal?",
    "answer": "Use useHoldingStream to subscribe to holdings updates. It returns { data: holdings, usdc, isLoading } and automatically updates when balances change. You can also use useCollateral, which provides freeCollateral, totalCollateral, availableBalance and updates in real time.",
    "last_referenced_date": "2024-12-11T08:30:07"
  },
  {
    "question": "How is the Solana vault implemented relative to the EVM design, and how are settlement instructions transmitted (are they passed via LayerZero)?",
    "answer": "The Solana vault is built on the same core architecture as the EVM vault, with adaptations for Solana’s throughput and transaction model. Deposits and withdrawals use LayerZero similarly to EVM chains, so network stress affects only those flows. Open order data and settlement instructions are not sent over LayerZero to Solana; they remain on Orderly’s L2 and are processed in our backend.",
    "last_referenced_date": "2024-10-15T13:53:19"
  },
  {
    "question": "How do I enable Ledger wallet login support in the Solana Hooks SDK?",
    "answer": "In SDK v2.0.4 and later, Ledger support is included. Use the useStorageLedgerAddress hook to persist the Ledger-derived address in localStorage. For example:\n\nimport { useStorageLedgerAddress } from '@orderly.network/hooks';\n\nfunction Connector() {\n  const { setLedgerAddress } = useStorageLedgerAddress();\n  if (wallet.adapter.name === 'Ledger') {\n    setLedgerAddress(userAddress);\n  }\n}\n\nThis lets the SDK recognize and reuse the Ledger address.",
    "last_referenced_date": "2025-02-14T11:25:13"
  },
  {
    "question": "How can I programmatically deposit to another Solana user’s vault account using the Orderly Solana vault?",
    "answer": "The Solana Vault deposit function accepts a DepositParams.user_address field so you can designate a different recipient. Call deposit({/* …other params…,*/ user_address: '<targetSolanaAddress>' }) to credit that user’s vault. For reference, see the WooFi Pro EVM implementation at https://arbiscan.io/address/0xd4bbbc055b80c2a3dbe581a24224de976d062d13#code and adapt your Solana DepositParams accordingly.",
    "last_referenced_date": "2025-02-24T10:01:00"
  },
  {
    "question": "Why do I receive a timestamp expiration error when withdrawing tokens, and what is the message expiry time?",
    "answer": "Orderly’s off-chain messages for withdrawals expire after 5 minutes. Ensure your device clock is accurate and that you sign the message within 5 minutes of its creation to avoid timestamp errors.",
    "last_referenced_date": "2025-01-13T08:16:43"
  },
  {
    "question": "What is the revenue-share model for brokers on Orderly and which blockchain networks does Orderly currently support for integration?",
    "answer": "Orderly’s base fee model is:  \n• Taker: 3 bps base fee goes to Orderly; brokers can set a custom taker fee on top (100 % to the broker).  \n• Maker: 0 bps base fee; brokers can set a custom maker fee on top (100 % to the broker).  \nAfter the token generation event (TGE), the base fee structure will become even more favorable for brokers.  \n\nChain support (as of 2024-03-08):  \n• Live on Arbitrum (ARB) and Optimism (OP).  \n• Upcoming integrations under discussion: Linea, Scroll, Monad, Avalanche, BNB, etc.  \n\nTo onboard a new EVM chain today, you need:  \n1. LayerZero integration  \n2. Native USDC support  \n3. CCTP (Circle Cross-Chain Transfer Protocol) enabled  \n(Orderly will expand collateral options and messaging solutions over time.)",
    "last_referenced_date": "2024-03-08T18:03:03"
  },
  {
    "question": "How do I obtain a Web3-Onboard API key for Orderly integration?",
    "answer": "You must apply directly with the Web3-Onboard project to get an API key. Orderly does not issue or provision this key for you. Visit the Web3-Onboard documentation or website to register and generate your own API credentials.",
    "last_referenced_date": "2024-06-14T05:27:23"
  },
  {
    "question": "How do I integrate Orderly’s referral system on my backend, and where can I find the Dune and merits leaderboard API details?",
    "answer": "Referral system:  \n• Follow the guide under “Build on EVM → User Flows → Referral System” in the docs: docs/orderly.network/build-on-evm/user-flows/referral-system.  \n• You need to run your own backend service to generate referral keys (ed25519) and distribute them to your users.  \n\nDune Analytics API:  \n• Use Dune’s REST API endpoint GET /query/{query_id}/results (see https://docs.dune.com/api-reference/executions/endpoint/get-query-result).  \n• To find your query_id, open your dashboard query on dune.com and copy the ID from the URL (e.g., dune.com/orderly_network/orderly-dashboard).  \n\nMerits leaderboard:  \n• Call the public REST endpoint GET /v1/public/get-points-leaderboard.  \n• See “Build on EVM → EVM API → RESTful API → Public → get-points-leaderboard” in the Orderly docs for full parameter details.",
    "last_referenced_date": "2024-07-05T06:55:52"
  },
  {
    "question": "How do I obtain a broker_id for testnet integration with the Orderly SDK, and what default value can I use before it's set up?",
    "answer": "You can ask the Orderly team to set up your broker_id on testnet for you. In the meantime, you can use the placeholder broker_id “woofi_pro” to start testing with the SDK before your own broker_id (e.g., “unibot”) is configured. To configure a custom broker_id on testnet, provide your desired broker_id, broker name, and an EOA admin wallet address to the Orderly team.",
    "last_referenced_date": "2024-02-01T02:52:23"
  },
  {
    "question": "Where are Orderly’s API servers hosted and in which region should I deploy my backend for the best latency?",
    "answer": "Orderly’s API is hosted on Google Cloud Platform in the Tokyo region (GCP Tokyo). You can deploy any proxy or backend servers in the same region to minimize latency.",
    "last_referenced_date": "2024-02-02T13:04:40"
  },
  {
    "question": "Which blockchains does Orderly support for native USDC deposits?",
    "answer": "Orderly supports native USDC deposits on the following EVM chains: Arbitrum, Optimism, Base, Mantle, and Ethereum mainnet.",
    "last_referenced_date": "2024-06-13T11:18:30"
  },
  {
    "question": "How can we retrieve the list of user addresses who have traded through our broker via Unibot Perps on a daily basis?",
    "answer": "You cannot directly fetch individual trader addresses via a public endpoint. Instead, use the private REST endpoint GET /v1/private/get-builders-users-volumes to retrieve daily volume per account_id. From that data, you can derive which user account_ids traded each day.",
    "last_referenced_date": "2024-12-03T20:24:43"
  },
  {
    "question": "Is KYC required when integrating with the Orderly API, or is it only for WOO X?",
    "answer": "KYC is only required for WOO X, which is a centralized exchange. Integrations that build on Orderly’s omnichain/perpetual DEX via the SDK or APIs do not require KYC.",
    "last_referenced_date": "2024-03-26T18:29:41"
  },
  {
    "question": "What do the metrics “Cumulative net fees”, “Total broker fees”, and “Net fees last 24h” represent in the Orderly Dune dashboard?",
    "answer": "“Cumulative net fees” is Orderly’s total revenue since the EVM launch. “Total broker fees” is the combined fee earnings of all Orderly integrators (brokers) to date. “Net fees last 24h” is the fee revenue earned by Orderly itself over the last 24 hours.",
    "last_referenced_date": "2024-06-09T12:43:09"
  },
  {
    "question": "How can I implement a custom deposit workflow in the React Components SDK, integrating our own backend signing logic instead of using the default wallet connection?",
    "answer": "Use a custom wallet connection provider by implementing the Web3-Onboard interface (see the Components SDK docs under Wallet Connection). Disable the built-in deposit/withdrawal UI via the disableFeatures prop on the TradingPage component (e.g., TradingFeatures.AssetAndMarginInfo). Build your own deposit UI that calls your backend API to bridge or convert funds, then invoke the vault contract’s depositTo function in your application code to deposit USDC into the user’s Orderly account. If you fully abstract away the wallet connection, your backend will need to proxy on-chain calls and REST API requests to Orderly.",
    "last_referenced_date": "2024-06-13T10:32:20"
  },
  {
    "question": "How do I run the Orderly example-dex locally when it shows an empty screen after starting the dev server?",
    "answer": "Clone the example-dex repo, then install and start it with yarn v1 and Node.js v20:  \n1. git clone https://github.com/OrderlyNetwork/example-dex.git  \n2. cd example-dex  \n3. yarn install  \n4. yarn dev  \nIf you still see a blank page, check your VPN or firewall settings—they can block webpack’s dev server. Then open http://localhost:3000 in a browser.",
    "last_referenced_date": "2024-07-15T08:58:33"
  },
  {
    "question": "Is it possible to remove the watermark in the Orderly example-dex demo, or do I need to build my own UI?",
    "answer": "The demo UI includes the watermark by design. To remove it, you’ll need to build and style your own frontend using the Hooks or Components SDK—there is no configuration flag to hide the watermark in the shipped example.",
    "last_referenced_date": "2024-07-16T13:58:06"
  },
  {
    "question": "How do I integrate TradingView charts in my Orderly DEX and where do I get the charting_library.js file? Are there any alternatives?",
    "answer": "Orderly’s demo uses TradingView’s Charting Library, which requires a commercial license. To obtain charting_library.js, apply on TradingView’s site (e.g., tradingview.com/advanced-charts) and they’ll send you the library package. There is currently no supported alternative to TradingView’s library for embedded perp charting in the SDK.",
    "last_referenced_date": "2024-09-03T03:31:12"
  },
  {
    "question": "Where can I view my broker’s (e.g., BooDex) daily trading volumes programmatically?",
    "answer": "Orderly publishes DEX volume data on Dune Analytics. Visit the Orderly dashboard at dune.com/orderly_network/orderly-dashboard and apply a filter for your broker_id (e.g., ghosty_cash) to see your platform’s daily volumes and other metrics.",
    "last_referenced_date": "2024-09-06T16:59:07"
  },
  {
    "question": "Which private API endpoint do I call to update my builder’s default fee rates, and how do I authenticate that call?",
    "answer": "Use the private REST endpoint POST /v1/broker/fee_rate/default (also documented as “update-default-builder-fee”). Include your broker_id and the new maker_fee_rate and taker_fee_rate in the JSON body. Sign the request with your admin wallet’s ed25519 Orderly key as described under “Build on EVM → EVM API → RESTful API → Private → update-default-builder-fee” and “API Authentication” in the docs.",
    "last_referenced_date": "2024-09-09T13:55:35"
  },
  {
    "question": "Why does the React Components SDK still show “Please connect to a supported network” after switching my wallet to ETH mainnet, and how do I fix it?",
    "answer": "That happens when the `networkId` prop in your OrderlyAppProvider was initially set to testnet (or vice versa). After a wallet network change, the SDK requires a full page reload to pick up the new chain. Make sure your `networkId` matches the chain you want, then perform a hard refresh on network change. See the React SDK docs under “Configuration → onChainChanged”.",
    "last_referenced_date": "2024-09-16T07:03:54"
  },
  {
    "question": "In MetaMask, switching to Mantle still shows the unsupported-network warning. How do I avoid that?",
    "answer": "There’s a known MetaMask bug where switching networks in the UI doesn’t always update the dapp. To work around it, switch your wallet network to Mantle directly in MetaMask first, then interact with the Orderly UI—this ensures the SDK detects the correct chain.",
    "last_referenced_date": "2024-09-19T14:01:34"
  },
  {
    "question": "What version of the Orderly SDK do I need to integrate Solana mainnet trading, and how do I migrate?",
    "answer": "Solana mainnet support is available in the Hooks SDK v2 alpha releases (v2.0.1-alpha.4 or later). Upgrade your @orderly.network/hooks package to the latest v2 alpha and follow the migration guide under “SDKs → Migrate” in the docs: https://orderly.network/docs/sdks/migrate.",
    "last_referenced_date": "2024-12-03T15:31:45"
  },
  {
    "question": "How do I disable Solana support in my DEX UI when using the React Components SDK?",
    "answer": "Use the `chainFilter` prop on `OrderlyAppProvider` to list only the chains you want. For example, omit the Solana chain object from `chainFilter.mainnet`. The SDK will then only initialize and display the specified chains.",
    "last_referenced_date": "2024-12-04T14:06:26"
  },
  {
    "question": "Where can I find the documentation for integrating Orderly’s UI widget or theme in my front end?",
    "answer": "Refer to the React Components SDK theme docs at https://sdk.orderly.network/theme.",
    "last_referenced_date": "2024-04-12T12:22:47"
  },
  {
    "question": "When integrating the React Components SDK's TradingPage, I got a 404 at /docs/trading-page and CRA failed in create-orderly-app. How do I resolve this and where are the correct docs?",
    "answer": "Use the TradingPage docs under the Components SDK at https://sdk.orderly.network/components/trading. If the CRA initializer fails, follow the manual installation guide at https://sdk.orderly.network/components/getting_started#manual-installation or inspect the example in the js-sdk-demo repo (app/perp/[symbol]/view.tsx) for proper props usage.",
    "last_referenced_date": "2024-05-02T11:31:56"
  },
  {
    "question": "I'm getting “export 'useId' was not found in 'react'” when building a CRA/CRACO app with the Components SDK and React 17. How do I fix it?",
    "answer": "In your craco.config.js, add the following webpack aliases:\n\n```\nmodule.exports = {\n  webpack: {\n    alias: {\n      \"react/jsx-dev-runtime\": \"react/jsx-dev-runtime.js\",\n      \"react/jsx-runtime\": \"react/jsx-runtime.js\"\n    }\n  }\n};\n```\n\nAlso upgrade your app to React 18, as the Components SDK is built against React 18.",
    "last_referenced_date": "2024-05-07T13:49:33"
  },
  {
    "question": "How can I restrict the trading page to only the Base chain in the React Components SDK, and how do I integrate my custom wallet connector instead of the default?",
    "answer": "Set the `chainFilter` prop on the `TradingPage` component (or on `OrderlyConfigProvider` if using hooks) to include only Base. To use a custom connector, follow the wallet integration guide in the Components SDK at https://sdk.orderly.network/components/wallet.",
    "last_referenced_date": "2024-05-10T08:49:09"
  },
  {
    "question": "What API endpoint returns users’ merit points for the current and past epochs, and where can I find it?",
    "answer": "Call the public REST endpoint GET /v1/public/get-users-points. See the docs under “Build on EVM → EVM API → RESTful API → Public → get-users-points” for parameters and response format.",
    "last_referenced_date": "2024-05-29T16:30:19"
  },
  {
    "question": "Is Orderly deployed on the Monad testnet yet, and if not, when can we expect support?",
    "answer": "Monad support isn’t live yet. Orderly is currently working on the Mantle integration and will announce Monad testnet availability once integration begins.",
    "last_referenced_date": "2024-05-22T11:29:07"
  },
  {
    "question": "How can I retrieve 24-hour trading volume by broker via API or WebSocket, and does it reflect volume across Orderly or per broker?",
    "answer": "Subscribe to or query the public WS topic “24-hour-tickers-by-broker” (GET /v1/public/24-hour-tickers-by-broker) as documented under “WebSocket API → Public → 24-hour-tickers-by-broker”. By default, this returns aggregate volume across all brokers. To view only your broker’s volume, you can also use the Orderly Dune dashboard at https://dune.com/orderly_network/orderly-dashboard.",
    "last_referenced_date": "2024-06-18T01:48:00"
  },
  {
    "question": "Which API endpoint returns my broker’s daily trading volumes, and is there an endpoint for ROI metrics?",
    "answer": "Use the private REST endpoint GET /v1/private/get-brokers-users-volumes to fetch daily trading volumes (requires API authentication per the EVM API docs). The chat did not provide a dedicated endpoint for ROI metrics; you may need to compute ROI yourself or clarify your use case for leaderboard data.",
    "last_referenced_date": "2024-06-20T20:42:26"
  },
  {
    "question": "Is there an API to fetch individual transaction details (deposits, trades, withdrawals) for my broker programmatically?",
    "answer": "The Orderly Dashboard at https://orderly-dashboard.orderly.network/?broker_id=YOUR_BROKER_ID uses an undocumented public API under the hood to fetch per-transaction data. You can inspect the dashboard’s network calls in your browser dev tools to discover those endpoints, as there’s no official public REST documentation for them.",
    "last_referenced_date": "2024-06-28T13:59:56"
  },
  {
    "question": "For the trade history API that returns notional values, how many decimal places should I expect for the notional field?",
    "answer": "The notional value in that API is hardcoded to six decimal places.",
    "last_referenced_date": "2024-07-03T14:01:18"
  },
  {
    "question": "How do I obtain an API key from the admin wallet to integrate Orderly’s referral functionality into my LMS platform?",
    "answer": "You can generate an API key for your admin wallet via the Orderly dashboard at https://trade.what.exchange/portfolio/api-key. Use this admin key to authenticate calls from your LMS when creating or managing referral codes.",
    "last_referenced_date": "2025-04-09T15:09:19"
  },
  {
    "question": "For the create-referral-code API, how do I get the orderly_account_id and orderly_signature parameters required? Do I need to fetch them via the API or can the platform provide them directly?",
    "answer": "The create-referral-code endpoint uses the standard EVM API authentication. Follow the guide under “Build on Omnichain → EVM API → RESTful API → API Authentication” (https://orderly.network/docs/build-on-omnichain/evm-api/api-authentication) to generate the orderly_account_id and orderly_signature by signing the domain message with your wallet’s private key. You must produce these values client-side, not via the platform.",
    "last_referenced_date": "2025-04-10T09:48:05"
  },
  {
    "question": "What permissions does my Orderly API key need to successfully call the create-referral-code endpoint? Is a read-only key sufficient?",
    "answer": "The create-referral-code API must be called with an admin wallet’s Orderly key. Although you can try with a read-only key, best practice is to enable Trading permissions on your admin API key, since the endpoint enforces admin-level access.",
    "last_referenced_date": "2025-04-10T09:52:37"
  },
  {
    "question": "Is it mandatory to use the admin API key to generate referral codes via the Orderly API?",
    "answer": "Yes. Only the admin wallet’s Orderly API key can call the private create-referral-code endpoint. Non-admin or lower-permission keys are not permitted to generate referral codes.",
    "last_referenced_date": "2025-04-25T11:03:23"
  },
  {
    "question": "Why does my volume API query only return data for the last 90 days, and how can I retrieve trading volume history beyond that range?",
    "answer": "Orderly’s volume endpoints are capped at a 90-day window per call. To access older history, request a historical export (CSV/JSON) snapshot from the Orderly team and load it into your own database, or maintain your own data store. Custom REST APIs beyond 90 days are not currently supported.",
    "last_referenced_date": "2025-05-09T06:48:21"
  },
  {
    "question": "How do I register a testnet admin wallet and call the Orderly create-referral-code API for a specific wallet address?",
    "answer": "On testnet, register your admin wallet via the broker-registration UI at https://orderlynetwork.github.io/broker-registration/. This will provision an Orderly key for that wallet. Then use the private REST endpoint POST /v1/private/create-referral-code (see Build on Omnichain → EVM API → RESTful API → Private → create-referral-code) with your new admin key and the target wallet address to create the referral code.",
    "last_referenced_date": "2025-05-08T08:49:14"
  },
  {
    "question": "How can I synchronize a custom wallet connection between my application using ethers/react-web3 and the Orderly React Components SDK’s TradingPage component so that the TradingPage doesn’t require an extra reconnect?",
    "answer": "Implement the Custom Wallet Connection Provider as described under React SDK → Wallet → Custom Wallet Connection Provider. In your TradingPage setup, wrap OrderlyAppProvider with your own provider that passes through your ethers/react-web3 signer and provider. See https://orderly.network/docs/sdks/react/wallet#custom-wallet-connection-provider for the exact integration steps so the same wallet context is shared by your app and the TradingPage.",
    "last_referenced_date": "2024-08-22T06:50:08"
  },
  {
    "question": "Why is my builder volume API returning zero shortly after I open and close positions, and how can I claim fee rebates or retrieve builder fee information via API or interface?",
    "answer": "The builder volume endpoint (GET /v1/public/get-builder-volume) refreshes once per day, so very recent trades may not appear immediately. To claim rebates sent to your admin wallet, log in with your admin key on the broker-registration UI at https://orderlynetwork.github.io/broker-registration/ and use the Withdraw function. Programmatically, you can fetch your credited rebates and holdings via the private endpoint GET /v1/private/get-current-holding. A dedicated builder fee-breakdown API isn’t yet available; in the meantime, you can use Dune Analytics (Orderly Dashboard) for fee data.",
    "last_referenced_date": "2024-10-08T21:57:41"
  },
  {
    "question": "How can I retrieve per-user volume and PnL data for a trading competition? Is there a built-in leaderboard or do I need to build my own?",
    "answer": "There’s no built-in leaderboard yet. Use the public endpoint GET /v1/public/get-campaign-ranking (docs under Public → get-campaign-ranking) to fetch each user’s volume and PnL metrics for a given campaign. You’ll need to implement your own UI to display and sort the results.",
    "last_referenced_date": "2024-10-16T21:14:29"
  },
  {
    "question": "What steps should I follow to migrate my TradingPage component and related React SDK packages from v1.x to v2.x?",
    "answer": "Follow the official migration guide at https://orderly.network/docs/sdks/migrate and refer to the Next.js template example at https://github.com/OrderlyNetwork/orderly-js-sdk-nextjs-template. Upgrade all @orderly.network packages (hooks, react, types, web3-onboard) to v2.0.1-alpha.7, adjust any changed provider props per the migration guide, and test your TradingPage for breaking changes.",
    "last_referenced_date": "2024-12-10T06:52:06"
  },
  {
    "question": "What configuration changes are required in my React Components SDK to support Monad Testnet alongside Arbitrum Sepolia and Solana Devnet?",
    "answer": "In your OrderlyAppProvider, set the chainFilter prop to explicitly include your testnet chains. For example:\n\n```tsx\n<OrderlyAppProvider\n  brokerId={YOUR_BROKER_ID}\n  brokerName={YOUR_BROKER_NAME}\n  networkId=\"testnet\"\n  chainFilter={{\n    mainnet: [],\n    testnet: [\n      ArbitrumSepolia,\n      SolanaDevnet,\n      {\n        id: 10143,\n        chainInfo: {\n          name: \"Monad Testnet\",\n          public_rpc_url: \"https://testnet-rpc.monad.xyz\",\n          chainId: 10143,\n          currency_symbol: \"MON\",\n          explorer_base_url: \"\",\n          vault_address: \"\"\n        }\n      }\n    ]\n  }}\n>\n  {children}\n</OrderlyAppProvider>\n```",
    "last_referenced_date": "2025-02-19T16:09:19"
  },
  {
    "question": "What web interface can I use to test LayerZero OFT cross-chain transfers for a newly deployed token when the LayerZero dev tool UI is unavailable?",
    "answer": "Use the OrderlyNetwork OFT reference repository at https://github.com/OrderlyNetwork/oft-token. It includes scripts and examples for deploying OFT contracts, configuring adapters, approving, and sending tokens across chains. You can adapt this repo for your token and test cross-chain transfers. As an alternative, check Stargate’s example interface which also uses OFT under the hood.",
    "last_referenced_date": "2024-11-05T19:31:04"
  },
  {
    "question": "What hook or API should I use to fetch a user’s order history (including order price, filled quantity, trigger price, estimated total, and reduce_only flag)?",
    "answer": "Use the useOrderStream hook from @orderly.network/hooks. It retrieves incomplete and other orders for the connected account and includes fields such as price, filled_size, trigger_price, notional (estimated total), and reduce_only. For full details and example usage, see the SDK docs under “Hooks → Orders → useOrderStream”: https://orderly.network/docs/sdks/hooks/orders/use-order-stream",
    "last_referenced_date": "2024-10-27T04:29:57"
  },
  {
    "question": "How can I retrieve the maximum leverage for each trading symbol via the REST API?",
    "answer": "Call the public endpoint GET /v1/public/get-available-symbols. In each symbol’s data, look at the base_imr (initial margin ratio) field. Compute max leverage as 1 / base_imr (for example, base_imr = 0.05 ⇒ 20× leverage).",
    "last_referenced_date": "2024-11-08T13:36:16"
  },
  {
    "question": "How can I fetch and display liquidation events for a user’s account using the hooks SDK?",
    "answer": "Use the generic private query hook: usePrivateQuery('/v1/liquidations'). This invokes the private REST endpoint GET /v1/private/get-liquidated-positions-of-account and returns liquidation records for the authenticated account.",
    "last_referenced_date": "2024-11-12T15:05:13"
  },
  {
    "question": "Which hook provides total unrealized PnL for all open positions?",
    "answer": "Use the usePositionStream hook from @orderly.network/hooks. It streams PositionExt objects and includes an aggregated unrealized_pnl field that sums unrealized PnL across all open positions. See “Hooks → Positions → usePositionStream” in the SDK docs for details and the interface definition.",
    "last_referenced_date": "2024-11-19T10:03:30"
  },
  {
    "question": "What is unsettled PnL in Orderly, and how does it differ from unrealized PnL?",
    "answer": "Unsettled PnL covers matched trade profit or loss that hasn’t yet been transferred between accounts—it includes both realized and unrealized components. Unrealized PnL only reflects gains or losses on currently open positions. Use unsettled PnL to track pending balance updates after trades settle.",
    "last_referenced_date": "2024-12-05T08:24:26"
  },
  {
    "question": "Which HTTP endpoint returns a user’s current wallet balance without using the hooks SDK?",
    "answer": "Call the private REST endpoint GET /v1/private/get-current-holding. It returns the user’s current holdings across all assets (balances, deposits, withdrawals) and is the same endpoint used internally by the hooks SDK for balance queries.",
    "last_referenced_date": "2024-12-16T20:35:12"
  },
  {
    "question": "The default Arbitrum Sepolia testnet RPC in SDK v1 is down; how can I restore RPC connectivity for the hooks SDK?",
    "answer": "Upgrade to @orderly.network/hooks v2.0.1 or later. The v2 SDK ships with updated RPC endpoints for Arbitrum Sepolia, restoring read and write connectivity without manual overrides.",
    "last_referenced_date": "2025-01-06T15:45:29"
  },
  {
    "question": "Is it possible for my smart contracts to deposit USDC on behalf of users into the Orderly vault?",
    "answer": "Yes—your contract can act as an Orderly account via the delegate signer user flow. You must delegate to an EOA and then call the vault’s depositTo function from your contract. See “Building on EVM → User Flows → Delegate Signer” for the full implementation guide.",
    "last_referenced_date": "2025-02-04T13:49:21"
  },
  {
    "question": "Why can’t I fetch data for PERP_BERA_USDC on the testnet using the components SDK?",
    "answer": "Not all symbols are deployed on testnet. The testnet environment only includes a limited set of markets, and PERP_BERA_USDC may not be one of them. To test that symbol, use a pre-production or mainnet environment where it is available.",
    "last_referenced_date": "2025-02-06T19:53:31"
  },
  {
    "question": "Where do I deposit funds in order to trade on Orderly? Is it a smart contract wallet, a vault, or something else?",
    "answer": "Funds sit on Orderly’s vault smart contract. You do not need to deploy your own wallet–deposits are handled by the managed vault contract.",
    "last_referenced_date": "2024-04-29T18:17:54"
  },
  {
    "question": "How does LogX integrate with Orderly—via direct APIs or using the SDK?",
    "answer": "LogX integrates by calling Orderly’s REST APIs directly. However, for ease of development and built-in handling of authentication and data fetching, we recommend using at least the @orderly.network/hooks SDK.",
    "last_referenced_date": "2024-05-01T07:15:23"
  },
  {
    "question": "How can I retrieve token logo URLs for symbols returned by GET /v1/public/get-available-symbols?",
    "answer": "Each symbol’s logo is hosted at https://oss.orderly.network/static/symbol_logo/{TOKEN}.png. If you’re using the React SDK, you can also call the useSymbolsInfo hook, which returns image URLs alongside other symbol metadata.",
    "last_referenced_date": "2024-05-13T10:24:52"
  },
  {
    "question": "Which repository or documentation contains the React UI components for Orderly?",
    "answer": "The Orderly React Components SDK documentation is available under “Components → Introduction” at https://sdk.orderly.network/components/introduction. You can also explore the example-dex repo for usage samples: https://github.com/OrderlyNetwork/example-dex.",
    "last_referenced_date": "2024-05-13T10:21:09"
  },
  {
    "question": "Can I customize the look and feel of the Orderly React Components SDK UI?",
    "answer": "Yes. The SDK supports theming via the theming docs at https://sdk.orderly.network/components/theming. You can override colors, fonts, and component styles according to your brand requirements.",
    "last_referenced_date": "2024-05-14T08:56:11"
  },
  {
    "question": "Is there a built-in portfolio component available in the Orderly React Components SDK?",
    "answer": "There is no dedicated portfolio component exported by the SDK. To customize or embed a portfolio page, you can inspect the demo app at https://sdk-demo.orderly.network/perp/PERP_ETH_USDC to find component IDs and then override or style them via CSS in your app.",
    "last_referenced_date": "2024-05-14T08:58:40"
  },
  {
    "question": "Is it possible to enter an order size in USDC (quote currency) instead of the base asset (e.g., BTC) when placing orders via the hooks SDK?",
    "answer": "Not directly. The hooks SDK’s order entry APIs expect quantity in base asset units. To support quote-denominated inputs, you must convert your USDC amount to the base quantity yourself (quantity = USDC_amount / price) before calling the hook.",
    "last_referenced_date": "2024-05-14T09:47:37"
  },
  {
    "question": "Can I sponsor or cover the base trading fees for my users so they don’t pay that fee to Orderly?",
    "answer": "There’s no automatic fee-sponsorship feature. You can implement your own rebate mechanism: charge full fees on the Orderly side and then refund or credit back the base fee portion to users via your own off-chain logic.",
    "last_referenced_date": "2024-11-12T11:37:12"
  },
  {
    "question": "Can I integrate Polygon support into Orderly for deposits and trading?",
    "answer": "No. Polygon is not currently supported for Orderly deposits or trading due to an exclusive integration arrangement with another broker.",
    "last_referenced_date": "2024-11-12T15:07:43"
  },
  {
    "question": "Can we integrate the Privy wallet provider into Orderly, and are there any limitations?",
    "answer": "For EVM chains, integrating Privy poses no issues—your custom provider can be passed into the SDK. On Solana, provider interfaces differ, so you should wait for the official Privy connector (targeted for end of February) for seamless integration. Once live, you can plug Privy into the Solana hooks in place of the default adapter.",
    "last_referenced_date": "2025-01-30T10:26:06"
  },
  {
    "question": "Why does the trading fee on my 100 USDC market order show as 0.1723 USDC instead of 0.06 USDC when I set my taker fee to 0.06%?",
    "answer": "Orderly calculates fees on the filled quantity multiplied by the mark price at execution, including any slippage, then applies your fee rate and rounds. Because the notional used for fee calculation can differ slightly from your input amount (due to slippage and rounding), the resulting fee may be higher than simply 0.06 USDC on a 100 USDC order.",
    "last_referenced_date": "2024-08-21T05:33:07"
  },
  {
    "question": "How do I register my broker ID and admin wallet so I can configure default fees for my DEX?",
    "answer": "Ask Orderly to set up your broker ID (e.g., “book_x”). Then register your admin wallet address via the broker-registration UI at https://orderlynetwork.github.io/broker-registration/. Complete registration separately for testnet and mainnet. You can also use a multisig via the delegate signer flow.",
    "last_referenced_date": "2024-08-27T13:03:25"
  },
  {
    "question": "How can I change the colors of the margin ratio progress bar and the displayed percentage text in the React Components SDK?",
    "answer": "Upgrade @orderly.network/components to v1.5.12+. Then add CSS overrides for the `.orderly-progress-container` classes and the `#orderly-account-leverage #orderly-account-margin-ratio-value` selector, keyed to the `data-margin-ratio` attribute. For example:\n\n.orderly-progress-container[data-margin-ratio='high'] .orderly-progress-indicator { background-image: linear-gradient(to right, #FCCAC8, #6E1846); }\n#orderly-account-leverage[data-margin-ratio='high'] #orderly-account-margin-ratio-value { color: #FF67C2; }\n\nRepeat for other ratio levels as shown in the SDK example.",
    "last_referenced_date": "2024-08-30T04:09:45"
  },
  {
    "question": "What payload and signature format do I use to update my broker’s default builder fees via the EVM API?",
    "answer": "Use the private endpoint POST /v1/broker/fee_rate/default. Your JSON body should include `\"maker_fee_rate\"` and `\"taker_fee_rate\"`. Sign this payload with your admin wallet using the EIP-712 scheme per the API Authentication guide: https://orderly.network/docs/build-on-evm/evm-api/api-authentication. You can find a working Python example in the broker-fee-admin repo: https://github.com/OrderlyNetwork/orderly-evm-broker-fee-admin",
    "last_referenced_date": "2024-09-05T02:55:50"
  },
  {
    "question": "I set `maker_fee_rate` to 0, but my limit order still shows a 0.03% fee. Why?",
    "answer": "A limit order that crosses the orderbook executes immediately as a taker, so it incurs your taker fee. To earn the maker rebate, your limit order must rest on the book and be filled by someone else later. Any immediately filled limit order is treated as a taker trade.",
    "last_referenced_date": "2024-09-11T01:54:23"
  },
  {
    "question": "Why does the `get-user-daily-statistics` private API return no PnL data even though my trades span many days?",
    "answer": "That endpoint requires dates in `YYYY-MM-DD` format. If you send dates in `MM-DD-YYYY`, the backend returns an empty dataset. Correct your `start_date` and `end_date` query parameters to ISO format to retrieve data.",
    "last_referenced_date": "2024-09-15T07:24:20"
  },
  {
    "question": "How long does it take for affiliate commission statistics to appear, and how are those rebates computed?",
    "answer": "Affiliate and trader rebate data refresh once per day. Rebates are calculated from the total trading fees paid by traders minus Orderly’s base fee, then split according to your affiliate/trader rates. Expect new stats each 24 hours.",
    "last_referenced_date": "2024-09-27T13:38:16"
  },
  {
    "question": "The main docs at orderly.network are down. Where can I access the SDK documentation?",
    "answer": "While the primary site is unavailable, the SDK docs are live at https://orderly.mintlify.dev/ under the same sections (Hooks, Components, etc.).",
    "last_referenced_date": "2024-09-27T11:31:49"
  },
  {
    "question": "Are the portfolio UI elements (PnL panel, chart, \"Optional information to share\" section) shown on Woofi’s DEX included in the public SDK?",
    "answer": "No. Those portfolio and PnL-sharing components are custom implementations by Woofi and are not part of the publicly released React SDK components. The SDK doesn’t ship with a pre-built PnL panel or share-info controls.",
    "last_referenced_date": "2024-08-26T08:21:57"
  },
  {
    "question": "What information is required to set up a broker ID for Orderly?",
    "answer": "To register your broker ID, provide the following for both testnet and mainnet:\n– Broker ID (e.g., \"veeno_dex\")\n– Broker Name (your display name)\n– Default Taker Fee (e.g., 0.03%)\n– Default Maker Fee (e.g., 0.03%)\nOrderly will configure your broker account once you submit these details.",
    "last_referenced_date": "2024-08-13T17:20:27"
  },
  {
    "question": "Where can I find example request payloads for BRACKET algorithmic orders using Orderly’s REST API?",
    "answer": "See the “Building on EVM → Algo Order Samples” section in the Orderly docs, which provides ready-to-use JSON examples for BRACKET orders. Refer to:\nhttps://orderly.network/docs/build-on-evm/algo-order-samples",
    "last_referenced_date": "2024-11-25T02:45:34"
  },
  {
    "question": "Can I specify different quantities for take-profit and stop-loss legs in a single BRACKET or POSITIONAL_TP_SL algo order via the SDK or API?",
    "answer": "Not in the React Components SDK—it only supports equal-quantity exit legs. However, you can achieve custom TP/SL quantities using the REST API by placing multiple bracket orders via POST /v1/algo/order, each with its own child_orders and quantities. Each order will execute independently, letting you simulate different-sized TP and SL exits.",
    "last_referenced_date": "2024-10-17T22:05:30"
  },
  {
    "question": "Which SDK version should I use for integrating Solana, and should I update the React Components SDK now?",
    "answer": "For Solana devnet integration, upgrade your Hooks SDK to v2.0.0 as it includes Solana support. Do not update the React Components SDK to v2.0.0 yet, as a compatibility release is coming soon. Monitor the SDK changelog and examples repo for the Components SDK update.",
    "last_referenced_date": "2024-10-28T16:47:30"
  },
  {
    "question": "What is the correct chain ID to configure for Solana when initializing Orderly’s SDK?",
    "answer": "Use chain ID 900900900 for Solana mainnet in your supportedSolanaChains setup. Although it differs from standard RPC IDs like 101, this ID is what the Orderly SDK expects.",
    "last_referenced_date": "2024-12-02T15:07:57"
  },
  {
    "question": "Which package versions include the Solana deposit fix so that useDeposit no longer returns zero balance?",
    "answer": "Upgrade to the alpha.4 prereleases. For example:\n– @orderly.network/hooks: 2.0.1-alpha.4\n– @orderly.network/default-evm-adapter: 2.0.1-alpha.4\n– @orderly.network/default-solana-adapter: 2.0.1-alpha.4\nThis release addresses the Solana deposit issue. Ensure all related @orderly.network packages are on the matching alpha.4 versions.",
    "last_referenced_date": "2024-12-03T13:37:50"
  },
  {
    "question": "How do I reconcile missing executed quantity when summing orders and trades, accounting for liquidations?",
    "answer": "Liquidations are not included in the trades or orders endpoints. To reconcile your deltas, fetch liquidation records using the private REST endpoint GET /v1/private/get-liquidated-positions-of-account and include those quantities in your calculations.",
    "last_referenced_date": "2024-11-18T14:34:48"
  },
  {
    "question": "Where are the TypeScript interfaces for API.Order and API.AlgoOrder defined in the Orderly SDK?",
    "answer": "The TypeScript definitions are in the SDK’s types package under:\n\npackages/types/src/types/api.ts\n\nThis file exports interfaces including API.Order and API.AlgoOrder for REST response shaping.",
    "last_referenced_date": "2024-11-20T11:00:20"
  },
  {
    "question": "Which private endpoint returns detailed rebate parameters for referral codes owned by my admin wallet?",
    "answer": "Call the private REST endpoint GET /v1/private/get-referral-code-info. It returns all referral codes created by your admin key along with their rebate parameters (max_rebate_rate, referrer_rebate_rate, referee_rebate_rate).",
    "last_referenced_date": "2024-11-06T06:31:04"
  },
  {
    "question": "Is there compatibility with MetaTrader 4 on Orderly’s platform?",
    "answer": "Orderly does not currently support MetaTrader 4 integration. There is no official MT4 bridge or connector at this time.",
    "last_referenced_date": "2024-11-14T15:20:21"
  },
  {
    "question": "How can I set custom trading fees for specific user accounts via the Orderly EVM API?",
    "answer": "Use the private REST endpoint POST /v1/broker/fee_rate/set (update-user-fee-rate) to assign custom maker and taker fee rates to individual user addresses. Authenticate with your admin ed25519 key and include the user wallet addresses and desired fee rates in the request body. See the docs under “Build on Omnichain → EVM API → RESTful API → Private → update-user-fee-rate”: https://orderly.network/docs/build-on-omnichain/evm-api/restful-api/private/update-user-fee-rate",
    "last_referenced_date": "2025-01-16T13:49:58"
  },
  {
    "question": "Where can I access the Storybook interface to customize the theme of the Orderly React Components SDK?",
    "answer": "Visit the Orderly Components SDK’s Storybook at https://storybook.orderly.network/?path=/story/package-trading-tradingpage--page&globals=theme:custom to preview and tweak theme variables and component styles.",
    "last_referenced_date": "2025-04-02T07:41:29"
  },
  {
    "question": "Can I integrate Orderly DEX into a CCXT-based trading platform, and if so, which CCXT exchange name should I use?",
    "answer": "Yes. Orderly-backed DEXs are accessible via the Woofi Pro exchange in CCXT. Use the symbol “woofipro” when instantiating CCXT: https://docs.ccxt.com/#/exchanges/woofipro",
    "last_referenced_date": "2025-04-08T06:57:50"
  },
  {
    "question": "What is the URL for the Orderly admin tool where I can update user fee rates via a UI?",
    "answer": "Once it’s deployed, you can manage user fees in the Orderly admin portal at https://admin.orderly.network/fee_rate",
    "last_referenced_date": "2025-04-01T06:47:40"
  },
  {
    "question": "Where can I find documentation and example code for integrating Privy Connect as a wallet connector in an Orderly DEX using the React SDK?",
    "answer": "Refer to the React SDK wallet-connector docs under “Wallet Connect” at https://orderly.network/docs/sdks/react/wallet#wallet-connect and see the PrivyConnector example in the Dex Creator template on GitHub: https://github.com/OrderlyNetworkDexCreator/dex-creator-template/blob/main/app/components/orderlyProvider/index.tsx",
    "last_referenced_date": "2025-05-13T13:18:58"
  },
  {
    "question": "Which repository should I use to build a DefiLlama adapter for Orderly to submit for listing?",
    "answer": "Use the official DefiLlama adapter template for Orderly at https://github.com/OrderlyNetwork/defillama-adapter-template as your starting point. It includes scaffolding to fetch on-chain data and format it for submission.",
    "last_referenced_date": "2025-05-27T06:35:29"
  },
  {
    "question": "How do I set up an admin wallet on the testnet environment so that auto-referral endpoints work?",
    "answer": "Register your desired admin address on testnet via the broker-registration UI at https://github-dev.orderly.network/broker-registration/ and then inform the Orderly team. Once the wallet is registered and granted admin privileges, you’ll be able to use the auto-referral APIs on testnet.",
    "last_referenced_date": "2025-05-22T08:04:54"
  },
  {
    "question": "How can I check my account’s liquidated position history on Orderly?",
    "answer": "Use the Orderly Dashboard to view liquidation records for a given account. Point your browser to:\n\nhttps://orderly-dashboard.orderly.network/address/{user_address}?broker_id={your_broker_id}\n\nReplace `{user_address}` and `{your_broker_id}` with the relevant values. The dashboard will display your liquidation events.",
    "last_referenced_date": "2024-10-08T06:52:25"
  },
  {
    "question": "Which API endpoint returns my broker’s daily trading volumes per user, and how can I call it?",
    "answer": "Call the private REST endpoint GET /v1/private/get-builders-users-volumes. It returns daily volume records per account linked to your broker_id. Although it’s under “private,” it effectively serves as your broker’s volume endpoint—authenticate with your broker’s Orderly API key to retrieve the data.",
    "last_referenced_date": "2025-04-10T09:49:07"
  },
  {
    "question": "Why was my cross-chain deposit fee so high (e.g., 9.19 MNT) on Mantle, and how is it resolved?",
    "answer": "Orderly does not set cross-chain fees directly—LayerZero sets the messaging fee. A spike to 9.19 MNT was caused by an incorrect LayerZero configuration for our Mantle integration. The LayerZero team has since corrected the pricing, so deposit fees should now return to the expected 0.x USD range.",
    "last_referenced_date": "2024-11-15T03:53:45"
  },
  {
    "question": "Is there an API to integrate my custom app with Orderly’s DEX (for example, to connect the Cryptotraders DEX into our own frontend)?",
    "answer": "Orderly publishes a full API for builders under the “Build on Omnichain → Building on Omnichain” guide. This section of the docs describes the REST endpoints for orders, account key registration, and EIP-712 signing, with code examples in multiple languages. See the docs at Orderly Network under “Build on Omnichain → Building on Omnichain.”",
    "last_referenced_date": "2025-03-01T01:20:31"
  },
  {
    "question": "How do I access and use the Orderly admin UI to create referral codes, and where can I generate the API key needed for authentication?",
    "answer": "Log in to the Orderly admin portal at https://admin.orderly.network using your broker’s admin wallet. To get an API key for authentication, go to your DEX’s Portfolio → API Key section (e.g., https://<your-dex-domain>/portfolio/api-key), create a new key there, and then use that key when creating referral codes in the admin UI.",
    "last_referenced_date": "2025-04-02T11:28:55"
  },
  {
    "question": "Does Orderly support isolated margin mode per position like centralized exchanges, or is only cross margin available today?",
    "answer": "At present, Orderly’s perpetual futures use a cross-margin model only. Isolated margin across sub-accounts or per-position isolation is under active development and will be released in a future SDK/API update.",
    "last_referenced_date": "2025-04-05T19:53:05"
  },
  {
    "question": "What information do I need to provide to set up a new broker ID on Orderly’s EVM environment, and how do I register the broker admin wallet?",
    "answer": "When configuring a new broker ID on EVM, you must supply:\n1. Environment: specify Testnet or Mainnet.\n2. Broker ID: your chosen identifier (e.g., “btse_dex”).\n3. Broker Name: the display name for your DEX.\n4. Default Taker Fee Rate: decimal (e.g., 0.0006 for 6 bps).\n5. Default Maker Fee Rate: decimal (e.g., 0.0003 for 3 bps).\n6. Broker Admin Account: the EVM address that will collect broker fees and manage user fee rates and referral codes.\n\nAfter your broker ID is set up, register the admin wallet via the broker-registration UI (https://orderlynetwork.github.io/broker-registration/) so it can receive fees and access admin endpoints.",
    "last_referenced_date": "2024-08-01T11:31:26"
  },
  {
    "question": "Can I use separate wallets for receiving broker fees and for managing user fee rate configuration and referral codes?",
    "answer": "No. The broker admin account must perform all three functions: 1) receive broker fees, 2) manage users’ fee rate configurations, and 3) manage referral codes. You cannot split these roles across multiple wallets.",
    "last_referenced_date": "2024-07-16T12:34:40"
  },
  {
    "question": "How can a token project propose a new market listing on Orderly, and what are the technical and liquidity requirements?",
    "answer": "To list a token on Orderly, your project should meet the following criteria:\n1. Price feeds: at least 3 independent, reliable on-chain/off-chain price sources.\n2. Market maker: an integrated market maker must support the new market (or Orderly’s existing MMs can be used).\n3. Market capitalization: token FDV ≥ $20 million.\n\nLiquidity requirements per market:\n• Depth: ≥ $20 K USD at –2% and +2% price levels.\n• Levels: at least 15 price levels on both bid and ask sides within ±2%.\n• Spread: ≤ 50 bps.\n• Uptime: ≥ 90%.\n\nIf your token meets these specs, share your market maker integration details and price feeds with the Orderly team for approval.",
    "last_referenced_date": "2025-03-14T17:27:02"
  },
  {
    "question": "How can I fetch only my broker’s data (e.g., AscendEX) using the Orderly Dashboard API when the API key returns mixed broker data?",
    "answer": "The dashboard’s public API does not support a broker_id parameter. As a workaround, you should build your own query or data-layer filter (for example, on Dune Analytics or in your own database) to select only records for your broker before calling the dashboard API. In practice, you’d filter on `broker_id` in your query, then use the filtered results when invoking the dashboard endpoints.",
    "last_referenced_date": "2024-07-15T15:39:31"
  },
  {
    "question": "How do I integrate TradingView charts in the Orderly React Components SDK?",
    "answer": "Apply for the free version of TradingView’s Advanced Charts at tradingview.com/advanced-charts. Once you receive access, add the charting_library.js file into your repo and configure it in the TradingPage component. See the React Components SDK docs under “Trading → TradingViewConfig” at sdk.orderly.network/components/trading#tradingviewconfig for the exact config steps.",
    "last_referenced_date": "2024-06-24T06:48:34"
  },
  {
    "question": "Which public REST API endpoint returns campaign ranking data for a specific trading campaign?",
    "answer": "Call GET /v1/public/get-campaign-ranking with query parameters campaign_id and sort_by (e.g., volume). For example: GET https://api-evm.orderly.org/v1/public/campaign/ranking?campaign_id=72&broker_id=your_broker_id&sort_by=volume. See the docs under “Public EVM API → RESTful API → Public → get-campaign-ranking.”",
    "last_referenced_date": "2024-10-12T07:53:38"
  },
  {
    "question": "Can I use the trading campaigns API to retrieve statistics and leaderboards for a custom campaign, and which endpoints should I call?",
    "answer": "Yes. After Orderly configures your campaign, use the public endpoints under “EVM API → RESTful API → Public”:  \n• GET /v1/public/get-campaign-statistics to fetch overall campaign metrics.  \n• GET /v1/public/get-campaign-ranking to fetch per-user leaderboard data (params: campaign_id, broker_id, sort_by, page, size).",
    "last_referenced_date": "2024-10-09T13:54:59"
  },
  {
    "question": "How do I authenticate and sign my requests to the update-default-builder-fee private API endpoint?",
    "answer": "You must sign the request with an Orderly key using EIP-712. Generate an Orderly key via the broker-registration UI, then follow the API authentication guide under “Build on EVM → EVM API → API Authentication” (orderly.network/docs/build-on-evm/evm-api/api-authentication). Include your orderly_account_id and the EIP-712 signature when calling POST /v1/broker/fee_rate/default.",
    "last_referenced_date": "2024-10-28T09:03:10"
  },
  {
    "question": "Why are deposits via the @orderly.network/trading SDK on Monad testnet executing successfully but not transferring USDC to the vault, and how can I fix it?",
    "answer": "The version 2.0.4 SDK on Monad testnet used incorrect vault contract addresses. Upgrade your @orderly.network/trading package to version 2.0.7 or later, which includes the correct smart contract addresses for Monad testnet deposits.",
    "last_referenced_date": "2025-03-17T11:14:40"
  },
  {
    "question": "Why are testnet chain options not appearing in the OrderlyAppProvider chain selector after migrating to SDK v2, and how do I enable them?",
    "answer": "Testnet tabs only show if your broker ID is configured on testnet. Ensure the broker ID you pass to OrderlyAppProvider (e.g., crust_finance) is set up for testnet. After it’s created, the default testnet chains (ArbitrumSepolia, SolanaDevnet, Monad Testnet) will appear. Note that switching networkId at runtime requires a full page reload or separate domain; you can also manually set chainFilter.testnet and use overrides.showTestnet to control visibility.",
    "last_referenced_date": "2025-02-24T09:18:42"
  },
  {
    "question": "What is the delegate signer in Orderly and do I need to configure it for my admin wallet?",
    "answer": "A delegate signer lets you use a multisig or contract account as your Orderly admin wallet by delegating signing rights to an EOA. If you are using a standard externally owned account (EOA) as your admin wallet, you do not need to set up a delegate signer.",
    "last_referenced_date": "2024-07-19T06:31:07"
  },
  {
    "question": "Is it possible to set up trading campaigns using the Orderly API on testnet, specifically Monad testnet?",
    "answer": "The chat raises this question but does not provide implementation details. You will need to coordinate with the Orderly team for instructions on campaign setup on testnet.",
    "last_referenced_date": "2025-04-16T11:37:53"
  },
  {
    "question": "How do I use the @orderly.network/trading-view library to display the AdvancedChart like the one on orderly-dex.pages.dev after cloning the example-dex repo?",
    "answer": "You must supply your own TradingView Advanced Charts library when using @orderly.network/trading-view. First apply for access at tradingview.com/advanced-charts, then include the downloaded charting_library.js in your project and point the @orderly.network/trading-view configuration to it. No built-in chart library is bundled.",
    "last_referenced_date": "2024-04-22T19:25:22"
  },
  {
    "question": "How can I retrieve broker IDs for testnet and mainnet (interim) when integrating Orderly, and where do I find them?",
    "answer": "Call the public REST endpoint GET /v1/public/get-broker-list under the EVM API docs (“Public → get-broker-list”). Its response returns objects with `broker_id` and `broker_name`. As an interim value, you can use:\n\n  • broker_id: \"woofi_pro\"\n  • broker_name: \"WOOFi Pro\"\n\nOnce your own broker IDs are configured, you’ll see them in that list.",
    "last_referenced_date": "2024-04-22T16:07:11"
  },
  {
    "question": "Why do I get an internal server error when calling the private cancel-all-pending-algo-orders endpoint, and how should my request be formatted?",
    "answer": "When invoking DELETE /v1/algo/orders?symbol=…&algo_type=…, you must set the header `Content-Type: application/x-www-form-urlencoded;charset=utf-8` (not application/json). Include your orderly-timestamp, orderly-account-id, orderly-key, and orderly-signature headers as usual. For code samples, see the Orderly Python connector’s implementation of that endpoint.",
    "last_referenced_date": "2024-05-26T07:39:50"
  },
  {
    "question": "Are private Orderly API rate limits enforced per user account or per IP address?",
    "answer": "Private (authenticated) REST endpoints are rate-limited on a per-user-account basis. Public endpoints are limited per IP address.",
    "last_referenced_date": "2024-07-30T14:35:02"
  },
  {
    "question": "What is the formula to calculate current account leverage on Orderly?",
    "answer": "Current leverage is calculated as 1 ÷ (account margin ratio). See the “Perpetual Futures → Margin, Leverage, and PnL” section in the docs for definitions, or refer to the SDK code in packages/perp/src/order.ts (around line 175) for the exact implementation.",
    "last_referenced_date": "2024-10-31T09:26:40"
  },
  {
    "question": "How can I fetch historical data for price, funding rate, open interest, and volume when building an Orderly integration?",
    "answer": "If you use the React Hooks SDK:\n• Price: use useTickerStream, which returns index_price.\n• Funding rate: use useFundingRate or subscribe to funding rate streams.\n• Open interest (current): use useTickerStream’s open_interest field. Note: there’s no historic open interest API today.\n• Volume (current 24h): use useTickerStream’s 24h_volume field.\nFor historical time series:\n• Daily volume: call the private REST endpoint GET /v1/volume/broker/daily?start_date=YYYY-MM-DD&end_date=YYYY-MM-DD.\n• Historical funding fee history (with mark_price): call GET /v1/public/get-funding-fee-history (or private equivalent).\n• Basis: not provided in the API today.",
    "last_referenced_date": "2024-03-19T14:33:14"
  },
  {
    "question": "How do I obtain or set up my brokerId for Orderly SDK integration when it’s not in the docs yet?",
    "answer": "Provide the Orderly team with your desired values:\n1. broker_id (string identifier)\n2. broker name (display name)\n3. broker admin EOA wallet address (for fee rebates and admin API calls)\n4. default maker and taker fee rates\nThey will register your brokerId in their backend. Meanwhile, you can call the public REST endpoint GET /v1/public/get-broker-list to see existing broker_ids you can use for testing.",
    "last_referenced_date": "2024-04-06T08:04:22"
  },
  {
    "question": "Can I make custom frontend changes to individual TradingPage components beyond the theming options in the React Components SDK?",
    "answer": "No. When you render the full TradingPage from the Components SDK, you are limited to the props and theming options it exposes. For deeper or bespoke UI changes beyond what TradingPage offers, use the Hooks SDK (@orderly.network/hooks) to build your own components.",
    "last_referenced_date": "2024-04-06T21:05:32"
  },
  {
    "question": "How do I configure TradingView charts in the React Components SDK? What values should I set for scriptSRC and library_path in orderly.config.ts?",
    "answer": "You must supply your own TradingView Advanced Charts library.  \n1. Apply for and download the library from https://www.tradingview.com/advanced-charts/.  \n2. Place the files in your public folder (e.g., `/charting_library/charting_library.standalone.js` and the `/charting_library/` directory).  \n3. In your orderly.config.ts, set:\n{\n  scriptSRC: '/charting_library/charting_library.standalone.js',\n  library_path: '/charting_library/',\n  /* …other config… */\n}\nRefer to the js-sdk-demo example’s config.ts for a complete setup.",
    "last_referenced_date": "2024-04-08T11:06:36"
  },
  {
    "question": "How do I remove the horizontal scrollbar issue in the Orderly React Components SDK?",
    "answer": "Upgrade your @orderly.network/components package to version 1.3.2 or later. The horizontal scrollbar bug is fixed in v1.3.2.",
    "last_referenced_date": "2024-04-23T09:59:46"
  },
  {
    "question": "Is there an API to retrieve all trades executed under a brokerId across every user?",
    "answer": "Not today. There’s no single endpoint that returns all individual trade records per broker. As a workaround, you can:\n• Fetch per-account daily volumes via the private endpoint GET /v1/private/get-broker-daily-volume.  \n• If you need individual trades, you must call GET /v1/client/trades for each user/account_id.",
    "last_referenced_date": "2024-04-10T13:12:33"
  },
  {
    "question": "When calling GET /v1/private/get-broker-daily-volume, which ‘orderly-account-id’ should I use in the headers to fetch all users’ volume under my broker?",
    "answer": "Use the Orderly account ID of your registered broker admin account. That admin account’s credentials allow the API to return daily volume records for every account linked to your brokerId.",
    "last_referenced_date": "2024-04-10T15:16:57"
  },
  {
    "question": "What do the fields perp_volume, perp_maker_volume, and perp_taker_volume represent in the broker daily volume API?",
    "answer": "• perp_volume: the total perpetual trading volume (in USDC) for that account on the given day.  \n• perp_maker_volume: the portion of that volume executed as maker trades.  \n• perp_taker_volume: the portion executed as taker trades.  \nThey satisfy perp_maker_volume + perp_taker_volume = perp_volume.",
    "last_referenced_date": "2024-04-10T15:21:34"
  },
  {
    "question": "How do I ensure my request timestamp and signature are valid when calling private REST endpoints in the Orderly EVM API?",
    "answer": "• orderly-timestamp must be the current UTC time in milliseconds (within 5 minutes of signing).  \n• orderly-signature must be an EIP-712 signature of the request domain message, signed with your Orderly private key.  \nFollow the API Authentication guide under “Build on EVM → EVM API → API Authentication” in the docs for exact header construction and signing details.",
    "last_referenced_date": "2024-04-10T16:46:13"
  },
  {
    "question": "How can I transfer the admin ownership of my brokerId to a new wallet address?",
    "answer": "Register the new EOA address as an Orderly account under your brokerId via POST /v1/register_account (or using the broker-registration UI). Once the new address is registered, inform Orderly so they can designate it as your broker’s admin account.",
    "last_referenced_date": "2024-04-19T09:45:57"
  },
  {
    "question": "How do I derive the Orderly public key from a private key for API authentication?",
    "answer": "Refer to the Orderly examples repository’s TypeScript example: see `examples/api/ts/src/orderlyKeyExample.ts` at lines 43–44. That snippet shows how to derive the public key from your private key in code.",
    "last_referenced_date": "2024-05-06T08:37:31"
  },
  {
    "question": "Is tiered fee structure available on Orderly EVM perps, or is that only for NEAR?",
    "answer": "The EVM base fee is fixed at 3 bps taker and 0 bps maker (Orderly’s portion). Any fee you add on top is yours. For volume-based tiered fees on EVM, use the broker-fee-admin repo (https://github.com/OrderlyNetwork/orderly-evm-broker-fee-admin) to programmatically create custom fee tiers.",
    "last_referenced_date": "2024-05-06T17:51:20"
  },
  {
    "question": "Why are hidden (iceberg) orders always considered taker volume?",
    "answer": "Hidden orders always execute as takers when they cross the orderbook immediately, so they are always recorded as taker trades in the volume metrics.",
    "last_referenced_date": "2024-05-07T10:30:13"
  },
  {
    "question": "Can I disable hidden (iceberg) orders by default in the SDK?",
    "answer": "Not currently. Disabling hidden orders by default is planned for an upcoming SDK release.",
    "last_referenced_date": "2024-05-07T19:42:38"
  },
  {
    "question": "What is the easiest way to programmatically retrieve my own account’s orders, positions, and balances?",
    "answer": "Use the React Hooks SDK:\n• useOrderStream for open orders,  \n• usePositionsStream for positions,  \n• useHoldingStream or useCollateral for balances.  \nIf you prefer REST, call endpoints like GET /v1/client/order, GET /v1/client/trades, and GET /v1/private/get-current-holding, or use usePrivateQuery for generic queries.",
    "last_referenced_date": "2024-04-10T15:55:28"
  },
  {
    "question": "How do I fix the “walletProvider is required” error when connecting a wallet in the React Components SDK v1.3.2?",
    "answer": "Ensure Web3-Onboard is fully configured in your `orderly.config.ts`. Follow the `js-sdk-demo` example:\n• Include all wallet modules (e.g., injectedModule, walletConnectModule) under `wallets`.\n• Set your WalletConnect `projectId` and verify your domain by hosting the verification file (`.well-known/walletconnect.txt`).\n• Use matching versions of @web3-onboard packages.\nCheck the `app/config.ts` in the `js-sdk-demo` repo for a complete setup.",
    "last_referenced_date": "2024-04-26T11:17:28"
  },
  {
    "question": "Is there an example for implementing a custom wallet connection provider with Orderly’s UI Components SDK?",
    "answer": "Yes. See the Wallet Connection guide in the Components SDK docs under “Wallet” for a full example: https://sdk.orderly.network/components/wallet",
    "last_referenced_date": "2024-05-20T22:53:23"
  },
  {
    "question": "What should the wallet object passed to WalletConnectorContextState look like when integrating custom embedded wallets with Orderly’s SDK?",
    "answer": "Your wallet object must conform to the SDK’s WalletState interface (a slimmed-down version of Web3-Onboard):\n\nexport interface WalletState {\n  label: string;\n  icon: string;\n  provider: EIP1193Provider;\n  accounts: { address: string }[];\n  chains: { id: number | string }[];\n  instance?: unknown;\n}\n\n• label: display name  • icon: icon key  • provider: an EIP-1193 provider  • accounts: array of {address}  • chains: array of {id}\n",
    "last_referenced_date": "2024-05-22T15:08:28"
  },
  {
    "question": "How should I generate an Orderly key pair for wallet authentication, given the example only shows a private key?",
    "answer": "An Orderly key is a key pair (private + public). You use the private key client-side to sign requests and include the corresponding public key in your API calls. If you use our hooks SDK, this key-pair management is built in and you don’t need to handle it yourself.",
    "last_referenced_date": "2024-06-03T06:53:57"
  },
  {
    "question": "Is it possible to make a withdrawal request to a different address than the Orderly account’s address, and if so, how?",
    "answer": "Yes. When you build the signed message for the withdrawal API, include your desired recipient under the `receiver` field. The SDK or your signing code will then direct the funds to that address instead of the default account.",
    "last_referenced_date": "2024-07-22T21:05:26"
  },
  {
    "question": "What does `orderly-signature` refer to in the get-withdrawal-nonce private API, and where can I find details?",
    "answer": "The `orderly-signature` header is the EIP-712 signature used for authenticating private EVM API calls. You can find full details under “Build on EVM → EVM API → API Authentication” in the Orderly docs: https://orderly.network/docs/build-on-evm/evm-api/api-authentication",
    "last_referenced_date": "2024-07-23T11:23:26"
  },
  {
    "question": "What integration support, timeline, customization options, liquidity provisioning, token launch flexibility, audit requirements, scalability, “Powered by Orderly Network” label policy, and pricing model do you offer when launching a custom Perpetual Futures Trading DEX powered by Orderly?",
    "answer": "Orderly provides end-to-end integration support including DevRel assistance and co-marketing. Integration typically takes 2–3 days with the full SDK (React Components) or up to 2–3 weeks for deeper customizations (Hooks, Core, or no SDK). Interface customizability depends on the method: the Components SDK supports theming only, while the Hooks and Core SDKs (or direct API integration) let you build any UI. All liquidity is managed by Orderly—no provisioning needed on your side. You can add custom pairs (e.g., LINA perpetual) by coordinating your market maker with Orderly’s venue. No additional security audits are required; Orderly maintains ongoing audits and bug bounties. The platform scales horizontally and lets you layer any surrounding features around perps. The “Powered by Orderly Network” label is pre-added in our Components SDK but is optional if you build a custom UI. Pricing is 2.5 bps taker fee and 0 bps maker fee (kept by Orderly); any fee above that is 100 % yours. You can also implement volume-based fee tiers. ",
    "last_referenced_date": "2024-09-09T19:14:03"
  },
  {
    "question": "What are the available integration paths and their trade-offs when building a frontend on Orderly’s platform?",
    "answer": "You have four options:  \n1. Components SDK: React UI components with built-in pages and theming; fastest to market but least customizable.  \n2. Hooks SDK: React hooks you wire into your own components for full UI control.  \n3. Core SDK: A minimal EIP-712 + REST wrapper usable with any framework; highly flexible but undocumented.  \n4. No SDK: Direct REST and WebSocket calls with EIP-712 signing; maximum flexibility, more boilerplate.  \nSee the overview at https://orderly.network/docs/sdks/react/overview and https://sdk.orderly.network/docs/hooks/overview.",
    "last_referenced_date": "2024-09-09T19:15:38"
  },
  {
    "question": "When using Web3-Onboard with Orderly’s React SDK, do I need to provide an API key for Web3-Onboard or WalletConnect?",
    "answer": "No—Web3-Onboard works without any apiKey. In our js-sdk-demo example (app/common/OrderlyContainer.tsx), no apiKey is provided and it functions normally. If you choose WalletConnect specifically, you can optionally supply a WalletConnect cloud apiKey from https://cloud.walletconnect.com/, but it isn’t required for basic operation.",
    "last_referenced_date": "2024-09-10T15:42:53"
  },
  {
    "question": "Which projects are known to use Orderly’s Hooks SDK so we can review examples of real-world implementations?",
    "answer": "WOOFi uses both the Components and Hooks SDK (and some unpublished components). Independent builders using Hooks include vooi.io, logx.trade, and emdx.io (perpetual). We also maintain a short Hooks SDK example at https://orderly-dex.pages.dev/ (source: https://github.com/OrderlyNetwork/example-dex).",
    "last_referenced_date": "2024-09-12T06:43:40"
  },
  {
    "question": "Where can I find a list of existing builders (projects) powered by Orderly Network for competitive analysis or market research?",
    "answer": "Orderly’s “Builders” dashboard on Dune shows all integrated projects. Visit the builder section at https://dune.com/orderly_network/orderly-dashboard to filter by broker_id and view volumes, user counts, and other metrics.",
    "last_referenced_date": "2024-09-10T16:27:15"
  },
  {
    "question": "How do I register a broker ID for both testnet and mainnet, and what information is required?",
    "answer": "Provide us the following for testnet and mainnet registration:  \n• Broker ID (e.g., \"linear_finance\")  \n• Broker Name (your display name)  \n• Default Taker Fee (decimal, e.g., 0.0006 for 6 bps)  \n• Default Maker Fee (decimal, e.g., 0.0003 for 3 bps)  \nWe’ll configure the broker ID, then you’ll register your admin wallet in the next step.",
    "last_referenced_date": "2024-11-19T14:13:06"
  },
  {
    "question": "After my broker ID is set up, how do I register the admin wallet, and what roles does this wallet fulfill?",
    "answer": "Once the broker ID is created, register your admin wallet at https://orderlynetwork.github.io/broker-registration/ by selecting your broker_id. Provide the resulting wallet address so we can assign it as admin. The admin wallet collects broker fee rebates and has exclusive access to private APIs (e.g., referral codes, fee rebates). You can register different wallets for testnet and mainnet, including multisigs via the delegate-signer flow.",
    "last_referenced_date": "2024-11-21T16:16:10"
  },
  {
    "question": "Can my developers call Orderly’s private APIs without having direct access to the admin wallet’s private key?",
    "answer": "Yes. Developers only need an Orderly API key generated by the admin wallet. You register the wallet to obtain an ed25519 key pair; then your backend or client code uses that API key (account_id + signature) to authenticate. No one needs to share the wallet’s private key with developers.",
    "last_referenced_date": "2024-11-21T21:07:30"
  },
  {
    "question": "How do I register my broker admin wallet on testnet versus mainnet, and is the account_id the same across both environments?",
    "answer": "For testnet, switch the network selector on https://orderlynetwork.github.io/broker-registration/ to any supported testnet and repeat the registration flow. You will receive the same account_id as mainnet, but you must register separately per environment to obtain valid credentials.",
    "last_referenced_date": "2024-12-02T10:39:00"
  },
  {
    "question": "Can I change the registered admin wallet after initial setup, and will that apply across both testnet and mainnet?",
    "answer": "Yes—the admin wallet can be changed later. After your broker ID is created, register a new wallet via the broker-registration UI and notify us; we’ll update the admin assignment. You can use the same or a different address on testnet and mainnet.",
    "last_referenced_date": "2024-11-21T09:49:51"
  },
  {
    "question": "Why is my registered broker wallet not recognized as admin after completing the registration flow, and how do I fix it?",
    "answer": "After you complete the UI registration, you must inform the Orderly team to finalize the admin assignment on our side. Once you provide the registered wallet address, we’ll activate it as the admin wallet so it’s recognized for fee rebate and private API access.",
    "last_referenced_date": "2024-12-09T09:30:06"
  },
  {
    "question": "In the React Components SDK theming guide, is the referenced theme.css the same as the app’s globals.css, and how do I correctly import my CSS theme overrides so they take effect?",
    "answer": "The Components SDK theming uses CSS variables, not a special file name. You can name your stylesheet whatever you like (e.g., globals.css), but it must be imported globally so your bundler includes it. Generate your variable overrides with the Theme Builder at sdk.orderly.network/theme and paste them into your global CSS. See the js-sdk-demo example for reference: https://github.com/OrderlyNetwork/js-sdk-demo/blob/main/app/globals.css",
    "last_referenced_date": "2024-08-17T20:49:01"
  },
  {
    "question": "Is it currently possible to switch the TradingView chart in the React Components SDK from the default dark theme to a light theme?",
    "answer": "Not yet. Although there is a theme variable in the TradingView page component, the prop isn’t fully wired through to the chart, so you cannot specify a light theme at this time.",
    "last_referenced_date": "2024-08-23T07:29:19"
  },
  {
    "question": "How do I set custom broker fees on Orderly, and where can I find the Python tool and UI to configure them?",
    "answer": "Orderly provides a Python helper tool in the orderly-evm-broker-fee-admin repository on GitHub (https://github.com/OrderlyNetwork/orderly-evm-broker-fee-admin). Clone that repo, install its dependencies, and run the script to update default or per-user fee rates. Alternatively, you can log in to the admin dashboard at https://admin.orderly.network/ to configure broker fees via the UI.",
    "last_referenced_date": "2024-08-22T12:00:38"
  },
  {
    "question": "In the Python broker-fee-admin script, what should I supply for api_key and api_secret?",
    "answer": "The api_key field is your Orderly public (ed25519) key, and api_secret is your Orderly secret key. You generate this key pair for your admin wallet via the broker-registration UI (https://orderlynetwork.github.io/broker-registration/).",
    "last_referenced_date": "2024-08-22T20:52:03"
  },
  {
    "question": "What are the orderly-timestamp and orderly-signature headers for private EVM API calls, and how do I generate them?",
    "answer": "• orderly-timestamp: the current UTC time in milliseconds (must be within 5 minutes of the server time).  \n• orderly-signature: an EIP-712 signature of the request domain message, signed with your Orderly private key.  \nFollow the “API Authentication” guide in the docs under Build on EVM → EVM API → API Authentication for code examples and full header construction details.",
    "last_referenced_date": "2024-08-23T12:19:56"
  },
  {
    "question": "Does the React Components SDK include built-in dictionary files for multilingual (e.g., Japanese) support, and where can I find them?",
    "answer": "Yes. The SDK ships with locale JSON files under its GitHub repo at packages/component/src/i18n/locale. Clone or browse that folder to see and modify the translations for supported languages.",
    "last_referenced_date": "2024-08-20T08:02:19"
  },
  {
    "question": "How can I hide unsupported testnet chains (like Arbitrum Sepolia) in the React Components SDK chain selector?",
    "answer": "Use the chainFilter prop on OrderlyAppProvider to explicitly list only the chains you want displayed. For example:\n\n<OrderlyAppProvider\n  brokerId=\"…\"\n  brokerName=\"…\"\n  networkId=\"mainnet\"\n  chainFilter={{ mainnet:[Arbitrum,Optimism], testnet:[] }}\n>\n  {children}\n</OrderlyAppProvider>\n\nSee the docs at sdk.orderly.network/docs/react/configuration#chainfilter or the js-sdk-demo example.",
    "last_referenced_date": "2024-08-22T11:38:41"
  },
  {
    "question": "How can we set up the fee charged on top for users on our broker DEX using Orderly?",
    "answer": "Orderly’s base fee is 0.03% taker and 0% maker (Orderly’s share). To configure your on-top fee, simply inform Orderly of your desired maker and taker rates above the base. They will apply it to your broker account and can change it later via the admin UI or private API. If you stake ORDER tokens, you qualify for a reduced base taker fee (0.0275% or 0.025% depending on stake). Provide your staking address so Orderly can verify and adjust your tier accordingly.",
    "last_referenced_date": "2024-12-02T10:39:02"
  },
  {
    "question": "When integrating Orderly’s Components SDK, what steps do we need to take and do we need to manage any backend logic or smart contracts ourselves?",
    "answer": "You only need to embed the React components and apply your branding via the theme builder (colors, logos). Orderly manages all backend services and vault/market contracts on your behalf, so no additional backend or contract deployment is required on your side.",
    "last_referenced_date": "2024-12-02T12:02:55"
  },
  {
    "question": "How do we integrate the Orderly testnet environment with the React Components SDK for testing?",
    "answer": "You can start with any existing broker ID (e.g., “demo”) or request your own testnet broker ID from Orderly. Then follow the React SDK Getting Started guide at https://orderly.network/docs/sdks/react/getting_started and the Next.js template example (https://github.com/OrderlyNetwork/orderly-js-sdk-nextjs-template). If you need deeper UI control, consider using the Hooks SDK instead.",
    "last_referenced_date": "2024-12-11T10:12:57"
  },
  {
    "question": "Can we retrieve transaction history or balance data for all users at once, or is it only available per user?",
    "answer": "Currently, Orderly’s private REST and dashboard APIs only support fetching data per individual account. There is no built-in endpoint to retrieve all users’ transaction history or balances in a single call.",
    "last_referenced_date": "2025-02-06T09:31:19"
  },
  {
    "question": "Which API endpoint returns my broker’s daily total trading volumes aggregated by date, and how do I aggregate it?",
    "answer": "Call the private REST endpoint GET /v1/private/get-builders-users-volumes and include the query parameter aggregatedBy=DATE. This returns daily volume records for each account under your broker_id. You can page through results and sum or group them as needed.",
    "last_referenced_date": "2025-02-06T09:35:54"
  },
  {
    "question": "How can we fetch on a daily basis: total trading volume, volume per trading pair, total fees generated (maker/taker), and referral statistics for our broker?",
    "answer": "• Total trading volume: use GET /v1/private/get-builders-users-volumes with aggregatedBy=DATE (or view on Dune Analytics).  \n• Volume per trading pair: not exposed per broker via API—use Dune’s public queries.  \n• Total fees generated: sum the fee fields in the get-builders-users-volumes response (no separate maker/taker breakdown today).  \n• Referral stats: call GET /v1/private/get-referral-code-info from your admin wallet to list each referral code with its rebate parameters and trading volumes.",
    "last_referenced_date": "2025-02-06T10:15:38"
  },
  {
    "question": "Do I need a Web3-Onboard API key when using the Orderly Next.js SDK, and where do I get the networkId, brokerId, and brokerName?",
    "answer": "When using the Orderly Next.js SDK (v2), you do not need a Web3-Onboard API key—it's not required. The values for `networkId`, `brokerId`, and `brokerName` come from your own Orderly broker setup. To see how these are wired up, review the Next.js template at https://github.com/OrderlyNetwork/orderly-js-sdk-nextjs-template (check `src/components/orderlyProvider/index.tsx`).",
    "last_referenced_date": "2024-12-06T20:52:04"
  },
  {
    "question": "Should I use v2 of the React Components SDK even though it’s in alpha, or stick with v1 for my Next.js integration?",
    "answer": "We recommend using the latest v2 of the React Components SDK (even in alpha) because it includes Solana support and future-proofs your integration. v1 lacks Solana support, and most teams end up upgrading to v2 later, so starting on v2 saves you a migration down the road.",
    "last_referenced_date": "2024-12-10T17:43:05"
  },
  {
    "question": "Can I use the Orderly Next.js SDK template out of the box, updating only the logo, theme, and networkId for a fast v1 launch?",
    "answer": "Yes. Clone the Next.js SDK template, then update the `OrderlyAppProvider` props (brokerId, brokerName, networkId) and replace the logos and theme variables. Everything else works out of the box for a rapid launch.",
    "last_referenced_date": "2024-12-11T15:56:24"
  },
  {
    "question": "What maker and taker fees does Orderly charge, and can platforms customize fees or does Orderly take a cut of the fees we set?",
    "answer": "Orderly’s base fees are 3 bps taker and 0 bps maker (Orderly keeps that). You can add any additional maker/taker fee on top, and 100% of those extra fees go to you. Starting Feb 1, base taker fees can be further reduced to 2.75 bps–2.5 bps based on ORDER staking or daily volume.",
    "last_referenced_date": "2024-12-27T21:09:09"
  },
  {
    "question": "How do I configure the networkId, brokerId, and brokerName props in OrderlyAppProvider for my Boom DEX front end?",
    "answer": "First ask the Orderly team to register your brokerId and brokerName (and default maker/taker fees). Once they confirm, use those values along with your target `networkId` (e.g., “mainnet” or “testnet”) in your `<OrderlyAppProvider brokerId=\"your_id\" brokerName=\"YourName\" networkId=\"…\">`. Until your broker is registered, you can use the placeholder brokerId “demo.”",
    "last_referenced_date": "2025-01-08T11:28:26"
  },
  {
    "question": "Why are no chains appearing in my WalletConnect modal after updating to SDK v2.0.1 and setting my brokerId?",
    "answer": "If your brokerId is not yet registered in Orderly’s backend, the SDK won’t list any chains. To fix this, either use the demo brokerId or have your brokerId and admin wallet registered by Orderly. Once the broker exists, the supported chains will populate in WalletConnect.",
    "last_referenced_date": "2025-01-09T16:08:40"
  },
  {
    "question": "How can I include a referral code in the URL for Boom Markets when using the React Components SDK?",
    "answer": "Append the referral code as a query parameter, e.g. `https://boom.markets/?ref=YOUR_CODE`. The SDK will automatically read that `ref` value and store it in `localStorage` under `referral_code` for later binding.",
    "last_referenced_date": "2025-02-27T09:13:19"
  },
  {
    "question": "How do I implement a “Become an affiliate” flow with the @orderly.network/referral package if there’s no dedicated API endpoint?",
    "answer": "There’s no built-in API. Instead, create your own signup form (e.g., a Google Form) and host it. Then pass its URL to `ReferralProvider` via the `becomeAnAffiliateUrl` prop. Your users will be directed there to apply, and you can handle approvals manually.",
    "last_referenced_date": "2025-02-19T07:38:27"
  },
  {
    "question": "Why do I get CALL_REVERTED or out-of-gas errors when depositing via the SDK, and how can I resolve them?",
    "answer": "A CALL_REVERTED on deposit usually means the transaction ran out of gas. Make sure you have enough ETH/value for gas + deposit. Also check if your wallet provider is auto-setting a low gas limit—if so, manually increase the gas limit in the wallet UI or use a different provider.",
    "last_referenced_date": "2025-02-24T13:10:13"
  },
  {
    "question": "How can I estimate the liquidation price before placing an order using the useOrderEntry hook in the Orderly Hooks SDK?",
    "answer": "In @orderly.network/hooks, use the useOrderEntry hook (with watchOrderbook enabled) to access real-time order entry state. The returned form state includes an estLiqPrice field showing your estimated liquidation price before submission. For a complete example, see the CreateOrder.tsx component in the example-dex repo and the docs under “Use Order Entry → Real-Time Data”: https://orderly.network/docs/sdks/hooks/orders/use-order-entry#real-time-data",
    "last_referenced_date": "2024-07-29T09:16:50"
  },
  {
    "question": "How is the pricing for margin positions determined on Orderly, and where can I learn more about it?",
    "answer": "Orderly calculates the mark price (used for margin and liquidation) by aggregating prices from multiple centralized exchanges and weighting them by trading volume. For full details on index price calculation, mark price, and last price, refer to the “Perpetual Futures → Mark Price, Index Price and Last Price” section of the docs: https://orderly.network/docs/introduction/trade-on-orderly/perpetual-futures/mark-price-index-price-and-last-price",
    "last_referenced_date": "2024-08-06T14:47:55"
  },
  {
    "question": "How do I navigate to the QuickPerps interface powered by Orderly on QuickSwap?",
    "answer": "On the QuickSwap DEX UI, select the “Perps” tab at the top of the page (next to Pools or Swap). This loads the QuickPerps trading interface, which is powered by Orderly, for any chains where Perps are enabled.",
    "last_referenced_date": "2025-03-26T16:37:37"
  },
  {
    "question": "How can I check if specific addresses traded with leverage on Orderly and retrieve their daily trading volumes?",
    "answer": "You can view individual trading activity via the Orderly Dashboard URL: https://orderly-dashboard.orderly.network/address/{address}?broker_id={your_broker_id}. For programmatic access, call the private REST endpoint:\n\nGET /v1/volume/broker/daily?start_date=YYYY-MM-DD&end_date=YYYY-MM-DD&address={address}\n\nThe JSON response includes rows with date, account_id, perp_volume, perp_taker_volume, perp_maker_volume, total_fee, broker_fee, and address fields.",
    "last_referenced_date": "2024-09-23T06:57:28"
  },
  {
    "question": "When will the Orderly Unity Solana orderbook integration be available for testing and production?",
    "answer": "The Solana testnet for Orderly Unity is already live. Full Solana devnet support will be available in approximately two weeks, and the Solana mainnet integration is expected in about four weeks.",
    "last_referenced_date": "2024-10-17T15:34:24"
  },
  {
    "question": "Why does the average opening price returned by the API appear as 0 immediately after placing an order that executes immediately, and when will it update to the correct value?",
    "answer": "The initial average opening price appears as 0 because Orderly’s backend uses separate services for position updates and avg price calculation. The client first receives the position info (avg price defaulting to 0) and then receives an updated avg price push shortly afterward. The correct avg price should arrive in the next push; backend teams are evaluating optimizations to reduce this latency.",
    "last_referenced_date": "2025-02-10T15:36:00"
  },
  {
    "question": "On Solana, why does the holding endpoint return a 0 USDC balance and prevent deposits even though the wallet has USDC?",
    "answer": "This issue was caused by an incorrect Solana RPC URL in the adapter configuration. Ensure your Solana adapter is pointed at the correct RPC endpoint so that the `/v1/client/holding` call can fetch the USDC balance properly.",
    "last_referenced_date": "2025-05-08T18:27:46"
  },
  {
    "question": "How can I generate a new Orderly API key for a testnet environment?",
    "answer": "Use the broker-registration web UI at https://orderlynetwork.github.io/broker-registration/. In the UI, select your target testnet chain (e.g., Arbitrum Sepolia, Base Sepolia), connect your wallet, and follow the prompts to generate and approve a new Orderly API key for that environment.",
    "last_referenced_date": "2025-03-17T03:45:27"
  },
  {
    "question": "Which broker_id should I use when delegating a signer in the WOOFi Pro delegate signer flow?",
    "answer": "When delegating a signer via the WOOFi Pro UI or the delegate-orderly-key endpoint, use the broker_id `woofi_pro` (your registered broker identifier). Make sure you’re on the EOA wallet tab, input `woofi_pro` as the broker_id, then load your connected address before proceeding.",
    "last_referenced_date": "2025-03-03T03:50:14"
  },
  {
    "question": "How should Orderly’s total TVL be calculated for correct display, and should unsettled PnL be included?",
    "answer": "Orderly’s TVL should be the sum of all accounts’ Total Balances only. Unsettled PnL should not be included, since the sum of unsettled PnL across accounts is zero. A previous implementation added Unsettled PnL (causing fluctuations due to async database writes); the frontend has been updated to display only Total Balance.",
    "last_referenced_date": "2025-02-12T13:06:03"
  },
  {
    "question": "How can I have my instances whitelisted or increase API rate limits to avoid frequent 429 rate-limit errors on Orderly’s EVM endpoints?",
    "answer": "Orderly’s operations team can whitelist your IP addresses and raise per-IP rate limits. Provide them with the list of IPs used by your trading instances and the associated Orderly account IDs. Contact Orderly support or share these details in the developer chat so they can adjust the limits accordingly.",
    "last_referenced_date": "2024-05-23T22:21:52"
  },
  {
    "question": "How long do withdrawal transactions typically take to process on Orderly, and does it vary by blockchain network?",
    "answer": "Withdrawal finality depends on the target chain’s confirmation requirements and network congestion. On native L2s (e.g., Arbitrum, Optimism, Base) withdrawals usually complete within a few minutes, while chains with higher confirmation needs (e.g., Polygon with 500 blocks) can take up to around 30 minutes.",
    "last_referenced_date": "2024-05-20T19:58:33"
  },
  {
    "question": "In the Python connector’s get_withdraw_settle_verifyingcontract function, do the verifyingContract addresses differ per chain (e.g., Base Sepolia vs mainnet), or are they the same across all EVM networks?",
    "answer": "The verifyingContract addresses you listed are correct and remain the same on every supported EVM chain. You do not need to swap them per network—use the same testnet and mainnet addresses regardless of chain.",
    "last_referenced_date": "2024-05-17T01:31:38"
  },
  {
    "question": "Do I need to register an Orderly account before calling the vault contract’s getDepositFee method to determine deposit costs?",
    "answer": "No. You can call the vault contract’s getDepositFee on-chain function directly without first registering an account. Registration is not required to fetch gas or cross-chain deposit fee estimates.",
    "last_referenced_date": "2024-05-23T22:28:55"
  },
  {
    "question": "What is the maximum value allowed for the `size` parameter when paginating the asset history via GET /v1/asset/history?",
    "answer": "The maximum page size you can request is 500 records per call.",
    "last_referenced_date": "2024-05-24T18:26:45"
  },
  {
    "question": "Does the GET /v1/asset/history endpoint include funding fee or other transaction types, or only deposits and withdrawals?",
    "answer": "It only returns deposit and withdrawal events. Funding fees and other activity types are not included in this endpoint’s response.",
    "last_referenced_date": "2024-05-24T18:28:15"
  },
  {
    "question": "How is the response from GET /v1/asset/history sorted now, and how can I determine the true on-chain order of events?",
    "answer": "By default, the results are sorted by `updated_time`. The endpoint now also returns a `block_time` field (populated for completed transactions) so you can manually sort by on-chain block timestamp for the true chronological sequence.",
    "last_referenced_date": "2024-05-29T12:15:42"
  },
  {
    "question": "What exactly do I sign to produce the `orderly-signature` header when calling Orderly’s private EVM API endpoints?",
    "answer": "You should EIP-712 sign the JSON request body (the exact payload) using your Orderly ed25519 key, as described in the API Authentication docs. No extra wrapping is needed—sign the request body directly.",
    "last_referenced_date": "2024-05-22T18:28:10"
  },
  {
    "question": "Where can I find the vault contract addresses for Mode chain integration, and how do I place trades on Mode markets via the Orderly API?",
    "answer": "The Mode vault contract addresses are published in the docs under “Building on Omnichain → Smart Contract Addresses → Mode”: https://orderly.network/docs/build-on-omnichain/addresses#mode. Mode’s markets are chain-agnostic, so deposits/withdrawals still go through the Mode vault address. To place trades on Mode markets, call the private REST endpoint POST /v1/order/create (see “Private → create-order” in the EVM API docs).",
    "last_referenced_date": "2025-03-24T20:25:13"
  },
  {
    "question": "In the Orderly Hooks SDK, how can I programmatically update a user’s list of favorite markets?",
    "answer": "The Hooks SDK exports an updateFavorites function. First read the current favorites from useMarkets or useFavorites, then modify the array as needed and call updateFavorites(newFavoritesArray).",
    "last_referenced_date": "2025-05-16T13:47:23"
  },
  {
    "question": "In Orderly’s EVM integration docs, what does the term “builder” refer to?",
    "answer": "In this context, a “builder” is simply your brokerId. Each brokerId you configure in Orderly corresponds to a distinct builder.",
    "last_referenced_date": "2025-04-01T14:10:45"
  },
  {
    "question": "How do I register user EVM wallets programmatically for first-time login in the Orderly API?",
    "answer": "When a user first connects, you must call the registration flow: 1) GET a nonce via the public endpoint GET /v1/public/get-registration-nonce; 2) have the user sign the EIP-712 registration message; 3) POST the signed message to POST /v1/register_account; 4) POST the AddOrderlyKey message to POST /v1/delegate_orderly_key (or equivalent) to store their Orderly key. See “Building on Omnichain → User Flows → Wallet Authentication” in the docs for a full code example.",
    "last_referenced_date": "2025-04-01T14:17:10"
  },
  {
    "question": "Is there a minimum expiry time for an Orderly API key, and how should I specify the expiration when creating a key?",
    "answer": "There’s no enforced minimum duration—you provide an expiration as a UNIX timestamp (milliseconds since 1970). If you need a short-lived key (e.g., 5 minutes), calculate Date.now() + 300_000 and use that timestamp.",
    "last_referenced_date": "2025-04-02T11:48:19"
  },
  {
    "question": "Is there a v3 version of the Orderly API, and how do I ensure I’m using the correct base path?",
    "answer": "Orderly does not have a v3 API. Your base URL should be something like https://api-evm.orderly.org/v1/… If you see “/v3” in your requests, that is incorrect.",
    "last_referenced_date": "2025-04-25T14:24:58"
  },
  {
    "question": "How can I retrieve the full list of broker IDs programmatically for integration?",
    "answer": "Call the public REST endpoint GET /v1/public/get-broker-list without any broker_id query parameter. The response returns an array of all brokers with their broker_id and broker_name fields.",
    "last_referenced_date": "2025-04-24T04:33:10"
  },
  {
    "question": "Which private REST endpoint does the Orderly React Components SDK's LeaderboardWidget use under the hood to fetch broker volume data?",
    "answer": "The LeaderboardWidget component in the Components SDK uses the private endpoint GET /v1/private/get-builders-users-volumes to retrieve daily trading volume and fee data per account for your broker.",
    "last_referenced_date": "2025-04-15T06:42:11"
  },
  {
    "question": "What does the max_rebate_rate parameter in the /v1/referral/create API mean, how does it relate to referrer_rebate_rate and referee_rebate_rate, and can required_trading_volume be set to zero?",
    "answer": "max_rebate_rate is the total portion of your broker commission you’re willing to share as rebates (a decimal between 0 and 1). It must equal referrer_rebate_rate + referee_rebate_rate. The required_trading_volume field in the auto-referral endpoint can be zero, but a user must still complete at least one trade before the code is generated.",
    "last_referenced_date": "2025-04-30T16:03:23"
  },
  {
    "question": "Can referral codes be permanently deleted via the Orderly API or admin UI?",
    "answer": "No. Once created, referral codes cannot be deleted through the API or the admin portal.",
    "last_referenced_date": "2025-05-12T08:26:40"
  },
  {
    "question": "What triggers the auto-generation of referral codes when required_trading_volume is set to zero?",
    "answer": "Even if you configure required_trading_volume to 0 in /v1/referral/auto_referral/update, a code will only be auto-generated after the user completes at least one trade.",
    "last_referenced_date": "2025-05-12T08:31:41"
  },
  {
    "question": "How do I obtain and integrate the TradingView Advanced Charts library for use with the Orderly SDK?",
    "answer": "You must apply for access to TradingView’s Advanced Charts at https://www.tradingview.com/advanced-charts/. After approval, you’ll receive the charting_library.js bundle and assets. Include those files in your public folder (e.g., /charting_library/) and configure your SDK or TradingView widget to load scriptSRC: '/charting_library/charting_library.standalone.js' and library_path: '/charting_library/'.",
    "last_referenced_date": "2025-05-27T11:39:53"
  },
  {
    "question": "How can I identify the top traders by trading volume and PnL per account using Orderly’s APIs?",
    "answer": "You can fetch per-account trading volumes via the private REST endpoint GET /v1/private/get-builders-users-volumes. At present this endpoint only returns volume data; PnL per account is not yet exposed but is under revision and will be made available once the update is complete.",
    "last_referenced_date": "2024-07-31T08:51:29"
  },
  {
    "question": "Given network congestion, what are the current withdrawal fees on Arbitrum and Ethereum, and which chains should users choose to minimize withdrawal costs?",
    "answer": "Due to congestion, withdrawal fees have risen above $35 on Arbitrum and above $60 on Ethereum mainnet. To reduce costs, advise users to withdraw via alternative chains such as Base, Optimism, or Mantle, which currently have lower on-chain withdrawal fees.",
    "last_referenced_date": "2024-06-20T13:53:31"
  },
  {
    "question": "Does Orderly support spot trading markets, and how can I add spot markets to my DEX?",
    "answer": "Orderly currently only supports perpetual futures markets. There is no spot trading support today; if you need spot markets, you'll need to integrate your own spot trading infrastructure separately.",
    "last_referenced_date": "2025-03-22T06:59:28"
  },
  {
    "question": "Does Orderly provide a built-in copy trading system, and how can I implement copy trading for my users?",
    "answer": "Orderly does not include copy trading infrastructure out-of-the-box. You can use our APIs to create, cancel, and update orders (for example, POST /v1/order/create), but you'll need to build your own copy-trade service or integrate your existing copy trading infrastructure to call these endpoints.",
    "last_referenced_date": "2025-03-22T06:59:28"
  },
  {
    "question": "Can I designate a different wallet besides the admin wallet to receive broker fee commissions?",
    "answer": "No. The wallet you configure as the broker's admin wallet is the address that collects all broker fee commissions. You cannot route fees to a separate address.",
    "last_referenced_date": "2025-03-22T09:19:04"
  },
  {
    "question": "Where can I find an example script for setting per-user custom fees via Orderly’s API?",
    "answer": "See the ‘set-user-fee’ GitHub repository at https://github.com/OrderlyNetwork/set-user-fee. It contains a ready-to-use script demonstrating how to call the private fee-rate endpoints and use your admin Orderly key to update individual user fee rates.",
    "last_referenced_date": "2025-04-07T09:53:24"
  },
  {
    "question": "What new features, UI/UX enhancements, and bug fixes are included in Orderly SDK v2.1.2?",
    "answer": "Orderly SDK v2.1.2 (May 19, 2025) adds support for eight new default languages (Russian, Indonesian, Turkish, Italian, Portuguese, Ukrainian, Polish, Dutch), auto-fill of orderbook price on click, preservation of order input after submission, an integrated Announcement API (with type & timestamp), a redesigned language selection modal, a toggle between Coin and USDC in the orderbook, and auto-capitalization of referral code input. Bug fixes include correct Take-Profit offset (%) updates with market price and a fixed portfolio page alignment.",
    "last_referenced_date": "2025-05-19T07:02:14"
  },
  {
    "question": "What’s the process for KOLs or brokers to obtain a TradingView Charting Library license for commercial use in their custom Orderly DEX UI?",
    "answer": "Each KOL or broker must apply at tradingview.com/advanced-charts by submitting their personal GitHub profile link (no company or legal entity required). TradingView will then contact you to sign the Charting Library License Agreement. Note: you need your own GitHub profile—Orderly does not provide this for you.",
    "last_referenced_date": "2025-03-19T12:43:27"
  },
  {
    "question": "How long does it typically take clients to roll out a basic perp DEX with Orderly Network, what integration paths does the upcoming frontend “builder SDK” include, and what support is available for frontend development?",
    "answer": "There are four main integration paths with Orderly Network, each differing in time-to-market and customizability:\n1. Components SDK (React UI components with theming; fastest to market, minimal coding)  \n2. Hooks SDK (React hooks for building bespoke UIs; you wire your own components)  \n3. Core SDK (@orderly.network/core, minimal EIP-712 + REST wrapper for any framework; not yet documented)  \n4. No SDK (direct REST/WebSocket calls with EIP-712 signing; maximum flexibility)  \nThe Components SDK supports drop-in full trading pages for minimal setup. We provide example apps, and our DevRel team can introduce you to front-end engineers experienced with Orderly. For more details, see https://sdk.orderly.network/components/introduction and https://sdk.orderly.network/docs/hooks/overview",
    "last_referenced_date": "2023-12-18T10:09:57"
  },
  {
    "question": "When following the React Components SDK Getting Started guide for Next.js, I get “Module not found: Can’t resolve '@orderly.network/hooks'” from @orderly.network/react. How do I fix this dependency error?",
    "answer": "This error usually means you’re missing the internal build or peer dependencies. Run:\n\nnpm install @orderly.network/react@internal @orderly.network/hooks @orderly.network/core\n\nThis installs the internal React package plus the hooks and core SDKs required by the components. After installing those, rebuild and the import error should resolve.",
    "last_referenced_date": "2023-12-19T09:23:24"
  },
  {
    "question": "Do I need to configure `tradingViewConfig` for the TradingPage component in the Components SDK, and how do I set up the TradingView chart library?",
    "answer": "Yes—Orderly does not bundle TradingView’s charting library. You must supply your own. For example:\n\n<OrderlyAppProvider … tradingViewConfig={{\n  scriptSRC: 'https://s3.tradingview.com/external-embedding/embed-widget-advanced-chart.js',\n  // library_path: '/assets/chart/charting_library/'  // if using downloadable library\n}}>\n\n• For the Advanced Charts library, apply at tradingview.com/advanced-charts, host `charting_library` in your public folder, and point `scriptSRC` and `library_path` accordingly.  \n• Alternatively, use TradingView Lightweight Charts by installing and importing it yourself and configuring the provider to use it.",
    "last_referenced_date": "2023-12-19T09:32:25"
  },
  {
    "question": "Will the TradingPage component’s `onSymbolChange` callback work without explicitly specifying it, or is it required?",
    "answer": "According to the TypeScript definitions in the React Components SDK, `onSymbolChange` is optional and may be `undefined`. The component should handle the default behavior when it’s not provided. If you observe otherwise, please file a bug report in our GitHub repo.",
    "last_referenced_date": "2023-12-19T09:29:10"
  },
  {
    "question": "I’m streaming market data via the `useTickerStream` hook and need timestamps to plot a line chart with the Lightweight Charts library. The API.MarketInfo objects don’t include a datetime field. How should I obtain or generate timestamps?",
    "answer": "The `useTickerStream` WS pushes do not include timestamps. Best practices:\n1. Generate a timestamp on the client when you receive each update: `const ts = Date.now()`.  \n2. For aligned time-series (candles), subscribe to the k-line topic via `useWS` (e.g., `PERP_NEAR_USDC@kline_1m`), which returns OHLC data with timestamps on each bar.  \nUse these timestamps as the `time` field in your `LineData` for plotting.",
    "last_referenced_date": "2023-12-27T10:22:46"
  },
  {
    "question": "Where can I find the Orderly Hooks SDK documentation overview?",
    "answer": "Refer to the Hooks SDK overview in the Orderly developer docs: go to https://sdk.orderly.network/docs/hooks/overview for getting started, API reference, and examples.",
    "last_referenced_date": "2024-05-05T17:53:28"
  },
  {
    "question": "How much developer resource and time does it typically take to integrate a perpetual DEX frontend with Orderly?",
    "answer": "On average, one front-end engineer spends about 32 hours to set everything up. Depending on UI design requirements, full integration typically takes 1–3 weeks. Orderly also provides an optional React UI template (js-sdk-demo) and theming support to accelerate development, plus dedicated DevRel support throughout the process.",
    "last_referenced_date": "2024-06-20T05:18:41"
  },
  {
    "question": "What frontend integration options does Orderly provide for building a custom DEX, and how do they differ in customization and time to market?",
    "answer": "Orderly offers four paths:\n1. Components SDK: Ready-made React UI components for a full trading page. Fastest to launch, minimal development—customizable appearance via theming only. Example: js-sdk-demo and https://sdk-demo.orderly.network/\n2. Hooks SDK: React hooks to build your own UI. Moderate effort; you wire components together using useOrderEntry, usePositionsStream, etc. Example: https://github.com/OrderlyNetwork/example-dex and https://orderly-dex.pages.dev/\n3. Core SDK: Minimal EIP-712 + REST wrapper (npm @orderly.network/core) usable in any framework. Maximum flexibility, but SDK docs are limited.\n4. No SDK: Direct REST and WebSocket API calls with manual EIP-712 signing. Full control and flexibility; requires more boilerplate. Docs and code samples available under “Build on EVM → Building on EVM” in the official docs.\nChoose Components for quickest launch, Hooks for bespoke layouts, Core for non-React stacks, or No SDK for full custom implementations.",
    "last_referenced_date": "2025-02-19T11:55:29"
  },
  {
    "question": "If a pending order hasn’t been matched yet, will cancelling it incur any fees?",
    "answer": "No. Cancelling an order that hasn’t been filled does not incur any fees.",
    "last_referenced_date": "2025-05-15T13:55:14"
  },
  {
    "question": "Does Orderly charge an overnight financing fee for perpetual positions?",
    "answer": "No. Orderly does not impose any overnight fees on perpetual positions.",
    "last_referenced_date": "2025-05-15T07:46:23"
  },
  {
    "question": "How frequently does the leaderboard update and what delay should I expect before new trades appear?",
    "answer": "The public leaderboard is refreshed every 5 minutes, with data typically lagging by about 15–20 minutes after trades occur.",
    "last_referenced_date": "2025-05-15T14:43:19"
  },
  {
    "question": "Which API provides indexed on-chain trade events for implementing copy-trading functionality?",
    "answer": "Use the Orderly Dashboard Query Service’s Pull Trading Events API v2 on EVM. See the Pull Trading Events API v2 on EVM documentation in the orderly-dashboard query-service GitHub repo for endpoint details and filtering by account.",
    "last_referenced_date": "2025-05-09T08:14:25"
  },
  {
    "question": "How can I configure the orderly-dashboard-indexer to skip old blocks and start indexing from a specific block height?",
    "answer": "In your indexer’s config file, set the `contract_deploy_height` field to the block number where you want indexing to begin. The indexer will then skip all earlier blocks and listen for new transactions from that height onward.",
    "last_referenced_date": "2025-05-19T07:30:33"
  },
  {
    "question": "What RPC endpoint should I use to listen for events on Orderly’s Layer 2 network?",
    "answer": "Point your RPC client to `https://rpc.orderly.network`. You can also verify it on Chainlist under Orderly’s L2 networks.",
    "last_referenced_date": "2025-05-17T17:41:16"
  },
  {
    "question": "When I execute a trade via the SDK, how can I locate the corresponding transaction on-chain?",
    "answer": "Orderly’s trade execution and matching occur off-chain. Only PnL settlement and balance updates are recorded on the Orderly L2 chain, so you won’t find an on-chain transaction for each trade fill. Orders themselves are not on-chain.",
    "last_referenced_date": "2025-05-14T17:17:07"
  },
  {
    "question": "Is native copy-trading support available in the Orderly SDK or APIs?",
    "answer": "Not at the moment. Orderly does not provide a built-in copy-trading feature, though we can support you technically if you build a custom copy-trading layer on top of our APIs.",
    "last_referenced_date": "2025-05-09T07:26:13"
  },
  {
    "question": "How do I fix the Next.js 15 build error \"transactRemote is not exported from '@solana-mobile/mobile-wallet-adapter-protocol-web3js'\" when using @orderly.network/wallet-connector?",
    "answer": "This is caused by a breaking change in the Solana Mobile adapter. Workaround: pin `@solana-mobile/wallet-adapter-mobile` to version 2.1.4 using package-manager overrides or yarn resolutions, remove any direct `@solana-mobile/mobile-wallet-adapter-protocol-web3js` dependency, and if necessary add a webpack alias to mock the missing import. After that, rebuild and the error should disappear.",
    "last_referenced_date": "2025-05-14T13:51:06"
  },
  {
    "question": "Do you guys have a TypeScript SDK for Orderly?",
    "answer": "Yes. You can use the Orderly JavaScript/TypeScript SDK available at https://github.com/OrderlyNetwork/orderly-sdk-js.",
    "last_referenced_date": "2025-04-08T03:02:36"
  },
  {
    "question": "Has the mainnet API root URL changed, and what is the current root I should use?",
    "answer": "The current mainnet API root is https://api.orderly.org. This is now the primary URL in use for mainnet calls.",
    "last_referenced_date": "2025-05-06T08:22:21"
  },
  {
    "question": "Which cross-chain messaging protocol does Orderly use for its vault rebalancing and settlement flows?",
    "answer": "Orderly’s cross-chain messaging is built on LayerZero’s infrastructure.",
    "last_referenced_date": "2025-05-12T08:38:23"
  },
  {
    "question": "What chainId and chainType should I use when registering an Orderly account on Solana?",
    "answer": "For Solana mainnet, use chainId 900900900; for Solana devnet, use chainId 901901901. In both cases set chainType to \"SOL\" in your registration payload.",
    "last_referenced_date": "2025-04-04T08:08:26"
  },
  {
    "question": "How do I calculate the Program Derived Address (PDA) for a broker on Solana in Orderly?",
    "answer": "Use Solana’s `PublicKey.findProgramAddressSync` with seeds `[Buffer.from('Broker'), brokerHashBytes]` and the vault program ID. Example:\n```\nimport { PublicKey } from '@solana/web3.js';\nconst brokerHashBytes = Buffer.from(brokerHash.slice(2), 'hex');\nconst [brokerPDA] = PublicKey.findProgramAddressSync(\n  [Buffer.from('Broker'), brokerHashBytes],\n  programId\n);\n```",
    "last_referenced_date": "2025-04-30T06:36:25"
  },
  {
    "question": "How long does it take for a deposit to be processed before I can place trades via the Orderly API?",
    "answer": "Deposits take several seconds to be fully processed and available for trading—not milliseconds—so you should wait a few seconds after the deposit transaction confirms before sending trade requests.",
    "last_referenced_date": "2025-03-28T09:59:59"
  },
  {
    "question": "What is the typical round-trip latency for a taker trade on Orderly (API call to settlement) on mainnet?",
    "answer": "On mainnet, a taker trade round-trip from API call to on-chain settlement typically completes in under 50 milliseconds.",
    "last_referenced_date": "2025-03-28T11:07:41"
  },
  {
    "question": "Is there an API endpoint to get rolling trading volume for periods like 1, 7, or 30 days?",
    "answer": "Yes—use the private REST endpoint GET /v1/private/get-builders-users-volumes, which accepts `start_date` and `end_date` query parameters so you can fetch volume over any date range (e.g., last 1, 7, or 30 days).",
    "last_referenced_date": "2025-05-20T05:47:18"
  },
  {
    "question": "Does the React Components SDK include a built-in orderbook depth visualization widget?",
    "answer": "The Components SDK provides the orderbook display in the TradingPage component. You can preview it in Storybook under the `package-trading-tradingpage--order-book` story (https://storybook.orderly.network/?path=/story/package-trading-tradingpage--order-book). For custom depth charts, you may build on top of the public WS orderbook feed.",
    "last_referenced_date": "2025-05-07T11:02:52"
  },
  {
    "question": "What approach and SDK components do you recommend for building reliable price charts and orderbook viewers?",
    "answer": "Use the Component SDK’s TradingView and charting components—see the TradingView docs and Storybook (`package-ui-tradingview`). If you need lower-level control, use the TradingView Datafeed adapter in the JS SDK at `packages/trading-view/src/tradingViewAdapter/datafeed/datafeed.ts`, and leverage public REST endpoints like GET /v1/public/get-price-info-for-all-symbols for price snapshots.",
    "last_referenced_date": "2025-04-17T06:30:28"
  },
  {
    "question": "When subscribing to the public 'liquidation' WebSocket topic, am I receiving all liquidations across the Orderly market or only per account?",
    "answer": "The public `liquidation` WS topic streams all market liquidation events across Orderly (it’s market-wide). The `id` field in your subscribe message is a client-generated request ID and can be any unique string.",
    "last_referenced_date": "2025-04-08T12:44:24"
  },
  {
    "question": "What is the difference between the private REST endpoints 'Get Positions Under Liquidation' and 'Get Liquidated Positions'?",
    "answer": "`Get Positions Under Liquidation` returns positions that are currently eligible for liquidation (i.e., can be claimed by liquidators). `Get Liquidated Positions` returns positions that have already been liquidated (i.e., claimed).",
    "last_referenced_date": "2025-04-08T13:56:19"
  },
  {
    "question": "Does the public 'liquidation' WS schema include transfer fees, and where do I find the full field definitions?",
    "answer": "The `liquidation` WS payload includes fields like `liquidationId`, `timestamp`, `type`, and per-perp details (`symbol`, `positionQty`, `liquidatorFee`), but it does not include a `transferFee`. For transfer fee details, use the `Get Liquidated Positions` REST endpoint, and refer to the OpenAPI spec (`evm.openapi.yaml`) for full field definitions.",
    "last_referenced_date": "2025-04-08T14:35:00"
  },
  {
    "question": "Does the private endpoint GET /v1/private/orderbook-snapshot return the orderbook for all brokers or just a specific broker, and why is it private?",
    "answer": "That endpoint returns the orderbook snapshot for a single broker (as identified by your authenticated Orderly account). It’s private because it requires authentication to fetch broker-specific data. For public market orderbook data (all brokers), use the public WS `orderbook` topic or the public REST endpoints under the market data section.",
    "last_referenced_date": "2025-04-28T07:39:29"
  },
  {
    "question": "Where can I find the IDL and example code for deposit and withdrawal on Solana in Orderly?",
    "answer": "The Solana vault IDL is in the JS SDK at `packages/default-solana-adapter/src/idl/solana_vault.ts`. For withdrawal, see the off-chain signing example at https://gist.github.com/wuzhong-zhu/52433069ea95da2aaf7837d65ad53746. Currently there’s no public code sample for deposit, so refer to the SDK helper functions in `packages/default-solana-adapter/src/helper.ts` for guidance.",
    "last_referenced_date": "2025-04-29T06:56:30"
  },
  {
    "question": "When using the useAccount hook, how can I read the loading state before attempting to connect the wallet?",
    "answer": "The useAccount hook returns a validating flag in its state. For example:\nconst { account, state: { validating } } = useAccount();\nYou can use validating (true/false) to detect when the hook is still initializing before attempting connection.",
    "last_referenced_date": "2024-06-07T11:02:28"
  },
  {
    "question": "Is the createAccount function from the useAccount hook the correct way to sign in an account? I’m getting “walletClient undefined”—do I need to wrap a provider?",
    "answer": "createAccount is only for registering an Orderly account. To sign in, first establish a wallet connection and then call account.setAddress(address, options). Ensure your app is wrapped with the Orderly provider so useAccount has a valid walletClient before calling createAccount.",
    "last_referenced_date": "2024-06-07T10:58:49"
  },
  {
    "question": "Which hooks should I use to fetch the user’s USDC wallet balance and the Orderly account balance?",
    "answer": "To get the on-chain wallet balance, use the useDeposit hook. To get the Orderly account (vault) balance, use the useWithdraw hook. See the SDK docs under “Hooks → Assets” for useDeposit and useWithdraw.",
    "last_referenced_date": "2024-06-07T14:58:36"
  },
  {
    "question": "Where can I find documentation for the email bind code API at /usercenter/account/email_bind/code?",
    "answer": "This endpoint isn’t fully implemented yet and there’s no public documentation for it at the moment.",
    "last_referenced_date": "2024-06-10T14:48:18"
  },
  {
    "question": "What does error code 28 mean when attempting a withdrawal to the Polygon chain?",
    "answer": "Error code 28 indicates Polygon withdrawals aren’t enabled for your broker (due to exclusivity agreements). Polygon support must be enabled by the Orderly team before you can withdraw to Polygon.",
    "last_referenced_date": "2024-06-20T02:54:50"
  },
  {
    "question": "How can I filter out only specific EVM chains (for example, exclude Polygon) in the React SDK chain selector?",
    "answer": "Use the chainFilter prop on OrderlyAppProvider. For example:\nimport { Arbitrum, Base, Ethereum } from \"@orderly.network/types\";\n<OrderlyAppProvider chainFilter={{ mainnet: [Arbitrum, Base, Ethereum] }}>\n  {/* ... */}\n</OrderlyAppProvider>\nThis will only display the listed chains in the selector.",
    "last_referenced_date": "2024-06-20T09:46:43"
  },
  {
    "question": "How do I generate the orderly_signature to create referral codes, and is there an admin UI for generating keys?",
    "answer": "Use the broker-registration web UI at https://orderlynetwork.github.io/broker-registration/ to register your admin wallet and generate an Orderly key pair (public and private). Then follow the wallet-authentication flow (EIP-712) to sign your referral creation request using your private key. See the “Wallet Authentication” and “API Authentication” guides in the docs for full steps.",
    "last_referenced_date": "2024-06-24T09:40:11"
  },
  {
    "question": "What is ORDERLY_SECRET and how do I obtain it for API authentication examples?",
    "answer": "ORDERLY_SECRET is your private Orderly key (secret). You get it by registering your broker admin wallet in the broker-registration UI—your private (secret) and public keys will then be displayed. Store the private key as ORDERLY_SECRET in your environment variables.",
    "last_referenced_date": "2024-06-24T09:28:26"
  },
  {
    "question": "How do I retrieve a user’s last 24-hour trading volume via the API or hooks?",
    "answer": "Call the private endpoint GET /v1/private/get-user-statistics which includes volume_last_24h. You can invoke it with usePrivateQuery, for example:\nconst { data } = usePrivateQuery('/v1/private/get-user-statistics');",
    "last_referenced_date": "2024-08-21T12:43:49"
  },
  {
    "question": "How can I change the profit and loss colors on the shareable PnL card using the hooks SDK?",
    "answer": "Use the shareOptions.pnl props profitColor and lossColor. For example:\n<TradingPage shareOptions={{\n  pnl: {\n    profitColor: 'green',\n    lossColor: 'red'\n  }\n}} />",
    "last_referenced_date": "2024-09-23T10:39:55"
  },
  {
    "question": "Was the maximum leverage increased in the last SDK update, and do I need to add any configuration?",
    "answer": "The max leverage limits are updated in SDK v1.5.13. Upgrade your @orderly.network/hooks or @orderly.network/react to 1.5.13 or later and the new leverage limits apply by default—no additional configuration is required.",
    "last_referenced_date": "2024-10-04T04:43:00"
  },
  {
    "question": "Why does the TradingPage show an unsupported network message after switching chains, and how can I fix it?",
    "answer": "The SDK’s networkId prop can’t change at runtime without a hard reload. Implement onChainChanged to store the selected networkId in localStorage and trigger a page refresh on network switch. See the example in js-sdk-demo’s OrderlyContainer.tsx (lines 25–40) for full logic.",
    "last_referenced_date": "2024-10-07T15:29:18"
  },
  {
    "question": "What steps should I take now to prepare for Solana support when integrating the Orderly SDK?",
    "answer": "Follow the migration guide to v2.x which includes Solana support: https://staging-docs.orderly.network/sdks/migrate and use the Next.js template (https://github.com/OrderlyNetwork/orderly-js-sdk-nextjs-template). Upgrade your @orderly.network packages to v2.0.1+; once Solana is live, you can use the hooks SDK to handle Solana wallet connections and deposit/withdraw flows.",
    "last_referenced_date": "2024-11-21T09:49:21"
  },
  {
    "question": "How can I start development before my custom broker ID is configured, and can I use the demo broker ID?",
    "answer": "You can use the placeholder broker ID “demo” in the meantime to continue your development and testing locally. For production deployment, you will need to have your own broker ID set up by the Orderly team.",
    "last_referenced_date": "2025-02-22T10:01:50"
  },
  {
    "question": "How should I structure bracket orders (with take-profit and stop-loss legs) using Orderly’s React hooks, and why can’t I attach a TPSL directly to a new order?",
    "answer": "You cannot attach a TPSL (take-profit/stop-loss) to a newly placed order. Instead, use a bracket order by calling useOrderEntry with `algo_type` set to `AlgoOrderRootType.BRACKET` and include the respective TP/SL parameters in the payload. The useTPSLOrder hook only works for creating TPSL orders on an existing open position.",
    "last_referenced_date": "2025-02-28T11:56:10"
  },
  {
    "question": "Which Orderly JS SDK package should I use for backend trading functionality in a pure Node.js environment, since @orderly.network/orderly-sdk is browser-oriented?",
    "answer": "For an actively maintained SDK, use the monorepo JS SDK at https://github.com/OrderlyNetwork/js-sdk. While it’s designed for frontend usage, you can reuse modules such as `types`, `perp`, `core`, and wallet adapters in a Node.js backend. For a higher-level trading client in pure JS, consider using our Eliza plugin at https://github.com/orderlynetwork/plugin-orderly, as the old `@orderly.network/orderly-sdk` package is deprecated.",
    "last_referenced_date": "2025-03-06T08:49:48"
  },
  {
    "question": "My useDeposit hook on Solana throws “T.readBigUInt64LE is not a function.” How do I resolve this Solana adapter error?",
    "answer": "This is due to a polyfill bug in the default Solana adapter. Override the `@orderly.network/default-solana-adapter` dependency to version `2.0.1`, which contains the fix for the Buffer polyfill issue.",
    "last_referenced_date": "2025-04-08T15:01:40"
  },
  {
    "question": "What configuration changes are required when switching my app from testnet (e.g., Arbitrum Sepolia) to mainnet using the Orderly React SDK?",
    "answer": "The `networkId` prop on your `OrderlyConfigProvider` (or `OrderlyAppProvider`) must be set to `\"mainnet\"` before initialization. This parameter cannot change at runtime, so to switch environments you need to perform a full page reload with the correct `networkId` value.",
    "last_referenced_date": "2025-04-07T06:27:34"
  },
  {
    "question": "How can I reset or clear the Orderly account state when a user disconnects their wallet using the hooks SDK?",
    "answer": "Bind to the wallet disconnect event in your app, and on disconnect call `account.logout()` from the `useAccount` hook (for example inside a `useEffect`). This will clear all stored account-related state.",
    "last_referenced_date": "2025-04-25T14:01:29"
  },
  {
    "question": "Which chains are currently supported for ORDER token staking in the Orderly UI, and is Solana supported yet?",
    "answer": "ORDER staking is supported on Ethereum, Arbitrum, Optimism, Polygon, Base, and Avalanche. Solana support will be available soon. You can stake and unstake on the supported chains via the staking page: https://app.orderly.network/staking",
    "last_referenced_date": "2025-04-11T13:37:27"
  },
  {
    "question": "How do I register a Solana account and add an Orderly key via the API, and what casing should I use for the chainType field?",
    "answer": "Use the base URL `https://api.orderly.org/v1/register_account` (or the testnet equivalent), and in your request body set `chainType` in upper-case (e.g., `\"SOL\"` or `\"SOLANA\"`). After registration, call `POST /v1/orderly_key` with the same upper-case `chainType` to add your key. See the Solana registration example for the exact payload structure.",
    "last_referenced_date": "2025-04-15T20:36:08"
  },
  {
    "question": "When sending authenticated API requests, should I send my private key or public key in the `orderly-key` header?",
    "answer": "You should send your public ed25519 key in the `orderly-key` header. Never send your private key. The API uses your public key to verify the signature without ever receiving your private key.",
    "last_referenced_date": "2025-04-24T20:48:56"
  },
  {
    "question": "Do I need separate Orderly API keys when switching between testnet and mainnet?",
    "answer": "Yes. You need to create a distinct Orderly key pair (public and private) for each environment, so you must generate separate keys for testnet and mainnet.",
    "last_referenced_date": "2025-04-24T21:41:48"
  },
  {
    "question": "What new features, UI/UX enhancements, and bug fixes were introduced in Orderly SDK v2.1.2 released May 19, 2025?",
    "answer": "✨ New Feature\n- Added support for 8 new default languages: Russian (ru), Indonesian (id), Turkish (tr), Italian (it), Portuguese (pt), Ukrainian (uk), Polish (pl), Dutch (nl)\n\n💡 UI/UX Enhancements\n- Clicking on the order book now auto-fills the price and switches to Limit order\n- Order input is preserved after submission\n- Integrated Announcement API (with type & updated time)\n- Redesigned language selection modal\n- Toggle between Coin and USDC in the order book\n- Referral code input now auto-capitalizes\n\n🐞 Bug Fixes\n- Take-Profit offset (%) now correctly updates with market price\n- Fixed portfolio page alignment",
    "last_referenced_date": "2025-05-19T07:04:02"
  },
  {
    "question": "What UI/UX enhancements and bug fixes are included in Orderly SDK v2.1.3 released May 26, 2025?",
    "answer": "🔧 UI/UX Enhancements\n- Funding Rate Comparison now supports sorting\n- “Buy/Sell” labels replaced with “Long/Short” for clarity\n- Selected sorting preferences are preserved after collapsing and reopening the market tab\n\n🐞 Bug Fixes\n- Fixed an issue where error messages were not displaying correctly",
    "last_referenced_date": "2025-05-26T10:14:49"
  },
  {
    "question": "How do I modify the _dispatch_request function in the official Python SDK (orderly-evm-connector-python) to correctly set Content-Type headers and pass parameters for different HTTP methods?",
    "answer": "In `orderly_evm_connector/api.py`, update `_dispatch_request` to distinguish between GET/DELETE and POST/PUT. For POST or PUT, set `Content-Type: application/json;charset=utf-8` and call:\n\n    return self.session.post(url=params[\"url\"], json=params[\"params\"])\n\n(or `put` for PUT). For GET or DELETE, set `Content-Type: application/x-www-form-urlencoded;charset=utf-8` and call:\n\n    return self.session.get(url=params[\"url\"])\n\n(or `delete` for DELETE). This ensures JSON bodies on write methods and form-encoded headers on reads.",
    "last_referenced_date": "2024-06-18T16:29:52"
  },
  {
    "question": "What is the minimum market capitalization required to list a token on Orderly’s perpetual DEX?",
    "answer": "Orderly requires a minimum token market capitalization of $20 million to list on its perpetual DEX. Ideally, projects target $30–35 million market cap plus at least three CEX spot listings or an on-chain oracle price feed (e.g., Pyth, Chainlink) for stronger listing qualification.",
    "last_referenced_date": "2025-04-02T14:28:57"
  },
  {
    "question": "Where can I find the Pyth network price feed for the NOOT token to integrate price oracle data?",
    "answer": "You can access the live Pyth price feed for NOOT at https://www.pyth.network/price-feeds/crypto-noot-usd.",
    "last_referenced_date": "2025-04-08T17:52:20"
  },
  {
    "question": "Does the Orderly React SDK support the Abstract Global Wallet (AGW) for Web3-Onboard, and how can I integrate it?",
    "answer": "AGW is not currently supported out of the box by the Web3-Onboard plugin in the Orderly React SDK. Orderly’s team is working on a plugin integration which is expected to take around 1.5 weeks to complete. In the meantime, you can use a wallet adapter like Privy that supports AGW to bridge your connection.",
    "last_referenced_date": "2025-04-09T14:27:22"
  },
  {
    "question": "Where can I get Orderly’s brand assets and a \"powered by Orderly\" logo for branding my custom DEX UI?",
    "answer": "You can find Orderly’s official brand kit, including logos and \"powered by Orderly\" assets, at https://coral-shark-13c.notion.site/orderly-brand-kit-2025.",
    "last_referenced_date": "2025-04-09T13:21:53"
  },
  {
    "question": "Do I need a TradingView license to use the TradingView charts in the Orderly SDK UI?",
    "answer": "While the TradingView chart library may function technically without a license, you should secure the proper TradingView Advanced Charts license for commercial or embedded usage. The development team cannot advise on legal compliance, so please consult TradingView’s licensing terms.",
    "last_referenced_date": "2025-04-07T09:52:02"
  },
  {
    "question": "Do you charge any fees for using the Orderly API or anything beyond the trading fees?",
    "answer": "No. Orderly does not charge any integration or API usage fees. The only fee is a 0.03% taker fee on volume when you start trading.",
    "last_referenced_date": "2025-02-04T09:29:48"
  },
  {
    "question": "What maximum leverage does Orderly support, and are there limits for smaller tokens?",
    "answer": "Orderly supports up to 50× leverage on major markets, but smaller or less liquid tokens are capped at 10× to ensure sufficient liquidity.",
    "last_referenced_date": "2025-02-04T09:26:54"
  },
  {
    "question": "What is the approximate available liquidity for users to go long or short on Orderly?",
    "answer": "Orderly works with market makers to dynamically adjust liquidity per market. While exact numbers vary by symbol and market conditions, the system ensures there’s sufficient depth for a good trading experience. To inspect current liquidity yourself, you can query the orderbook via the private endpoint GET /v1/private/orderbook-snapshot or subscribe to the public WS “orderbook” topic.",
    "last_referenced_date": "2025-02-04T09:27:49"
  },
  {
    "question": "How can I fetch daily trading volume and fees per broker_id, and where do I get open interest (long and short OI)?",
    "answer": "• Volume & fees: call the private REST endpoint GET /v1/private/get-builders-users-volumes (requires authentication with any account under your broker_id).  \n• Open interest: there’s no broker-specific OI endpoint; use the public REST endpoint GET /v1/public/get-open-interests-for-all-symbols to get long and short OI per market.",
    "last_referenced_date": "2025-03-03T13:28:42"
  },
  {
    "question": "Is there an API to retrieve the full list of users who have registered with a specific broker_id?",
    "answer": "No. Orderly does not expose an endpoint that returns all registered users under a broker_id. You must track registrations yourself or register addresses individually.",
    "last_referenced_date": "2025-03-31T07:18:01"
  },
  {
    "question": "How do I obtain the `orderly-account-id`, `orderly-key`, and `orderly-signature` for each user to call private API endpoints?",
    "answer": "You cannot retrieve those credentials for other users via API. Each user must register their wallet under your broker_id (e.g., via POST /v1/register_account) and generate their own Orderly key pair in the broker-registration UI. Then they produce their own EIP-712 signature (`orderly-signature`) and use their public key (`orderly-key`) in headers.",
    "last_referenced_date": "2025-03-31T07:18:01"
  },
  {
    "question": "How does a broker claim trading fees, and where can I view the accumulated fee balance?",
    "answer": "Trading fees automatically accrue to your broker admin wallet’s Orderly account balance on the L2. To view them, call the private endpoint GET /v1/private/get-current-holding (or use the SDK’s useHoldingStream/useCollateral hooks). When you’re ready to move fees on-chain, call the SDK’s withdraw() method or the private REST withdraw endpoint to transfer funds to your desired chain.",
    "last_referenced_date": "2025-03-11T08:43:29"
  },
  {
    "question": "How can I display the current trading contest leaderboard for the Sonic Trading Challenge?",
    "answer": "Use the public REST endpoint GET /v1/public/get-campaign-ranking with the `campaign_id` query parameter. For example:  \nGET https://api-evm.orderly.org/v1/public/get-campaign-ranking?campaign_id=97&broker_id=YOUR_BROKER_ID  \nThis returns ranked user data for the specified campaign.",
    "last_referenced_date": "2025-03-11T08:47:40"
  },
  {
    "question": "What is the campaign_id for the current Sonic Trading Challenge?",
    "answer": "The campaign_id for the current Sonic Trading Challenge is 97.",
    "last_referenced_date": "2025-03-11T08:54:36"
  },
  {
    "question": "Is Orderly’s protocol live on Berachain yet?",
    "answer": "Not yet. The team is actively working on the Berachain integration and it will be available soon.",
    "last_referenced_date": "2025-02-08T10:28:12"
  },
  {
    "question": "Which brokerId can I use to continue development while my custom broker_id is being set up?",
    "answer": "Use the placeholder brokerId “demo” to continue development and integration while your own broker_id is being configured.",
    "last_referenced_date": "2025-02-26T12:39:07"
  },
  {
    "question": "How can I retrieve and update my default builder (broker) fee rates via the Orderly EVM API?",
    "answer": "• Retrieve current default fees: GET /v1/private/get-default-builder-fee (authenticated with your admin wallet key).  \n• Update default fees: POST (or PUT) /v1/private/update-default-builder-fee with your new `maker_fee_rate` and `taker_fee_rate` in the JSON body. Sign the request per the EVM API Authentication guide so `orderly-signature` and `orderly-key` headers are set correctly.",
    "last_referenced_date": "2025-03-04T10:03:43"
  },
  {
    "question": "What assets and token standards does Orderly support for perpetual trading, and what are the exact minimum and maximum USDC notional amounts per position?",
    "answer": "Orderly perpetuals currently accept only native USDC as collateral. To discover the minimum notional per market, call the public REST endpoint GET /v1/public/get-exchange-information and look at the base_min (in USDC) for each symbol. The maximum notional per position is capped at 5 000 000 USDC.",
    "last_referenced_date": "2024-04-11T16:59:50"
  },
  {
    "question": "How does fee distribution work between the Orderly protocol and my broker’s account (e.g., AtlasPerp), and what fees do I need to worry about?",
    "answer": "Orderly charges a base taker fee of 3 bps and a base maker fee of 0 bps (100 % of which Orderly keeps). Any additional maker or taker fee you configure on top of the base goes 100 % to your broker account. Deposit and withdrawal gas fees are paid by the user, not you. Trading fee rebates are calculated daily and credited to your registered broker admin wallet in your Orderly account.",
    "last_referenced_date": "2024-06-25T11:47:00"
  },
  {
    "question": "Which EVM chains and other networks does Orderly currently support, and how can I enable multi-chain trading in my integration?",
    "answer": "Orderly supports Ethereum mainnet plus the L2s Optimism, Arbitrum, Base, and Mantle. Solana support is coming soon. You can configure multi-chain support in the SDK or your front end by specifying these chain IDs in your provider or chainFilter prop; there’s no downside to enabling all supported networks.",
    "last_referenced_date": "2024-08-20T11:14:37"
  },
  {
    "question": "How does Orderly’s omnichain design work under the hood?",
    "answer": "Orderly uses LayerZero for cross-chain messaging. Deposits and withdrawals on any supported chain are relayed via LayerZero to Orderly’s own L2 (built on the OP stack), where all trade settlement, position management, and PnL calculations occur. This lets you offer a unified perp trading experience across multiple chains.",
    "last_referenced_date": "2024-08-20T11:18:55"
  },
  {
    "question": "Where can I find the full list of markets and assets available for perpetual trading on Orderly?",
    "answer": "Refer to the official docs under “Supported Markets” at https://orderly.network/docs/introduction/trade-on-orderly/supported-markets. It lists every perpetual symbol, its base/quote, tick sizes, and margin parameters.",
    "last_referenced_date": "2024-08-30T14:43:08"
  },
  {
    "question": "How do I set up and register my admin wallet so that broker trading fees are distributed correctly, and do I need separate registrations for testnet and mainnet?",
    "answer": "You must register your chosen admin EOA address via the broker-registration UI at https://orderlynetwork.github.io/broker-registration/ for each environment (testnet and mainnet). Provide that address when prompted so Orderly can designate it as your broker’s admin wallet. You can also use the delegate‐signer flow if you prefer a multisig. Accrued trading fees will then be credited to that Orderly account and can be withdrawn on any chain.",
    "last_referenced_date": "2024-10-01T10:47:01"
  },
  {
    "question": "Which private API endpoint and authentication flow should I use to update my broker’s default maker and taker fees programmatically?",
    "answer": "Call the private REST endpoint POST /v1/private/update-default-builder-fee (also documented as update-default-builder-fee). In the JSON body include your broker_id, new maker_fee_rate (decimal), and taker_fee_rate. Sign the request per the API Authentication guide (EIP-712) so your headers include orderly-account-id, orderly-key, orderly-timestamp, and orderly-signature.",
    "last_referenced_date": "2025-01-20T09:01:34"
  },
  {
    "question": "What type of price does the kline API return: last/traded price or mark price?",
    "answer": "The kline endpoint returns traded (kline) price data, not the mark price.",
    "last_referenced_date": "2025-02-26T11:02:27"
  },
  {
    "question": "Can you whitelist our server IP addresses for the orderly-key validation interfaces so our proxies aren’t rate limited?",
    "answer": "Yes. Orderly can whitelist your server IPs for the key‐validation endpoints to avoid rate limits.",
    "last_referenced_date": "2025-02-27T01:17:28"
  },
  {
    "question": "How many orderly-key pairs can be created for a single account ID?",
    "answer": "There is no limit on the number of orderly-key pairs you can generate for one account ID.",
    "last_referenced_date": "2025-02-27T01:17:28"
  },
  {
    "question": "Is there a public API to check the validity of a user’s orderly-key by broker ID and account ID without requiring a signature?",
    "answer": "Yes—use the public REST endpoint GET /v1/public/get-orderly-key to verify an orderly-key by broker_id and account_id with no signature required.",
    "last_referenced_date": "2025-02-27T01:49:50"
  },
  {
    "question": "How is the withdrawal fee calculated on Orderly and which API returns the current withdrawal fee?",
    "answer": "Withdrawal fees are set based on LayerZero cross-chain messaging costs. Retrieve the latest withdrawal fees via the public REST endpoint GET /v1/public/get-supported-collateral-info.",
    "last_referenced_date": "2025-03-03T02:29:15"
  },
  {
    "question": "Does Orderly support subaccounts so users can create multiple sub-accounts under a single address?",
    "answer": "No. Subaccount functionality is not available at this time; it is planned but not in the immediate roadmap.",
    "last_referenced_date": "2025-03-03T02:51:42"
  },
  {
    "question": "When will multi-collateral support (including ETH) be added to Orderly’s vault?",
    "answer": "Multi-collateral support—including ETH, SOL, and stablecoins—is scheduled for release by the end of Q2.",
    "last_referenced_date": "2025-03-04T03:08:43"
  },
  {
    "question": "Which tokens will be supported when multi-collateral goes live, and how will more be added?",
    "answer": "The initial rollout will support stablecoins, SOL, and ETH. Additional collateral assets will be added gradually over time.",
    "last_referenced_date": "2025-03-04T03:17:28"
  },
  {
    "question": "Is there currently an API to retrieve historical funding rate data for markets?",
    "answer": "Not at present. A historical funding-rate API is planned but not yet available.",
    "last_referenced_date": "2025-03-04T03:20:48"
  },
  {
    "question": "What has been the average annualized funding rate for ETH and SOL on Orderly?",
    "answer": "Over the past seven months, the annualized funding rate for both ETH and SOL has been approximately 12–13%.",
    "last_referenced_date": "2025-03-04T05:41:27"
  },
  {
    "question": "Which APIs provide a complete asset history including deposits, withdrawals, PnL settlements, funding fees, and liquidations?",
    "answer": "Use the following endpoints:\n• Deposits/Withdrawals: GET /v1/private/get-asset-history\n• Funding Fees: GET /v1/private/get-funding-fee-history\n• Liquidations: GET /v1/public/get-liquidated-positions-info\n• PnL Settlements: GET /v1/private/get-pnl-settlement-history",
    "last_referenced_date": "2025-03-05T03:03:23"
  },
  {
    "question": "How do I fix delegateSigner errors on Base when using a Safe multisig wallet?",
    "answer": "Replace the vault contract’s ABI with the proxy ABI (since it’s a proxy contract) and ensure you use your broker_id in lowercase (e.g., \"jojo\").",
    "last_referenced_date": "2025-03-05T06:59:49"
  },
  {
    "question": "In the user’s liquidation record, what do the fields abs_liquidator_fee, liquidator_fee, position_qty, cost_position, and price_transfer represent?",
    "answer": "• abs_liquidator_fee: the actual flat fee charged  \n• liquidator_fee: the fee rate (percentage) applied, varies by symbol  \n• position_qty: the size of the position liquidated  \n• cost_position: the total cost of that position  \n• price_transfer: calculated as cost_position / position_qty",
    "last_referenced_date": "2025-03-05T07:38:21"
  },
  {
    "question": "How does the front end calculate today’s PnL when the daily statistics API doesn’t include current-day data?",
    "answer": "It computes today’s PnL by taking your current total account value, subtracting the last day’s account value (from GET /v1/private/get-user-daily-statistics), and then subtracting or adding any deposits or withdrawals made today.",
    "last_referenced_date": "2025-03-05T10:56:52"
  },
  {
    "question": "How can I obtain testnet USDC for development?",
    "answer": "Request testnet USDC via the public faucet endpoint: GET /v1/public/get-faucet-usdc-testnet-only.",
    "last_referenced_date": "2025-03-05T15:43:24"
  },
  {
    "question": "How can I show Orderly trading volume on Dune after migrating to Orderly?",
    "answer": "Use the Orderly Dune Analytics dashboard at https://dune.com/orderly_network/orderly-dashboard.",
    "last_referenced_date": "2025-03-10T02:36:37"
  },
  {
    "question": "Will Orderly support broker-specific TVL data on DefiLlama?",
    "answer": "Not yet. A broker-specific volume/fee API for DefiLlama will be published by the end of the month.",
    "last_referenced_date": "2025-03-18T13:37:41"
  },
  {
    "question": "Is there an API to fetch all users’ asset snapshots under my broker, similar to the volume API?",
    "answer": "No. Orderly does not currently provide an endpoint to retrieve all users’ asset snapshots for a broker.",
    "last_referenced_date": "2025-03-12T06:50:52"
  },
  {
    "question": "In the public get-liquidated-positions-info API, does a negative position_qty indicate a short position?",
    "answer": "Yes—a negative position_qty in the liquidation records indicates that the position was a short position.",
    "last_referenced_date": "2025-03-11T11:25:38"
  },
  {
    "question": "After closing a position, do I need to cancel stop-limit orders manually?",
    "answer": "Yes. Stop-limit orders remain active and must be cancelled manually unless you use a TPSL (take-profit/stop-loss) algo order, which automatically cancels both legs.",
    "last_referenced_date": "2025-04-01T14:11:03"
  },
  {
    "question": "How do I calculate the maximum leverage for a symbol using the base_imr parameter?",
    "answer": "Maximum leverage is calculated as 1 ÷ base_imr. Note that an additional IMR factor may apply for larger notional sizes—see the \"Perpetual Futures → Formulas & Definitions\" in the docs for details.",
    "last_referenced_date": "2025-04-02T09:12:33"
  },
  {
    "question": "Is there an API for retrieving historical insurance fund data?",
    "answer": "No. There is currently no API to fetch historical insurance fund data.",
    "last_referenced_date": "2025-03-13T04:41:09"
  },
  {
    "question": "Is there an API to retrieve builder rebate distribution details?",
    "answer": "There’s no dedicated endpoint. Builder rebates are automatically credited to your admin wallet balance, which you can track via your daily statistics endpoint (GET /v1/client/statistics/daily).",
    "last_referenced_date": "2025-03-17T09:01:15"
  },
  {
    "question": "Can you stake ORDER tokens with any wallet to lower fees, or does it have to be the admin wallet?",
    "answer": "You can stake ORDER tokens with any wallet. Just provide the staked address so Orderly can record your tier.",
    "last_referenced_date": "2025-03-19T08:14:29"
  },
  {
    "question": "Does Orderly support isolated margin mode per position?",
    "answer": "No—isolated margin mode is not supported at this time. It is planned for a future release.",
    "last_referenced_date": "2025-03-11T03:13:00"
  },
  {
    "question": "How does the Orderly indexer work, and which events does it listen for on-chain versus off-chain?",
    "answer": "Orderly’s indexer only listens to on-chain events such as deposits and withdrawals. All trading—order placement, matching, and fills—is handled via off-chain REST APIs. The indexer does not track trades; it’s used to update on-chain state like vault balances.",
    "last_referenced_date": "2024-10-18T10:13:23"
  },
  {
    "question": "When integrating Orderly’s React SDK in a Next.js app, I get “export 'default' (reexported as 'useSWR') was not found in 'swr'”. How do I resolve this?",
    "answer": "Add the React Server Components directive at the top of your module where SWR is imported. For example, insert “use client” as the first line of your file. This ensures SWR is loaded correctly in client components. See the migration note under “export swrconfig reexported as swrconfig was not found in swr” in the SDK migration guide.",
    "last_referenced_date": "2025-01-31T10:37:19"
  },
  {
    "question": "I'm using PortfolioLayoutWidget and OverviewModule.OverviewPage but getting “useConfig must be used within OrderlyConfigProvider or OrderlyAppProvider”. How do I fix this?",
    "answer": "Wrap all Orderly SDK usage—including portfolio components—inside the OrderlyConfigProvider or OrderlyAppProvider at your application root. In Next.js, update your root layout (e.g., root.tsx) to include the provider around all child routes. See the broker-template example’s root.tsx and provider setup for reference.",
    "last_referenced_date": "2025-03-03T09:53:50"
  },
  {
    "question": "Where and how should I configure the Web3-Onboard apiKey in the js-sdk-demo example for Orderly React integration?",
    "answer": "The Web3-Onboard `apiKey` is optional. To include it, add the `apiKey` field to your Onboard options object in `app/config.ts` (under the `onboard` config). You can also pass it as a prop to the ConnectorProvider. It’s fine to hardcode it in `config.ts` since it’s exposed in the front end.",
    "last_referenced_date": "2024-10-16T13:48:44"
  },
  {
    "question": "How does the Orderly Unity Solana integration architecture work—what operations happen on-chain versus off-chain?",
    "answer": "On Solana, funds are deposited into an Orderly-managed vault (on-chain). Order matching is performed off-chain via Orderly’s REST APIs (no smart contract calls for orders). Settlement takes place on Orderly’s own L2 (via the vault contract). An off-chain indexer listens only to on-chain deposit/withdrawal events; trading is entirely via API.",
    "last_referenced_date": "2024-10-17T15:17:30"
  },
  {
    "question": "When I call POST /v1/order/create with an order_amount field I get error code -1005 “Placing orders by this order amount is not supported in Futures mode.” What does this mean and how should I format my create-order payload?",
    "answer": "Orderly’s REST create-order endpoint expects the `order_quantity` (in base asset units) rather than an `order_amount` (quote). Drop the `order_amount` field, and instead set `order_quantity` to the size in the base asset (e.g., ETH). Example:\n\n{\n  symbol: 'PERP_ETH_USDC',\n  client_order_id: '1',\n  order_type: 'LIMIT',\n  order_price: 500,\n  order_quantity: 1,        // 1 ETH\n  visible_quantity: 1,\n  side: 'BUY',\n  reduce_only: false,\n  slippage: 1,               // slippage in %\n  order_tag: 'ARNDIEX'\n}\n\nThis will create a position without the Futures-mode error.",
    "last_referenced_date": "2024-08-19T12:17:21"
  },
  {
    "question": "I don’t see a leverage field in the create-order API. Do I need to calculate leverage myself and multiply it by margin to derive order_quantity?",
    "answer": "No—you can’t pass leverage per order. Orderly uses account-wide max leverage; you submit the order quantity directly. In your UI you can let the user set a margin amount and display an estimated leverage (using SDK hooks or formulas), but the API only needs the base-asset `order_quantity`. Leverage remains an account-level setting, not a per-order parameter.",
    "last_referenced_date": "2024-08-20T09:38:50"
  },
  {
    "question": "When placing a new order I get error -1101 “The margin will be insufficient after.” How do I resolve this?",
    "answer": "That error means your Orderly account has insufficient collateral (USDC) to cover the position. You must first deposit USDC into your Orderly vault using the deposit API or SDK hook. Once your vault balance is sufficient, retry the create-order call.",
    "last_referenced_date": "2024-08-20T10:31:01"
  },
  {
    "question": "I tried to edit an existing order via PUT /v1/order/edit-order and got code -1005 “You can not change other order info.” Which fields can I actually update?",
    "answer": "Only the order’s price and quantity can be modified. When calling the edit-order endpoint, send a JSON body containing your `order_id` plus just the fields you want to change (e.g., `order_price` or `order_quantity`). Omitting or attempting to change fields like `symbol` or `side` will trigger the -1005 error.",
    "last_referenced_date": "2024-08-20T11:58:29"
  },
  {
    "question": "Why does GET /v1/client/trades (my private trades endpoint) return an empty `rows` array when I query my symbol?",
    "answer": "The private GET /v1/client/trades endpoint returns only the authenticated user’s trades. If you have not yet executed any trades under that account, `data.rows` will be empty. This endpoint never returns all platform trades—only your own.",
    "last_referenced_date": "2024-08-20T14:10:54"
  },
  {
    "question": "For the private /v1/claim-insurance-fund endpoint, where do I obtain the required `claim_id` parameter?",
    "answer": "You can fetch `claim_id` values by calling the public endpoint GET /v1/public/get-positions-under-liquidation. Each record in its response includes a `claim_id` that you then pass to the private claim-insurance-fund call.",
    "last_referenced_date": "2024-08-21T08:08:32"
  },
  {
    "question": "Some private REST endpoints are rate-limited per IP (e.g., GET /v1/get_orderly_key). How does Orderly detect my IP—does it use the X-Forwarded-For header?",
    "answer": "No. Orderly reads the client IP from the underlying TCP connection, not from `X-Forwarded-For`. Spoofing headers will not bypass the per-IP rate limit.",
    "last_referenced_date": "2024-08-21T10:07:10"
  },
  {
    "question": "In the React Components SDK `OrderlyAppProvider`, what value should I assign to `networkId`? Should it be the numeric chain ID (e.g., 421614) for Arbitrum Sepolia or something else?",
    "answer": "Use the string `\"testnet\"` or `\"mainnet\"`. Do not pass a numeric chain ID. The SDK uses `networkId` to switch between testnet vs. mainnet environments, not for individual chain IDs.",
    "last_referenced_date": "2024-08-21T11:15:30"
  },
  {
    "question": "How can I retrieve the user’s Orderly account keyStore (account ID, public key, secret key) using the hooks SDK to display in my DEX dashboard?",
    "answer": "Use the `useAccountInstance` hook in `@orderly.network/hooks`. It returns an `account` object with a `keyStore` property containing the `orderlyAccountId`, `publicKey`, and `secretKey`. Example:\n\nconst account = useAccountInstance();\nconsole.log(account.keyStore);\n\nThis hook exposes the info your app needs for display.",
    "last_referenced_date": "2024-08-25T09:04:51"
  },
  {
    "question": "The example-dex repo’s trading chart is static. How can I make it update in real time using the hooks SDK?",
    "answer": "The example-dex demo uses only REST snapshots. To enable live updates, subscribe to the public WebSocket topic `order-book-update` (or `execution-report`, `position-push`, etc.) under the WebSocket API. Handle incoming messages in your component to push new data into the chart.",
    "last_referenced_date": "2024-08-26T06:59:09"
  },
  {
    "question": "When a user places a market order via the SDK, do they pay any on-chain gas fees? If not, how can I show gas consumption to users?",
    "answer": "Orders are matched off-chain and do not incur on-chain gas. The only on-chain gas costs are for deposit and withdrawal transactions. There is no gas consumption to display for create-order calls.",
    "last_referenced_date": "2024-08-27T10:28:42"
  },
  {
    "question": "In the Order History tab I see a 1% fee for opening and closing positions. What does that fee represent and who sets it?",
    "answer": "That is the broker’s custom fee. Orderly’s base fee model is 0.03% taker and 0% maker (Orderly’s share). Any additional maker or taker fee (e.g., 1%) is defined by the broker and goes 100 % to the broker. You can adjust per-user or global broker fees via your backend using the private update-user-fee-rate API.",
    "last_referenced_date": "2024-09-09T12:36:41"
  },
  {
    "question": "How do I change the `brokerId` in the js-sdk-demo example and ensure my wallet is registered under the new broker?",
    "answer": "Edit the `brokerId` and `brokerName` in `app/config.ts` of the js-sdk-demo. Then you must clear any existing Orderly account state (e.g., delete localStorage) and register a new wallet under that broker: call the registration flow (POST /v1/register_account) or reconnect via the SDK. This creates a fresh account assigned to your new brokerId.",
    "last_referenced_date": "2024-09-09T12:49:28"
  },
  {
    "question": "I set Take-Profit/Stop-Loss values on an open position, but when I view or modify them later they differ from my input and realized PnL is off. Why?",
    "answer": "Two factors cause the discrepancy: 1) broker fees are deducted from your exit PnL, and 2) the API requires a trigger price (not a PnL value) that must align to the market tick size. The frontend rounds the trigger price to the nearest tick, so the actual PnL at execution can differ slightly from your initial PnL input.",
    "last_referenced_date": "2024-09-11T11:02:39"
  },
  {
    "question": "Will Orderly’s React SDK work with Next.js 15, or is it locked to earlier versions?",
    "answer": "Yes. The SDK is framework-agnostic (as long as you use React) and works with Next.js 15. There are no version-specific limitations in the SDK itself.",
    "last_referenced_date": "2024-11-10T12:19:15"
  },
  {
    "question": "Does the Orderly JavaScript SDK provide an interface for manually generating Orderly and trading key pairs, and how can I access them?",
    "answer": "The SDK automatically generates Orderly and trading key pairs when the user connects their wallet for the first time and returns the keys to the client. You can find both public and private keys stored in the browser’s local storage. There are currently no SDK functions to manually generate or fetch these key pairs—you must read them from local storage yourself.",
    "last_referenced_date": "2023-04-29T18:32:44"
  },
  {
    "question": "If a user was already onboarded on WooFi or another Orderly DEX, is it possible to retrieve their generated key pairs on our platform using the SDK?",
    "answer": "No. For security reasons, the SDK does not expose other users’ private keys. Each user must connect their own wallet instance to generate and access their Orderly key pairs locally.",
    "last_referenced_date": "2023-05-17T12:49:06"
  },
  {
    "question": "Will the Orderly SDK support the WebSocket API for real-time data, and what is the status?",
    "answer": "Yes. WebSocket support in the SDK is currently under development and will be released in an upcoming SDK version.",
    "last_referenced_date": "2023-06-12T14:36:24"
  },
  {
    "question": "When will Orderly Futures be available on mainnet?",
    "answer": "Futures trading is scheduled to go live on mainnet on 2023-06-26.",
    "last_referenced_date": "2023-06-12T14:59:04"
  },
  {
    "question": "Can I customize the NEAR wallet connect modal in the Orderly SDK, or do I need to fork and modify the UI myself?",
    "answer": "The SDK does not currently support customizing the NEAR wallet connect modal. To change its appearance or behavior, you’ll need to fork the NEAR wallet UI and implement your own modifications.",
    "last_referenced_date": "2023-05-29T15:13:24"
  },
  {
    "question": "Which API domain should I use to ensure safe trading calls given the orderly.network SquareSpace security issue?",
    "answer": "Use the orderly.org domain for all API calls. The orderly.network domain is currently affected by a known SquareSpace vulnerability, but orderly.org remains secure for REST and SDK traffic.",
    "last_referenced_date": "2024-07-11T15:42:04"
  },
  {
    "question": "Which API or method should I use to implement real-time order-related notifications for users (e.g., in a Telegram bot)?",
    "answer": "For the most immediate updates, subscribe to the private WebSocket `execution-report` topic to receive order fill events in real time. Alternatively, you can poll the private REST endpoint GET /v1/private/get-unread-notifications to fetch any unread notifications for the user.",
    "last_referenced_date": "2024-10-10T06:46:44"
  },
  {
    "question": "How do I set custom broker fee rates on Orderly and where can I find the Python tool and official documentation?",
    "answer": "Orderly lets you configure your broker’s custom maker and taker fees via the Python helper in the orderly-evm-broker-fee-admin repository on GitHub. For step-by-step instructions, see the docs under “Building on EVM → User Flows → Custom Fees” at https://orderly.network/docs/build-on-evm/user-flows/custom-fees. You can set default broker fees when creating your broker ID, then update them later in the admin UI or via the Python script.",
    "last_referenced_date": "2024-08-20T06:50:49"
  },
  {
    "question": "What key features, improvements, and fixes are included in the Orderly TypeScript SDK v2.1.0 release?",
    "answer": "The Orderly TypeScript SDK v2.1.0 (April 10, 2025) includes:\n  • Enhanced wallet functionality\n  • Introduction of a trading leaderboard\n  • Improved multi-language support\n  • Bug fix: Resolved an issue with the LinkDevice message\n\nFor full details and examples, see the changelog at https://orderly.network/docs/changelog/sdk#april-10%2C-2025-v2-1-0.",
    "last_referenced_date": "2025-04-15T08:40:59"
  },
  {
    "question": "When integrating Orderly into the Rage Trade Perp-Aggregator-SDK, which branch should I base my feature/orderly work on, which interface(s) must I implement (IExchange vs IAdapterV1), and how do I satisfy the EIP-712 signing requirement for API-based trades?",
    "answer": "Create a feature/orderly branch from the `feat/basic` branch (not `feat/standalone`). You only need to implement the `IAdapterV1`-style adapter, not the higher-level `IExchange` interface. We’ve published a new interface in our Aggregator-SDK-Integration repo (see `IRouterAdapterBaseV1.ts`) that returns an array of `ActionParams`. These `ActionParams` include both fetch parameters and EIP-712 signing metadata, so your adapter can sequentially execute the on-chain or API calls and sign each message as needed.",
    "last_referenced_date": "2024-01-26T11:31:37"
  },
  {
    "question": "How are multiple `ActionParams` processed by the SDK, and how can I run client-side logic (e.g., storing the Orderly key) only after a registration fetch succeeds?",
    "answer": "The SDK executes the array of `ActionParams` in the order you return them. If an `ActionParam` contains fetch parameters, the frontend automatically issues that HTTP request, then proceeds to the next action only when the first completes successfully. For example, if `setup()` returns `[updateLeverageParams, increasePositionParams]`, the SDK will call the update-leverage fetch first; once that promise resolves, it will call the increase-position fetch. To run your own code (such as storing the ed25519 key) after a successful fetch, wrap the SDK call in your own function and attach a `.then()` or callback around the returned promise from the first action.",
    "last_referenced_date": "2024-02-09T12:18:01"
  },
  {
    "question": "How do I round my order quantity to the correct decimal precision based on a market’s `base_tick` when using the Orderly Hooks SDK?",
    "answer": "Import and use the `formatNumber` utility from the hooks package. For example:\n\n```ts\nimport { formatNumber } from '@orderly.network/hooks';\n\nconst roundedQty = formatNumber(rawQuantity, base_tick);\n```\nThis will round or truncate your `rawQuantity` to the decimal places allowed by `base_tick`.",
    "last_referenced_date": "2024-07-19T14:17:53"
  },
  {
    "question": "I’m getting CORS errors when calling `POST /v1/register_account` at `https://api-evm.orderly.network`. How can I avoid these errors in my frontend?",
    "answer": "Use the `.org` domain for API calls instead of the `.network` domain. For example:\n\n`https://api-evm.orderly.org/v1/register_account`\n\nThe `.org` endpoint has the correct CORS configuration for browser preflight and POST requests.",
    "last_referenced_date": "2024-07-26T16:33:40"
  },
  {
    "question": "Is the `tag` field required or returned in the response when fetching an Orderly key via `GET /v1/public/get-orderly-key`, and how should I handle it?",
    "answer": "The `tag` field is optional. If you didn’t include a tag when you created the key, it will not appear in the response. The OpenAPI spec mistakenly marked it as required, but the API treats `tag` as optional. You can safely omit it in requests or handle a missing tag in the response.",
    "last_referenced_date": "2024-07-05T13:20:59"
  },
  {
    "question": "In my aggregator adapter, `symbol.IMR_Factor` is undefined and causing preview failures. Which field should I use instead for initial margin ratio?",
    "answer": "For symbol-level IMR, use the `base_imr` field from the public endpoint `GET /v1/public/get-available-symbols`. If you need the account-specific IMR factor (which may vary by user), call the private endpoint `GET /v1/private/get-account-information` and read the `imr_factor` field from the response.",
    "last_referenced_date": "2024-07-18T14:24:47"
  },
  {
    "question": "Should I use the `orderly.network` or `orderly.org` domain as my API base URL?",
    "answer": "Use `orderly.org` as the primary API base domain. For example:\n\n`https://api-evm.orderly.org/v1/...`\n\nBoth domains may work for documentation, but `.org` is the officially supported endpoint for production REST and SDK calls.",
    "last_referenced_date": "2024-07-08T09:45:07"
  },
  {
    "question": "Does using a custodial wallet provider such as Privy or Turnkey conflict with Orderly’s key management and account registration flows?",
    "answer": "As long as your wallet provider supports signing EIP-712 messages, it works with Orderly. If you’re using the React Components SDK, implement a custom wallet connection provider as described in the docs under “Custom Wallet Connection Provider”: https://orderly.network/docs/sdks/react/wallet#custom-wallet-connection-provider.",
    "last_referenced_date": "2024-12-23T11:05:13"
  },
  {
    "question": "How do I set up a new broker ID (e.g., “funnymoney”) and register an admin wallet for Orderly integration?",
    "answer": "First provide Orderly with your desired broker information:\n• Broker ID (string, e.g., “funnymoney”)\n• Broker Name (display name, e.g., “Funny.money”)\n• Default Taker Fee (decimal, e.g., 0.0006 for 6 bps)\n• Default Maker Fee (decimal, e.g., 0.0003 for 3 bps)\nAfter Orderly confirms your broker ID, register your admin EOA address (or multisig via delegate-signer) at the broker-registration UI: https://orderlynetwork.github.io/broker-registration/. You can register separate wallets for mainnet and testnet. Once you’ve connected and submitted your wallet, share that address with Orderly so they can finalize the admin assignment. The admin wallet collects broker fee rebates and has exclusive access to private APIs like referral codes and custom fees.",
    "last_referenced_date": "2025-01-10T10:59:09"
  },
  {
    "question": "How can I support Bybit Wallet in Orderly’s React Components SDK to participate in the Bybit Wallet campaign?",
    "answer": "Bybit Wallet injects its own EIP-1193 provider, so if you open your DApp inside the Bybit Wallet extension or mobile environment, it will be automatically detected by Orderly’s wallet connector. No additional integration is required beyond using the existing Web3-Onboard or Blocknative connector setup.",
    "last_referenced_date": "2025-03-04T01:08:08"
  },
  {
    "question": "I’m experiencing redirection issues in my Orderly React integration where the trading page path only contains the symbol. How should the path be structured?",
    "answer": "Your route must include the `/perps/<symbol>` prefix rather than just the symbol. For example, use `/perps/PERP_ETH_USDC`. See the up-to-date example in the Orderly broker-template repo: https://github.com/OrderlyNetwork/broker-template.",
    "last_referenced_date": "2025-03-14T08:43:24"
  },
  {
    "question": "Where can I view and claim the trading fees accrued by my builder ID, and how can I access builder-related metrics?",
    "answer": "Trading fees accrue in your registered admin wallet’s Orderly account once you click “Enable trading” and sign the on-chain transaction. To withdraw fees on-chain, connect that admin wallet via the SDK or REST API and call `withdraw()`. For analytics and historical metrics (volume, fees, user counts), filter by your broker ID on the Orderly Dune Analytics dashboard: https://dune.com/orderly_network/orderly-dashboard",
    "last_referenced_date": "2025-05-10T16:51:51"
  },
  {
    "question": "How can I map a user’s EVM wallet address to their corresponding Orderly account ID for my builder ID?",
    "answer": "The Orderly account ID is derived by hashing the user’s wallet address together with your broker ID (e.g., account_id = keccak256(walletAddress + brokerId)). Once you know the wallet address, you can compute or verify the account_id accordingly. See the “User Flows → Accounts” guide for details: https://orderly.network/docs/build-on-omnichain/user-flows/accounts#account-id",
    "last_referenced_date": "2025-05-21T07:31:50"
  },
  {
    "question": "How will Plume Network integrate USDC as collateral for Orderly on its mainnet deployment?",
    "answer": "Plume will bridge standard USDC via Orderly’s OFT (Omnichain Fungible Token) integration through Stargate. On Plume’s network this bridged USDC is issued as HydraUSDC.",
    "last_referenced_date": "2024-12-11T16:29:18"
  },
  {
    "question": "Does Orderly support Plume’s pUSD stablecoin as collateral, and is there an official bridge available?",
    "answer": "Yes. Plume has its own pUSD bridge for moving pUSD into Plume’s mainnet. You can deposit pUSD into your Orderly vault via that bridge just like USDC, and Orderly will accept it as collateral once multi‐collateral support is live.",
    "last_referenced_date": "2025-04-21T04:35:37"
  },
  {
    "question": "How long do cross-chain transfers take when moving bridged assets on Plume and back to Ethereum mainnet via Stargate?",
    "answer": "Transfers within Plume’s network are effectively immediate. For bridging Plume mainnet USDC back to Ethereum mainnet USDC via Stargate, you have two options:\n• Fast mode: ~1 minute\n• Economy mode: ~10 minutes",
    "last_referenced_date": "2025-04-21T06:55:09"
  },
  {
    "question": "When is Orderly’s multi-collateral support (e.g., pUSD alongside USDC) scheduled to go live?",
    "answer": "Multi-collateral support on Orderly (so that assets like pUSD are treated as distinct collateral rather than USDC) is slated for the end of Q2.",
    "last_referenced_date": "2025-04-22T08:47:46"
  },
  {
    "question": "How does Orderly recognize pUSD deposits before native multi-collateral support is available, and what risk considerations should we manage?",
    "answer": "Until multi-collateral support is live, any pUSD you deposit into Orderly will be recognized as USDC. Because withdrawals may be routed as USDC on other networks, it’s recommended to start with native USDC first to minimize cross-collateral risk.",
    "last_referenced_date": "2025-04-21T08:05:40"
  },
  {
    "question": "Where can I find the Orderly smart contract addresses for Plume integration?",
    "answer": "Plume-specific contract addresses are published in the Orderly docs under “Building on Omnichain → Smart Contract Addresses → Plume”. You can view them at:\nhttps://orderly.network/docs/build-on-omnichain/addresses#plume",
    "last_referenced_date": "2025-05-20T00:52:01"
  },
  {
    "question": "Where can I find the Java `Util` class used for public key encoding in the Orderly Java SDK example?",
    "answer": "The Java `Util` class is included in the `api/java` folder of the OrderlyNetwork/examples GitHub repository. Check out the full example and Gradle configuration at: https://github.com/OrderlyNetwork/examples/tree/master/api/java",
    "last_referenced_date": "2024-11-21T08:44:39"
  },
  {
    "question": "Does the Arbitrum Sepolia USDC faucet send tokens to my wallet or credit my Orderly testnet account?",
    "answer": "The USDC faucet on Arbitrum Sepolia does not transfer tokens to your wallet address. Instead, it credits USDC directly to your Orderly account balance on that testnet.",
    "last_referenced_date": "2024-11-21T09:08:01"
  },
  {
    "question": "Why am I getting an \"execution reverted\" error when calling the vault’s `getDepositFee` method, and how do I fix it?",
    "answer": "The `getDepositFee` call requires your Orderly user address as the first argument. Ensure you invoke `getDepositFee(userAddress)` where `userAddress` is the EOA that holds the Orderly account.",
    "last_referenced_date": "2024-11-22T08:40:46"
  },
  {
    "question": "How can I deposit USDC directly from my centralized offchain wallet to a user’s Orderly account without requiring them to use a self-custodial wallet?",
    "answer": "After registering the user’s EOA and creating their Orderly key, call the vault contract’s `depositTo` function from your centralized wallet:\n1. Generate the user’s EOA and Orderly account via EIP-712 registration.\n2. From your wallet, call `depositTo(userAddress, amount)` to credit that user’s Orderly account directly without moving funds through the user’s own wallet.",
    "last_referenced_date": "2024-11-28T07:34:10"
  },
  {
    "question": "Which API endpoint returns the current withdrawal fees per collateral, and why did I lose 1 USDC when withdrawing 10 USDC?",
    "answer": "Withdrawal fees are chain-specific and are charged to cover on-chain gas costs. Retrieve the latest fees via the public REST endpoint GET /v1/public/get-supported-collateral-info, which returns a `withdrawal_fee` field for each collateral contract.",
    "last_referenced_date": "2024-11-29T07:42:27"
  },
  {
    "question": "How do I apply the price tick rule `(price - quote_min) % quote_tick == 0`, for example with a BTC `quote_tick` of 0.1?",
    "answer": "The `%` operator is the remainder function. With `quote_min = 0` and `quote_tick = 0.1`, checking `(price - 0) % 0.1 == 0` means `price % 0.1` must equal zero. For instance, `96000 % 0.1` returns 0, satisfying the tick rule.",
    "last_referenced_date": "2024-12-03T07:18:45"
  },
  {
    "question": "What does the “Order Confirm” option refer to in the trading interface?",
    "answer": "“Order Confirm” controls whether the UI displays a confirmation popup after you click Buy or Sell. It’s purely a front-end setting and does not affect the REST API.",
    "last_referenced_date": "2024-12-03T07:57:15"
  },
  {
    "question": "How can I determine whether an open position is long or short when creating a `POSITIONAL_TP_SL` trigger?",
    "answer": "Inspect the `position_qty` field: positive values indicate a long position, and negative values indicate a short position.",
    "last_referenced_date": "2024-12-06T09:42:35"
  },
  {
    "question": "Is it possible to cancel only the Stop-Loss or Take-Profit child order of an existing `POSITIONAL_TP_SL` algorithmic order?",
    "answer": "No. You cannot cancel an individual child leg. To remove one exit leg, you must cancel the entire parent algo order and then recreate it without the unwanted child order.",
    "last_referenced_date": "2024-12-12T15:31:11"
  },
  {
    "question": "In the `get-current-holding` private API response, what does the `frozen` field represent?",
    "answer": "The `frozen` field shows the amount of collateral reserved (frozen) while withdrawal requests are being processed. You can see it in the response from GET /v1/private/get-current-holding.",
    "last_referenced_date": "2024-12-11T13:49:55"
  },
  {
    "question": "Where can I log in to manage my broker’s admin wallet, view collected fees, and configure referrals?",
    "answer": "Use the Orderly admin portal at https://admin.orderly.network. After registering your admin wallet via the broker-registration UI, log in there to withdraw funds, view balances, and manage referrals. Fee configuration must be done via the private EVM API.",
    "last_referenced_date": "2025-01-16T09:16:38"
  },
  {
    "question": "How can I retrieve detailed per-user trade and position data (filterable by user and date) for my broker?",
    "answer": "For a UI, use the Orderly Dashboard at https://orderly-dashboard.orderly.network/ to view individual user trades and positions. For programmatic access, integrate the Pull Trading Events API v2 from the dashboard query service (see https://github.com/OrderlyNetwork/orderly-dashboard-query-service/doc/api.md#pull-trading-events-api-v2-on-evm). To get aggregated daily volumes per account, call the private endpoint GET /v1/private/get-builders-users-volumes.",
    "last_referenced_date": "2025-01-31T09:59:13"
  },
  {
    "question": "Which user operations on Orderly Network require EIP-712 signing versus a standard on-chain transaction, and how often must users sign for each?",
    "answer": "On Orderly, EIP-712 signatures are required for off-chain API actions: account registration, creating an Orderly key, withdrawals, and settling PnL. Deposits are standard on-chain ERC-20 transfers (no EIP-712). Registration is a one-time signature; Orderly key creation only needs to happen occasionally (you can store the key locally); but each withdrawal and each PnL settlement must be signed via EIP-712 when invoked.",
    "last_referenced_date": "2024-12-04T14:24:43"
  },
  {
    "question": "Is it possible to implement EIP-712 signing in a native mobile app (Kotlin/Swift), and what approaches are available?",
    "answer": "Yes—native platforms can support EIP-712 signing, but you must rely on OS-level crypto libraries or platform-specific Web3 libraries (e.g., web3j for Android, web3swift for iOS) because JavaScript libraries (ethers.js, web3.js) aren’t directly usable. You can also offload EIP-712 operations to a backend service or bridge signing to external wallets via WalletConnect or embedded webviews that support EIP-712.",
    "last_referenced_date": "2024-12-10T13:55:16"
  },
  {
    "question": "Do I need to send or store the user’s wallet private key with Orderly’s backend, and does Orderly ever have access to that private key?",
    "answer": "No. You never transmit the user’s wallet private key to Orderly. All EIP-712 signing happens client-side in the user’s wallet. You only send the EIP-712 signature and the corresponding public key (or userAddress) to Orderly’s API. Orderly does not store or handle your wallet’s private key.",
    "last_referenced_date": "2024-12-10T21:17:46"
  },
  {
    "question": "Which public WebSocket API endpoint can I use to subscribe to the orderbook without requiring a wallet connection?",
    "answer": "Use the public WS stream endpoint (e.g., for testnet: wss://testnet-ws-evm.orderly.org/ws/stream). Subscribe to the “request-orderbook” topic as documented under Public WebSocket API → request-orderbook in the Orderly developer docs. This public subscription does not require `account-id` authentication.",
    "last_referenced_date": "2024-11-28T10:06:11"
  },
  {
    "question": "What information do I need to provide to Orderly in order to set up a new broker ID?",
    "answer": "You must supply:\n1. broker_id: your chosen identifier (e.g., “galar_fin”).\n2. broker_name: display name (e.g., “Galar”).\n3. broker admin wallet: an externally owned account (EOA) that will collect fee rebates and authenticate admin endpoints.  \n4. default fee rates: the maker_fee_rate and taker_fee_rate you want charged by default (decimal values, e.g., 0.0003 for 0.03%).",
    "last_referenced_date": "2024-02-27T19:19:09"
  },
  {
    "question": "Can I change the broker admin wallet after initial setup?",
    "answer": "Yes. You can register a different EOA as your broker admin wallet later if needed, though frequent changes are not recommended.",
    "last_referenced_date": "2024-03-04T07:49:53"
  },
  {
    "question": "What default fee rates can I configure for my broker account?",
    "answer": "Your taker fee must be above Orderly’s base of 0.03%, and your maker fee above 0%. Common settings are 0.06% taker and 0.03% maker. You can always update these rates later via the admin API or UI.",
    "last_referenced_date": "2024-03-04T07:33:50"
  },
  {
    "question": "Where can I find a sample GitHub repository for functional integration with Orderly’s APIs and Hooks SDK?",
    "answer": "Check out the official examples repo:\nhttps://github.com/OrderlyNetwork/examples\nIt includes demos of basic Hooks SDK usage and direct REST/WebSocket calls in multiple languages.",
    "last_referenced_date": "2024-03-07T17:03:57"
  },
  {
    "question": "How do I get testnet USDC on Arbitrum Sepolia for development?",
    "answer": "Use the public REST endpoint on the testnet API base URL:\nGET /v1/public/get-faucet-usdctestnet-only\nSupply your wallet address in the query or body as documented, and the testnet USDC will be credited to your Orderly account.",
    "last_referenced_date": "2024-03-15T07:56:44"
  },
  {
    "question": "Which hook provides market trade history in the Hooks SDK?",
    "answer": "Use the Market Trade History hook. See:\nhttps://sdk.orderly.network/docs/hooks/markets#market-trade-history",
    "last_referenced_date": "2024-03-16T19:00:35"
  },
  {
    "question": "How do I obtain the TradingView configuration for the React Components SDK’s TradingPage?",
    "answer": "You must request access to TradingView’s Advanced Charts library by applying at:\nhttps://www.tradingview.com/advanced-charts/\nOnce approved, you’ll receive the charting_library.js bundle and assets to host in your project and reference in your tradingViewConfig.",
    "last_referenced_date": "2024-03-17T07:31:08"
  },
  {
    "question": "Does Orderly provide an API for email-based login or OAuth?",
    "answer": "No. Orderly does not offer email-based login or OAuth. You must implement any email or OAuth flows on your end.",
    "last_referenced_date": "2024-03-18T09:33:08"
  },
  {
    "question": "Which hooks or endpoints should I use for order history, trade history, funding history, and TWAP data?",
    "answer": "• Order history: useOrderStream hook.  \n• Trade history: call GET /v1/trades via useQuery or subscribe to the public WS trade topic.  \n• Funding history: useFundingRate hook.  \n• TWAP: not supported currently.",
    "last_referenced_date": "2024-03-18T10:18:54"
  },
  {
    "question": "Which hook should I use to create or submit buy/sell orders in the Hooks SDK?",
    "answer": "Use the useOrderEntry hook to place market or limit orders programmatically.",
    "last_referenced_date": "2024-03-18T16:17:55"
  },
  {
    "question": "How do I obtain my orderly_account_id and ORDERLY_SECRET for API authentication?",
    "answer": "Follow the wallet authentication flow in the docs under “User Flows → Wallet Authentication”:\nhttps://orderly.network/docs/build-on-evm/user-flows/wallet-authentication#orderly-key",
    "last_referenced_date": "2024-03-18T21:17:29"
  },
  {
    "question": "What API endpoints and hooks do I use for order creation, fetching open orders, and deposit/withdraw history?",
    "answer": "• Create order (private): POST /v1/order/create  \n• Open orders (private): GET /v1/order/list?status=INCOMPLETE  \n• Hook for open orders: useOrderStream or see https://sdk.orderly.network/docs/hooks/orders#order-list  \n• Deposit/withdraw history (private): GET /v1/asset/history  \n• Hook for asset history: usePrivateQuery('/v1/asset/history')",
    "last_referenced_date": "2024-03-25T15:24:56"
  },
  {
    "question": "How can I detect when a wallet has been disconnected using the Hooks SDK?",
    "answer": "Use the useAccount hook and watch its state.status. For example:\n\n```js\nconst { state } = useAccount();\nuseEffect(() => {\n  if (state.status === AccountStatusEnum.NotConnected) {\n    // wallet disconnected\n  }\n}, [state.status]);\n```",
    "last_referenced_date": "2024-03-26T08:14:34"
  },
  {
    "question": "Which TradingView chart component does the example-dex use and do I need a user_id?",
    "answer": "The demo uses the lightweight/simple chart implementation. You can view it here:\nhttps://github.com/OrderlyNetwork/example-dex/blob/master/app/components/Chart.tsx\nA public user_id is only required if you obtain the Advanced Charts library; otherwise you can omit it.",
    "last_referenced_date": "2024-04-02T09:52:06"
  },
  {
    "question": "Why am I getting ApiError: “The order must fit in the filter requirement” when closing a position with a custom quantity?",
    "answer": "That error indicates your order_quantity does not match the market’s allowed decimal precision (base_tick). Round or truncate your quantity to the correct number of decimals for that symbol.",
    "last_referenced_date": "2024-04-11T18:38:05"
  },
  {
    "question": "Which endpoints provide market data for mark price, open interest, 24h tickers, and index price?",
    "answer": "Subscribe or query the following public WebSocket topics:\n• mark price: “mark-price”  \n• open interest: “open-interest”  \n• 24h tickers: “24-hours-tickers”  \n• index price: “index-price”  \nRefer to the WS API docs under Market Data in the EVM API reference.",
    "last_referenced_date": "2024-04-11T18:42:22"
  },
  {
    "question": "Which hook should I use to fetch the list of all available trading symbols?",
    "answer": "Use the useMarkets hook from @orderly.network/hooks:\nhttps://sdk.orderly.network/docs/hooks/market-data/use-markets",
    "last_referenced_date": "2024-04-17T14:00:34"
  },
  {
    "question": "Why does useChains return an invalid network for Mantle, and how do I fix it?",
    "answer": "This was a bug in the Hooks SDK. Upgrade @orderly.network/hooks to v1.5.7 or later to resolve the invalid network info issue.",
    "last_referenced_date": "2024-05-29T12:55:36"
  },
  {
    "question": "How can I retrieve deposit and withdrawal fees using the Hooks SDK?",
    "answer": "• Deposit fees: use the useDeposit hook. Call setQuantity(amount) then read the returned depositFee object.  \n• Withdrawal fees: use the useChains hook, then inspect each chain’s network_infos.withdrawal_fee field in the returned data.",
    "last_referenced_date": "2024-05-14T13:44:06"
  },
  {
    "question": "How do I convert the wei-denominated depositFee returned by useDeposit into USDC?",
    "answer": "Orderly does not convert units for you. You must divide the wei amount by 10^decimals (typically 10^6 for USDC) in your application code to get the USDC value.",
    "last_referenced_date": "2024-05-15T13:24:18"
  },
  {
    "question": "Can projects list their own tokens on Orderly or enable spot trading without Orderly’s listing team?",
    "answer": "No. Token listings are managed exclusively by Orderly’s listing team; you must submit requests for review. Decentralized self-service listing is on the roadmap but months away. Orderly only supports perpetual futures trading today; spot trading is not available.",
    "last_referenced_date": "2025-02-14T10:16:51"
  },
  {
    "question": "How can I directly control the UI Components (such as tapBar and topBarProps) provided by the Orderly React Components SDK, and if I need to build other screens (e.g., portfolio, markets) outside of the default TradingPage, how should I fetch and render data?",
    "answer": "You cannot override most built-in UI components directly, though you can import them individually (they’re not documented for deep customization). For additional screens, use the Hooks SDK instead of raw REST calls: use the prebuilt hooks (e.g., useHoldingStream, useMarkets) to fetch data. If a hook doesn’t exist for a certain endpoint, use useQuery or usePrivateQuery with the REST path to retrieve data and build your own component layouts.",
    "last_referenced_date": "2024-11-04T09:39:41"
  },
  {
    "question": "If I use the Orderly front-end SDK with TradingView charts, do I need to obtain a TradingView license myself?",
    "answer": "Yes. Orderly does not bundle a licensed chart library. You must apply directly to TradingView for the Advanced Charts library (including the free version) and host the charting_library.js files in your project.",
    "last_referenced_date": "2024-11-04T09:35:38"
  },
  {
    "question": "Can I integrate lightweight-charts instead of TradingView’s Advanced Charts into the Orderly React Components SDK’s TradingPage?",
    "answer": "Technically yes, but not via the Components SDK. If you need to use lightweight-charts, you must switch to the Hooks SDK and build your own chart component from the public orderbook and trade streams.",
    "last_referenced_date": "2024-11-11T11:08:57"
  },
  {
    "question": "After upgrading to SDK v2, I’m getting an error that OrderlyConfigProvider.walletAdapters is undefined in @orderly.network/hooks v1.5.17. How do I fix this?",
    "answer": "SDK v2 is published as 2.0.1-alpha.1. Install the alpha build of your hooks and related packages (e.g., `@orderly.network/hooks@2.0.1-alpha.1`), then follow the Next.js template example at https://github.com/OrderlyNetwork/orderly-js-sdk-nextjs-template for correct provider props.",
    "last_referenced_date": "2024-11-25T07:24:19"
  },
  {
    "question": "I see SDK v2 is available—should I migrate now and where can I find migration instructions?",
    "answer": "Yes, you can migrate to SDK v2. Follow the official migration guide at https://orderly.network/docs/sdks/migrate which covers breaking changes and updated provider/ hook APIs.",
    "last_referenced_date": "2024-11-22T03:38:38"
  },
  {
    "question": "Is there a dashboard where I can verify that my broker admin wallet has been set up correctly?",
    "answer": "Yes. After registration, log in with your admin wallet at https://admin.orderly.network to confirm your admin account, view balances, and manage settings.",
    "last_referenced_date": "2024-11-05T09:46:24"
  },
  {
    "question": "When using the Gnosis Safe multisig address, I get an “invalid address” error with the 'eth:' prefix. How do I resolve this?",
    "answer": "Remove the 'eth:' prefix from the address before submitting it. Enter only the raw hex address (e.g., `0x2D6E368549D0b0f70c818564951f7Ad9B4503c0d`).",
    "last_referenced_date": "2024-11-04T09:39:23"
  },
  {
    "question": "Does the private builder API endpoint GET /v1/private/get-builders-users-volumes return user volumes for BunDex transactions, and can we create and manage trading campaigns ourselves via the API?",
    "answer": "Yes—the `get-builders-users-volumes` endpoint returns daily trading volume per account for your broker_id; set `aggregatedBy=DATE` for a daily breakdown. However, campaign endpoints must be configured by Orderly’s team; you cannot self-serve campaign creation.",
    "last_referenced_date": "2025-01-06T07:48:16"
  },
  {
    "question": "On the Orderly Dune Analytics dashboard, what does the \"net flow\" metric represent?",
    "answer": "\"Net flow\" is calculated as Deposit minus Withdraw.",
    "last_referenced_date": "2024-12-23T03:07:04"
  },
  {
    "question": "How often does the public campaign ranking API (`GET /v1/public/get-campaign-ranking`) refresh its data?",
    "answer": "The campaign ranking data is updated every minute.",
    "last_referenced_date": "2025-02-05T02:45:37"
  },
  {
    "question": "Does Orderly support an isolated or hedge margin mode for perpetual trading?",
    "answer": "No. Orderly only supports cross-margin mode at present; isolated or hedge margin is not yet available.",
    "last_referenced_date": "2024-12-10T09:50:11"
  },
  {
    "question": "How do I withdraw accrued broker fees from my admin wallet, and where can I see the withdrawal fee amounts?",
    "answer": "In the admin portal (`https://admin.orderly.network`), go to the Assets tab, enter the USDC amount you wish to withdraw, click \"Approve\" if enabled, then click \"Withdraw from Contract.\" Make sure your wallet is connected to the same chain where your multisig is deployed. Withdrawal fees apply; to fetch current fee amounts, call the public REST endpoint `GET /v1/public/get-supported-collateral-info` under Supported Collateral Info.",
    "last_referenced_date": "2025-03-11T09:15:22"
  },
  {
    "question": "How can I access the source code of the @orderly.network/components SDK before it’s publicly open-sourced?",
    "answer": "Although the @orderly.network/components repository is not yet publicly available, you can request early access by joining the Orderly Network GitLab project. An invite was sent to GitLab at https://gitlab.com/orderlynetwork/orderly-fe/orderly-web. Once you accept, switch to the “develop” branch to view the current SDK source.",
    "last_referenced_date": "2024-02-15T09:56:57"
  },
  {
    "question": "Where can I find the official documentation, theme tool, and setup guide for the Orderly desktop SDK (React Components)?",
    "answer": "The desktop SDK trading component docs are published at https://sdk.orderly.network/components/trading. You can preview and customize the UI on the Theme Tool at https://sdk.orderly.network/theme. For a guided install with an interactive CLI, see the Getting Started wizard at https://dev-sdk.orderly.network/components/getting_started.",
    "last_referenced_date": "2024-01-08T15:17:21"
  },
  {
    "question": "What issues should I watch for when integrating Account Abstraction (AA) wallets with Orderly, and how can I support AA users to interact with Orderly?",
    "answer": "Orderly’s EVM flows require EIP-712 signatures, which smart contract (AA) wallets cannot produce natively. To support AA users, use the delegate-signer pattern: deploy or designate an EOA signer to submit signed messages on behalf of your AA contract. See the “Building on EVM → User Flows → Delegate Signer” guide for full instructions.",
    "last_referenced_date": "2024-02-24T08:57:27"
  },
  {
    "question": "I’m getting a 500 “internal error” when canceling an order via the REST API. What’s causing it?",
    "answer": "A 500 error on the cancel order endpoint usually means the request’s Content-Type header is incorrect. Ensure you set `Content-Type: application/json;charset=utf-8` (or `application/x-www-form-urlencoded` for GET/DELETE per your client) so the server can parse the body correctly.",
    "last_referenced_date": "2024-04-23T16:01:53"
  },
  {
    "question": "When I call the testnet USDC faucet I intermittently get “RelayerV2: out of counters – try again later!” What does that mean and how can I work around it?",
    "answer": "That error indicates the LayerZero relayer has hit its cross-chain message rate limit. The faucet is rate-limited for cross-chain requests, so simply retry your request after a short delay until it succeeds.",
    "last_referenced_date": "2024-04-25T14:28:56"
  },
  {
    "question": "How can I fetch my broker’s total trading volume programmatically, and is there a way to get the count of trades?",
    "answer": "Call the public REST endpoint GET /v1/public/get-broker-volume under “Public EVM API → get-broker-volume” to retrieve total volume metrics for your broker_id. There is no API for the raw count of individual trades; for more granular metrics you can use the Orderly Dune Analytics dashboard (https://dune.com/orderly_network/orderly-dashboard) and filter by your broker_id.",
    "last_referenced_date": "2024-04-26T16:57:22"
  },
  {
    "question": "When subscribing to public WebSocket feeds, can I use any address or should I stick to the connected user’s address?",
    "answer": "You should continue using the currently connected user’s Orderly account address when subscribing to private or user-specific WebSocket topics. For purely public topics (e.g., orderbook), you may omit an address, but for private or account-scoped streams stick with the authenticated user address.",
    "last_referenced_date": "2024-05-04T21:13:40"
  },
  {
    "question": "In the create-order REST API for perpetual futures, the `order_amount` field returns an error “not supported in Futures mode.” Should I use `order_amount` or `order_quantity`, and what unit does `order_quantity` expect?",
    "answer": "The `order_amount` field is not supported for futures. You must use `order_quantity`, which represents the base-asset quantity (e.g., ETH, BTC). Quantities must conform to the market’s `base_tick` precision (e.g., 0.0001); round or truncate your quantity accordingly.",
    "last_referenced_date": "2024-05-06T18:30:39"
  },
  {
    "question": "How should I calculate a user’s withdrawal amount from free collateral, especially when there’s unsettled PnL?",
    "answer": "Do not simply use `freeCollateral` alone. The withdrawable amount in the SDK is: \n```\nwithdrawable = unsettledPnL > 0\n  ? freeCollateral - unsettledPnL\n  : freeCollateral\n```\nThis matches the logic in `useWithdraw.ts` (around line 70) in the hooks SDK.",
    "last_referenced_date": "2024-05-16T01:12:53"
  },
  {
    "question": "We’re encountering timestamp expiration errors due to client clock skew. How can we avoid this when signing private API calls?",
    "answer": "Avoid relying on the device’s local time. Instead, fetch a recent server timestamp via a public endpoint (e.g., GET /v1/public/check-if-wallet-is-registered or GET /v1/private/get-account-information) and use that value when constructing your `orderly-timestamp`. Using server time prevents drift issues; forthcoming SDK updates will further improve this.",
    "last_referenced_date": "2024-05-16T02:40:32"
  },
  {
    "question": "How can I retrieve all orders tagged with a specific `order_tag` (for example, from an Alertatron integration) and calculate trader and broker fee volumes?",
    "answer": "Use the private REST endpoint GET /v1/private/get-builders-users-volumes. It supports an `order_tag` query parameter, so you can pass your tag (e.g., `alertatron`) to return daily volume and fee data for only those orders.",
    "last_referenced_date": "2024-05-30T09:00:00"
  },
  {
    "question": "Which public API endpoint lets me map a user’s wallet address to their Orderly account ID?",
    "answer": "Call the public REST endpoint GET /v1/public/check-if-wallet-is-registered with the user’s wallet address. The response indicates if the address is registered and returns the associated `orderly_account_id`.",
    "last_referenced_date": "2024-06-17T17:04:00"
  },
  {
    "question": "Do STOP_LIMIT (stop-market/stop-limit) algorithmic orders impact a user’s available max quantity or total collateral calculations?",
    "answer": "No. STOP_LIMIT orders are reduce-only and therefore do not require initial margin; the SDK and back end exclude them when computing `maxQty` or `totalCollateral`. Only open leveraged positions (and TP/SL or POSITIONAL_TP_SL reduce-only exits) affect collateral requirements.",
    "last_referenced_date": "2024-05-17T21:02:29"
  },
  {
    "question": "Can I disable the ability for users to edit their referral code rebate split via the `edit-referral-code-split` endpoint?",
    "answer": "Not at this time. The `edit-referral-code-split` API is designed for referrers to customize their own rebate ratios. There is no configuration to restrict this behavior; you would need to implement your own UI or backend guardrails until a built-in option is provided.",
    "last_referenced_date": "2024-05-20T18:52:12"
  },
  {
    "question": "Is there a ready-made admin/back-office panel for managing referrals, viewing rebate stats, and handling user analytics?",
    "answer": "Orderly does not currently provide a hosted admin panel for referrals or analytics. You will need to build your own dashboard or use the private API endpoints to fetch and display data (for example, referral lists via GET /v1/private/get-referral-code-info).",
    "last_referenced_date": "2024-05-17T20:06:03"
  },
  {
    "question": "How often are referral rebate amounts updated and credited in the referral program?",
    "answer": "Referral rebates are calculated and distributed once per day. You can expect updated rebate balances to appear in users’ accounts on a daily cadence.",
    "last_referenced_date": "2024-05-15T01:42:10"
  },
  {
    "question": "Why does withdrawing to Polygon return “Withdrawal to this chain is not supported,” even though the request matches Woofi’s example?",
    "answer": "Polygon is currently not supported for broker withdrawals due to an exclusivity agreement between Orderly, Polygon, and QuickSwap/WOOFi. Only the officially supported L2 chains (Arbitrum, Optimism, Base, Mantle) and Ethereum mainnet are available.",
    "last_referenced_date": "2024-09-30T08:41:57"
  },
  {
    "question": "Why are many UI components and features missing when using the example-dex repository compared to the official React Components SDK UI?",
    "answer": "The example-dex repo is a custom UI example that uses only the Hooks SDK for data and logic, not the ready-made UI components. To use Orderly’s official React UI components with full feature support, use the js-sdk-demo repository (https://github.com/OrderlyNetwork/js-sdk-demo).",
    "last_referenced_date": "2024-07-26T03:56:27"
  },
  {
    "question": "Can the broker admin wallet be changed after initial setup via the broker-registration flow?",
    "answer": "Yes. You can replace the admin wallet address later. Just register a new wallet for your broker_id and inform the Orderly team to assign it as the new admin wallet.",
    "last_referenced_date": "2024-07-26T07:57:42"
  },
  {
    "question": "Can I use TradingView’s lightweight charting library instead of the Advanced Charts library in the React Components SDK?",
    "answer": "Not at this time. The SDK requires the Advanced Charts library for the TradingPage component. Lightweight charts are not supported until a future SDK update.",
    "last_referenced_date": "2024-08-01T12:13:30"
  },
  {
    "question": "Where do I configure the account registration flow when using the Orderly React Components SDK?",
    "answer": "Account registration is handled automatically by the SDK; you only need to configure the `OrderlyAppProvider` component with your brokerId and related props. No additional code is required for registration.",
    "last_referenced_date": "2024-09-06T04:41:10"
  },
  {
    "question": "How do I modify my broker’s custom maker/taker fees in the testnet environment?",
    "answer": "Point your API calls at the testnet base URL `https://testnet-api-evm.orderly.org` and use the same private endpoints for fee updates (e.g., POST `/v1/broker/fee_rate/default`). Custom rates must be set separately on testnet.",
    "last_referenced_date": "2024-09-06T10:07:46"
  },
  {
    "question": "Which API endpoint returns the broker fee rebate distribution history so I can verify that fees have been credited to my account?",
    "answer": "Call the private REST endpoint GET /v1/private/get-distribution-history. This endpoint returns a transaction log of broker fee rebates credited to your admin account.",
    "last_referenced_date": "2024-09-10T09:13:35"
  },
  {
    "question": "After obtaining a TradingView Advanced Charts license, how do I download the `charting_library` folder for integration?",
    "answer": "Once your application is approved, TradingView will grant you access to their private GitHub repository via a GitHub notification. You can then clone or download the `charting_library` folder from that private repo.",
    "last_referenced_date": "2024-08-23T10:37:28"
  },
  {
    "question": "What is the USDC token contract address on Arbitrum Sepolia testnet for making deposits via the SDK?",
    "answer": "On Arbitrum Sepolia testnet, the native USDC token address is 0x75faf114eafb1BDbe2F0316DF893fd58CE46AA4d as published in the docs under “Building on EVM → Smart Contract Addresses”.",
    "last_referenced_date": "2024-08-26T11:06:37"
  },
  {
    "question": "When calling the update-user-fee-rate endpoint to set custom maker and taker fees, what should I supply for the signature field?",
    "answer": "You must generate an EIP-712 signature of the request payload using your broker admin’s Orderly key. Follow the “API Authentication” guide under “Build on EVM → EVM API → API Authentication” in the docs to produce the `orderly-signature` header.",
    "last_referenced_date": "2024-08-27T08:17:50"
  },
  {
    "question": "Which public API endpoint returns epoch start and end dates for trading rewards?",
    "answer": "Call GET /v1/public/trading_rewards/epoch_info on the public EVM API. The response includes an array of epochs with `start_time` and `end_time` fields.",
    "last_referenced_date": "2024-10-29T03:31:52"
  },
  {
    "question": "Where can I view the current trading rewards cycle and see when the next cycle will start?",
    "answer": "Open the Trading Rewards page at https://app.orderly.network/tradingRewards. It displays the remaining days in the current cycle and the start date of the next cycle.",
    "last_referenced_date": "2024-10-29T09:51:25"
  },
  {
    "question": "Why does wallet connection in an H5 page opened inside Telegram not trigger the wallet pop-up, and how can this be resolved?",
    "answer": "Telegram’s in-app browser is not a full-featured wallet browser, so the SDK cannot invoke the wallet extension. To support in-Telegram flows, integrate a Telegram Web3 wallet provider (e.g., tg web3 wallet) into your H5 page.",
    "last_referenced_date": "2024-09-13T03:30:38"
  },
  {
    "question": "Are there endpoints in the Orderly SDK or API to configure trading fees, or are fees handled automatically?",
    "answer": "Orderly applies a default maker and taker fee (set when you register your broker ID). You can update your broker’s global fee rates via the private REST endpoint PUT /v1/broker/fee_rate/default (update-default-builder-fee). To offer custom rebates on top of those rates for individual users, use the private endpoint POST /v1/broker/fee_rate/set (update-user-fee-rate). Fees are not handled automatically—you must call these APIs from your admin wallet or backend to change them.",
    "last_referenced_date": "2024-07-22T20:48:35"
  },
  {
    "question": "What demo and example repositories are available to explore Orderly front-end integration?",
    "answer": "You can try the live demo at https://sdk-demo.orderly.network/perp/PERP_ETH_USDC and browse the open-source implementation at https://github.com/OrderlyNetwork/js-sdk-demo/. If you prefer a workshop-style starter, check out the Hooks SDK example at https://github.com/OrderlyNetwork/sdk-workshop.",
    "last_referenced_date": "2024-07-10T11:57:41"
  },
  {
    "question": "What options can I pass via the UseOrderEntryOptions parameter to the useOrderEntry hook?",
    "answer": "The chat confirms that useOrderEntry accepts an options object, but no details or documentation pointers were provided in this segment.",
    "last_referenced_date": "2024-07-17T11:26:02"
  },
  {
    "question": "How can I access Orderly’s testnet environment to send test transactions?",
    "answer": "Point your calls at the testnet API base URL https://testnet-api-evm.orderly.org and trade on the Arbitrum Sepolia chain. Just connect your wallet to Arbitrum Sepolia and use that endpoint for REST and WebSocket.",
    "last_referenced_date": "2024-09-09T08:58:57"
  },
  {
    "question": "Which hook should I use to retrieve the current exchange rate (mark price) for a specific token?",
    "answer": "Use the useMarkPrice hook from @orderly.network/hooks to read the token’s current mark price (exchange rate) in real time.",
    "last_referenced_date": "2024-09-10T06:44:16"
  },
  {
    "question": "Does Orderly Network support USDT as collateral, or only USDC?",
    "answer": "Orderly is not multi-collateral yet—only native USDC is supported today. Multi-collateral support (e.g., USDT and others) is planned for early next year.",
    "last_referenced_date": "2024-09-17T04:52:51"
  },
  {
    "question": "How can I stake ORDER tokens programmatically if there’s no off-chain API for staking?",
    "answer": "Staking is done entirely on-chain. You must interact with the ORDER proxy contract (0xC8A8Ce0Ab010E499ca57477AC031358febCbbF17) directly:  \n1. Approve the proxy to spend ORDER (0x4E200fE2f3eFb977d5fd9c430A41531FB04d97B8).  \n2. Call the view function quoteStakeOrder(amount, userAddress) to get the LayerZero fee.  \n3. Send a transaction to stakeOrder(amount) attaching the quoted fee (plus a small buffer, e.g., 1.1×) as value.  \nThere is no off-chain REST endpoint for staking.",
    "last_referenced_date": "2024-09-19T11:12:44"
  },
  {
    "question": "Can I import a new token via API if it isn’t already in Orderly’s token list?",
    "answer": "No. You can only trade the perpetual symbol pairs that Orderly has deployed and enabled market makers for. New tokens must be added by Orderly’s team before they appear in the orderbook.",
    "last_referenced_date": "2024-08-14T12:04:49"
  },
  {
    "question": "Which API endpoint returns the full list of available trading symbols (markets)?",
    "answer": "Call the public REST endpoint GET /v1/public/get-available-symbols. Its response includes every market symbol along with parameters like base_tick and base_min.",
    "last_referenced_date": "2024-09-27T10:44:47"
  },
  {
    "question": "What is the correct base URL for the get-supported-collateral-info endpoint?",
    "answer": "Use the EVM API domain on the org TLD. For example:  \nGET https://api-evm.orderly.org/v1/public/get-supported-collateral-info  \n(the testnet equivalent is https://testnet-api-evm.orderly.org).",
    "last_referenced_date": "2024-09-27T01:58:13"
  },
  {
    "question": "If we use the Orderly React Components SDK (Components SDK), do we need to implement any additional authentication logic beyond what the SDK provides?",
    "answer": "No. When you use the Components SDK, it handles all authentication flows internally. You do not need to write any extra authentication code to connect or register users.",
    "last_referenced_date": "2024-06-19T15:57:49"
  },
  {
    "question": "What do we need to enable our trading bots or webhook solution to execute orders on behalf of users in our custom DEX integration?",
    "answer": "You must securely store each user’s Orderly Key (the ed25519 key pair generated during account registration). Your bots will use that key to sign and submit API requests so they can trade on behalf of the user.",
    "last_referenced_date": "2024-06-07T01:13:38"
  },
  {
    "question": "We understand trading fee rebates are distributed daily—can you confirm where they are posted (Ethereum mainnet or L2) and if there’s a minimum transfer amount?",
    "answer": "Broker fee rebates are credited once per day directly to your Orderly account under your admin wallet and broker_id. They accrue on Orderly’s managed L2 and can be withdrawn via your admin wallet on any supported chain. There is no published minimum transfer amount.",
    "last_referenced_date": "2024-06-21T10:39:32"
  },
  {
    "question": "How do I create an Orderly key for my admin wallet and enable trading so that I can see my accrued USDC commission balance?",
    "answer": "Generate an Orderly key (ed25519 key pair) for your broker admin EOA via the broker-registration UI at https://orderlynetwork.github.io/broker-registration/. If you’re using the React Components SDK, it will automatically create the key upon your first wallet connection. After connecting, sign the “Enable Trading” transaction to register that key and activate your account. Once trading is enabled, your USDC fee rebates will appear in the admin account UI.",
    "last_referenced_date": "2025-04-18T07:32:00"
  },
  {
    "question": "How can I claim or withdraw accrued broker fee rebates from my admin wallet using the SDK or REST API?",
    "answer": "Broker fee rebates accrue in your Orderly account linked to your admin wallet on Orderly’s L2. Connect that admin wallet via the SDK (Components or Hooks), ensure you’ve generated and registered your Orderly key (i.e., enabled trading), then call the SDK’s withdraw() method or invoke the private REST withdraw endpoint to transfer USDC on-chain. For multisig admin wallets, use the broker-registration UI link to manage key creation and withdrawals.",
    "last_referenced_date": "2025-04-24T06:30:18"
  },
  {
    "question": "Why am I receiving a 400 Bad Request error with code -1000 “path not found” when calling GET /v1/volume/broker/daily, and how can I fix it?",
    "answer": "A 400 with “path not found” usually means you’re hitting the wrong host. The correct base URL is https://api.orderly.org, not api-evm.orderly.network. So call https://api.orderly.org/v1/volume/broker/daily?start_date=YYYY-MM-DD&end_date=YYYY-MM-DD&page=1. Alternatively, use the SDK’s usePrivateQuery hook from @orderly.network/hooks, which auto-configures the correct host and auth headers, avoiding path errors.",
    "last_referenced_date": "2025-05-23T04:24:07"
  },
  {
    "question": "Is bridged-to-native USDC via Astar/Sony Chain’s native bridge compatible with Orderly’s settlement system, and how can we integrate it?",
    "answer": "Yes. Orderly accepts USDC—whether native or bridged via a Circle-backed bridge—on any LayerZero-compatible chain. To integrate, configure your deposits to use the bridged USDC token address on Sony Chain and call the vault’s deposit methods (e.g., depositTo) exactly as you would for Mantle USDC. Cross-chain messaging fees are handled by LayerZero, and no additional settlement changes are required on Orderly’s side.",
    "last_referenced_date": "2024-08-17T03:06:20"
  },
  {
    "question": "What is the expected timeline for bridged USDC availability on Sony Chain for Orderly integration?",
    "answer": "Bridged USDC will be deployed by the Soneium team at mainnet launch (day one). You can begin your integration process as soon as Sony Chain goes live with bridged USDC support.",
    "last_referenced_date": "2024-08-17T07:43:44"
  },
  {
    "question": "Where can I view the Orderly Network orderbook to research depth and support position sizes of 100–200k?",
    "answer": "You can view Orderly’s unified orderbook on any perpetual DEX built on Orderly. For example, check the live orderbook and liquidity on WOOFi Pro at https://dex.woo.org/en/trade/ETH_PERP.",
    "last_referenced_date": "2024-12-01T15:08:58"
  },
  {
    "question": "How can I retrieve the full list of trading markets (coins/pairs) supported on Orderly?",
    "answer": "You can view all supported perpetual markets via the Orderly docs under “Supported Markets” (https://orderly.network/docs/introduction/trade-on-orderly/supported-markets). Programmatically, call the public REST endpoint GET /v1/public/get-available-symbols, which returns each symbol and its parameters.",
    "last_referenced_date": "2024-10-03T15:02:47"
  },
  {
    "question": "Is the Orderly EVM OpenAPI specification up to date and where is the canonical source for code generation?",
    "answer": "Yes—the OpenAPI‐EVM spec is kept current. You can find the latest YAML at the documentation-public GitHub repo: https://github.com/OrderlyNetwork/documentation-public/blob/main/evm.openapi.yaml. Note that authentication is covered in the API Authentication guide (https://orderly.network/docs/build-on-evm/evm-api/api-authentication) and there are codegen examples in the OrderlyNetwork/examples repository.",
    "last_referenced_date": "2025-04-15T05:49:06"
  },
  {
    "question": "Can I offer different fee structures (e.g., copy trading vs. manual trading) under a single broker, and can one wallet connect to multiple Orderly accounts?",
    "answer": "Orderly supports only one default fee structure per broker ID. However, you can override fees on a per-account basis by calling the private update-user-fee-rate API for specific user addresses. Each wallet may only register one Orderly account per broker ID—the SDK does not support multiple broker IDs for a single wallet.",
    "last_referenced_date": "2024-11-07T09:23:08"
  },
  {
    "question": "When using the 'demo' broker ID for development, do all WebSocket topics work the same as in production? How do the 'balance' and 'account' topics behave, and is anything disabled in demo (including withdrawals)?",
    "answer": "Yes—demo and production use the same WebSocket API, with no topics disabled. Topics like “balance” and “account” only push updates when the underlying data changes; they do not send a steady stream or an initial snapshot (you must fetch initial state via REST). Withdrawals also work in demo, though failures often indicate insufficient native funds for gas.",
    "last_referenced_date": "2025-05-10T13:22:18"
  },
  {
    "question": "What are the per-user limits on untriggered TP/SL and POSITIONAL_TP_SL algo orders across multiple symbols?",
    "answer": "By design:\n• Each user may have up to 10 active (untriggered) TP_SL (child orders) per perpetual symbol.  \n• Each user may have only 1 active (untriggered) POSITIONAL_TP_SL per symbol.  \nSince limits apply per symbol, a user with positions on two symbols (e.g., ETH and BTC) could have 10 TP_SL + 10 TP_SL = 20 total TP_SL orders, and 1 POSITIONAL_TP_SL on each symbol = 2 POSITIONAL_TP_SL orders.",
    "last_referenced_date": "2025-04-17T08:08:16"
  },
  {
    "question": "Should I separate PnL settlement from withdrawals in my UI, or integrate settlement into the withdrawal button?",
    "answer": "It’s up to you, but best practice is to give users a separate “Settle PnL” action for clarity and control. Many UIs hide settlement behind the withdraw flow (automatically settling only when needed), but exposing settlement as its own button provides better UX and flexibility.",
    "last_referenced_date": "2025-04-30T06:38:05"
  },
  {
    "question": "Are Orderly vaults custodial or non-custodial? How is user collateral held?",
    "answer": "Orderly vaults are non-custodial smart contracts. When users deposit USDC into a vault, the funds are held by the on-chain vault contract rather than by Orderly or any centralized entity, similar to a DeFi liquidity pool.",
    "last_referenced_date": "2025-02-24T23:34:28"
  },
  {
    "question": "Where does Orderly source its trading liquidity, and does Orderly hold the underlying assets users trade?",
    "answer": "Orderly operates as a perpetual futures venue—users deposit their own USDC collateral into smart-contract vaults. Orderly itself does not custody or own underlying spot assets. Liquidity is provided by market makers placing orders on Orderly’s order book.",
    "last_referenced_date": "2025-02-19T17:01:17"
  },
  {
    "question": "What are the funding rate caps for perpetual futures markets on Orderly?",
    "answer": "The funding rate caps are those shown in the “Funding Rate” table in the docs under “Perpetual Futures → Funding Rate.” The published caps (up to 4% for some pairs) are accurate. Refer to https://orderly.network/docs/introduction/trade-on-orderly/perpetual-futures/funding-rate for details.",
    "last_referenced_date": "2025-03-19T14:55:01"
  },
  {
    "question": "Is it possible to confirm whether a user’s trade has filled or a TP/SL has executed from our backend without having the user’s Orderly key?",
    "answer": "Not at the moment. Orderly’s APIs require the user’s Orderly key (orderly-account-id and signature) for private account-scoped queries, so there is currently no way to poll or subscribe to individual fill events from a backend without the user’s key.",
    "last_referenced_date": "2025-05-22T02:42:52"
  },
  {
    "question": "Can I begin trading on testnet with my broker ID (e.g., 'involio') before registering an admin wallet, and will the demo broker ID ('demo') allow trading of ETH, BTC, ADA at any quantity?",
    "answer": "Yes—you can point your SDK or API calls at the testnet base URL with brokerId set to your ID (or 'demo') and start perpetual trading immediately. Registering an admin wallet is only required to collect broker fees; your trades work without it. On demo you can trade any supported symbol at any quantity (subject to per-market tick and min-notional rules).",
    "last_referenced_date": "2025-05-16T08:27:41"
  },
  {
    "question": "Using CCXT in Python, how do I configure the exchange client to connect to a custom Orderly broker instance like Mode, and why was I getting no markets or a 400 “path not found” error?",
    "answer": "Initialize the CCXT client with the `woofipro` exchange ID (not `woo`), supply your ed25519 API key, secret, and `accountId`, set `brokerId` to your broker (e.g., \"mode\"), and point the URLs to the v1 API. For example:\n\n```python\nimport ccxt, os\nexchange = ccxt.woofipro({\n    'apiKey': 'ed25519:YOUR_PUBLIC_KEY',\n    'secret': 'ed25519:YOUR_SECRET_KEY',\n    'accountId': '0xyourorderlyaccountid',\n})\nexchange.options['brokerId'] = 'mode'\nexchange.urls['api'] = {\n    'public': 'https://api.orderly.org',\n    'private': 'https://api.orderly.org'\n}\nexchange.load_markets()\n# Now len(exchange.markets) > 0\nbalance = exchange.fetch_balance()\n```\n\nUsing `woofipro` ensures the library uses the correct v1 endpoints; attempts with `woo` default to a v3 path, causing “path not found.”",
    "last_referenced_date": "2025-04-25T06:31:47"
  },
  {
    "question": "Can I create an Orderly API key controlled by a Gnosis Safe multisig (non-EOA), and how do I set that up?",
    "answer": "Yes. Orderly supports multisig admin wallets via the Delegate Signer flow. In the broker-registration UI (https://github-dev.orderly.network/broker-registration/), register your Gnosis Safe address. Under the hood, the Delegate Signer feature lets you delegate an EOA to sign EIP-712 messages for your multisig. See the guide “Building on EVM → User Flows → Delegate Signer” in the docs for full instructions.",
    "last_referenced_date": "2025-04-28T08:59:58"
  },
  {
    "question": "How can I calculate the share price of an Orderly market-making vault from its smart contract?",
    "answer": "Read the vault’s `mainAssetsAfterFee` and `mainShares` state variables, then compute:\n\n```\nsharePrice = mainAssetsAfterFee / mainShares\n```\n\nThis gives you the per-share value net of fees. (Confirmed 2025-05-06T04:31:08)",
    "last_referenced_date": "2025-05-06T04:31:08"
  },
  {
    "question": "What margin modes are supported by Orderly when integrating via CCXT or FreqTrade?",
    "answer": "Orderly perpetuals support only cross-margin mode. Isolated margin or other margin modes are not available.",
    "last_referenced_date": "2025-05-05T09:29:34"
  },
  {
    "question": "Is historical OHLCV candle data and funding rate data broker-specific, and how far back can I retrieve it via the public APIs?",
    "answer": "Market data (OHLCV candles and funding rates) is not broker-specific. You can fetch up to 1,000 bars per request via the `/tv/history` endpoint and access paginated funding rates via the `/v1/public/get-funding-rate-for-all-markets` endpoint. However, publicly available candle history currently only goes back to April 30 2025. Earlier or archived data isn’t exposed via public API and would require a special support request.",
    "last_referenced_date": "2025-05-21T04:17:14"
  },
  {
    "question": "How can I set up an automated test environment for Orderly in my CI pipeline using Python, and which testnet URLs and tokens should I use?",
    "answer": "Request a dedicated testnet broker ID from Orderly. Use that broker ID against the Arbitrum Sepolia testnet endpoints (`https://testnet-api-evm.orderly.org`) for REST and WebSocket. On testnet, only native USDC is supported; you can retrieve its contract address via `GET /v1/public/get-supported-collateral-info` on the testnet API. While the testnet environment is shared (anyone can use the same broker ID), it’s suitable for automated unit and integration tests of deposit, withdrawal, and order flows.",
    "last_referenced_date": "2025-05-27T14:48:18"
  },
  {
    "question": "What information is required to configure a new broker ID on Orderly’s EVM environment?",
    "answer": "When setting up a broker ID on Orderly’s EVM API, provide:\n1. Environment: “testnet” or “mainnet”\n2. Broker ID (string identifier, e.g., “dvx”)\n3. Broker Name (display name, e.g., “DVX”)\n4. Default Taker Fee Rate (decimal, e.g., 0.06 for 6 bps)\n5. Default Maker Fee Rate (decimal, e.g., 0.03 for 3 bps)\n6. Broker Admin Account: the EOA address that will collect broker fee rebates and manage private APIs (you register it and share the address after broker creation)\nYou can adjust these fee rates later via the admin API or UI.",
    "last_referenced_date": "2024-07-15T13:35:26"
  },
  {
    "question": "How does the Delegate Signer user flow work for integrating contract accounts (CAs) with Orderly, and can a CA be used without an EOA?",
    "answer": "Delegate Signer lets you use a smart-contract account (CA) but it always requires an externally owned account (EOA) to generate the Orderly key and sign EIP-712 messages. You cannot bypass the EOA—the CA “owns” the EOA signing authority, but the Orderly keypair must be created by that EOA. Once delegated, your CA contract can call functions (e.g., deposit, withdraw, settle) using the EOA’s signature, but you cannot have a CA interact directly without an EOA at registration.",
    "last_referenced_date": "2024-08-22T21:43:58"
  },
  {
    "question": "How can I generate an Orderly private and public key pair client-side in JavaScript for EIP-712 signing?",
    "answer": "On the client, generate an ed25519 keypair like this:\n```js\nimport { utils } from 'ethers';\nimport { getPublicKeyAsync } from '@noble/ed25519';\nimport { encodeBase58 } from '@ethersproject/basex';\n\nconst privateKey = utils.randomBytes(32);           // a random 32-byte private key\nconst publicKeyBytes = await getPublicKeyAsync(privateKey);\nconst publicKey = `ed25519:${encodeBase58(publicKeyBytes)}`;\n```\nUse `privateKey` for EIP-712 signatures, and submit the Base58-encoded `publicKey` to the Orderly registration API.",
    "last_referenced_date": "2024-08-19T07:21:48"
  },
  {
    "question": "How do I configure the broker ID, broker name, and default fee rates in the React Components SDK’s OrderlyAppProvider?",
    "answer": "Pass your broker details as props on `<OrderlyAppProvider>`. For example:\n```tsx\n<OrderlyAppProvider\n  brokerId=\"dvx\"\n  brokerName=\"DVX\"\n  networkId=\"mainnet\"\n  defaultTakerFeeRate={0.06}   // 6 bps total; Orderly’s base is 3 bps\n  defaultMakerFeeRate={0.03}   // 3 bps total; Orderly’s base is 0 bps\n>\n  {children}\n</OrderlyAppProvider>\n```\nOrderly’s base fees (3 bps taker, 0 bps maker) are kept by Orderly; any excess you configure goes 100 % to your broker. You can update these rates later via the admin dashboard or private API.",
    "last_referenced_date": "2024-08-16T06:42:50"
  },
  {
    "question": "Where can I find the EVM cross-chain modules for Orderly Network, including CrossChainRelayUpgradeable, VaultCrossChainManagerUpgradeable, LedgerCrossChainManagerUpgradeable, and the Vault contract?",
    "answer": "The EVM cross-chain contracts are published on GitHub:\n• CrossChainRelayUpgradeable: https://github.com/OrderlyNetwork/evm-cross-chain/blob/main/contracts/CrossChainRelayUpgradeable.sol\n• VaultCrossChainManagerUpgradeable: https://github.com/OrderlyNetwork/evm-cross-chain/blob/main/contracts/VaultCrossChainManagerUpgradeable.sol\n• LedgerCrossChainManagerUpgradeable: https://github.com/OrderlyNetwork/evm-cross-chain/blob/main/contracts/LedgerCrossChainManagerUpgradeable.sol\nAdditionally, the main Vault contract is here: https://github.com/OrderlyNetwork/contract-evm/blob/main/src/vaultSide/Vault.sol",
    "last_referenced_date": "2024-12-12T11:44:33"
  },
  {
    "question": "Do I need to port the LedgerCrossChainManager contract to Move for Movement integration?",
    "answer": "No. The LedgerCrossChainManager is deployed only on the Orderly chain, so you do not need to port it to the Move chain.",
    "last_referenced_date": "2025-02-06T11:15:50"
  },
  {
    "question": "Where can I access the SolConnector contract code for Solana cross-chain integration?",
    "answer": "The SolConnector implementation for Solana is available in the public GitHub repository:\nhttps://github.com/OrderlyNetwork/sol-cc/tree/main/contracts",
    "last_referenced_date": "2025-02-06T12:02:24"
  },
  {
    "question": "How does Orderly map and store Solana user addresses for cross-chain deposits and withdrawals, and how are collisions handled?",
    "answer": "Orderly derives a 20-byte address by taking keccak256(solAddress) and truncating to the first 20 bytes, then uses that as the EVM-style key. It also saves the original Solana address as a bytes32 in the SolConnector contract for deposits/withdrawals. Collision risk is accepted at the same level as EVM address collisions since both are 20-byte hashes.",
    "last_referenced_date": "2025-02-06T11:44:42"
  },
  {
    "question": "Where can I find the Aptos vault connector repository used for Move/Aptos integration?",
    "answer": "The Aptos (Move) vault connector code is in a private Orderly repo. A copy has been shared at:\nhttps://github.com/OrderlyNetwork/aptos-vault",
    "last_referenced_date": "2025-03-12T10:47:37"
  },
  {
    "question": "What is the USDC token contract address and its decimal precision on the Movement Bardock testnet?",
    "answer": "On Movement Bardock testnet, the USDC contract address is 0xb89077cfd2a82a0c1450534d49cfd5f2707643155273069bc23a912bcfefdee7 and it uses 6 decimal places.",
    "last_referenced_date": "2025-04-01T09:19:34"
  },
  {
    "question": "Is it possible to have tiered custom fee structures on EVM chains for end users, and how do I set them up?",
    "answer": "Yes. After your broker ID is configured, you can define per‐user or tiered maker/taker fees using the custom‐fee feature. Orderly provides a Python helper tool in the orderly-evm-broker-fee-admin repo:\n\nhttps://github.com/OrderlyNetwork/orderly-evm-broker-fee-admin\n\nClone that repo, install dependencies, and run its scripts authenticated with your admin wallet’s Orderly key to set up default and per-user fee tiers.",
    "last_referenced_date": "2024-05-02T15:29:21"
  },
  {
    "question": "How can I retrieve the current user's Orderly API key secret (private key) and public key using the Hooks SDK?",
    "answer": "In the Hooks SDK, use the useAccount hook to access the key store. For example:\n\n```ts\nconst { account } = useAccount();\nconst orderlyKey = account.keyStore.getOrderlyKey();\n// orderlyKey.secretKey is your API secret\n// orderlyKey.getPublicKey() derives the public key\n```\nPrefix the secretKey with `ed25519:` to use it in authenticated REST calls.",
    "last_referenced_date": "2024-05-08T08:57:07"
  },
  {
    "question": "How can I customize the Buy/Sell order entry confirmation button's background color and text in the React Components SDK?",
    "answer": "Override the CSS for the confirmation button ID in your global stylesheet. For example:\n\n```css\n#orderly-order-entry-confirm-button {\n  background-color: #000;\n  color: #fff;\n}\n```",
    "last_referenced_date": "2024-05-06T15:52:19"
  },
  {
    "question": "How can I apply CSS overrides to segmented (Buy/Sell selection) buttons in the SDK that currently lack element IDs?",
    "answer": "Segmented buttons will receive IDs and a `data-state` attribute in the next SDK release (v1.5.1). Until then, you can request urgent ID additions by notifying the Orderly team. The upcoming attributes will let you target each segment directly in CSS.",
    "last_referenced_date": "2024-05-07T03:21:15"
  },
  {
    "question": "Why do I see the error “Chain with chainId: 5000 and chainNamespace: evm has not been set” when attempting to switch to Mantle mainnet, and how can I fix it?",
    "answer": "That error indicates your SDK version doesn’t include the Mantle chain configuration. Upgrade your @orderly.network/components and related packages to v1.5.7 or later—these releases ship with the Mantle chainId (5000) preconfigured.",
    "last_referenced_date": "2024-05-29T12:56:56"
  },
  {
    "question": "Is there an API endpoint to retrieve day-wise profit and loss (PnL) data for users?",
    "answer": "No—Orderly does not yet expose a day-wise PnL endpoint. You can fetch daily trading volume per account via the private REST endpoint GET /v1/private/get-brokers-users-volumes, and campaign endpoints include PnL for that campaign, but there’s no standalone day-wise PnL API.",
    "last_referenced_date": "2024-10-15T15:38:58"
  },
  {
    "question": "Can referral codes be created by a broker without using the admin wallet directly in the front end, and how should I integrate this?",
    "answer": "All referral code creation calls must be signed by your broker admin wallet’s Orderly key. To support a web or front-end flow, proxy the create-referral-code API through your back end so your admin key signs the request. Only one admin wallet is supported.",
    "last_referenced_date": "2024-07-22T13:13:05"
  },
  {
    "question": "If a broker’s admin wallet has not been configured yet, can users still place long and short orders on Orderly?",
    "answer": "Yes. Users can continue to place long and short trades even if the admin wallet hasn’t been set up yet; the only difference is that no broker fees will be collected until you configure the admin wallet.",
    "last_referenced_date": "2025-02-06T06:39:30"
  },
  {
    "question": "How do I generate and register an Orderly key for a Solana admin wallet to sign private EVM API requests?",
    "answer": "Use the SDK’s DefaultSolanaWalletAdapter, which includes Solana EIP-712 signing functionality. You can follow the universal signing example in the Eliza repo and review the walletAdapter.ts implementation in @orderly.network/default-solana-adapter. This shows how to derive and store the ed25519 keypair and sign messages for API calls on Solana.",
    "last_referenced_date": "2025-02-06T13:42:15"
  },
  {
    "question": "In the referral system, if we want the referrer to receive a 40% rebate share, what values should we pass for max_rebate_rate, referrer_rebate_rate, and referee_rebate_rate when creating a referral code?",
    "answer": "Set max_rebate_rate to 0.4, referrer_rebate_rate to 0.4, and referee_rebate_rate to 0.",
    "last_referenced_date": "2025-02-07T08:51:55"
  },
  {
    "question": "How can the broker admin wallet check its collected fee balances on Orderly L2 and withdraw those fees programmatically?",
    "answer": "First call the private REST endpoint GET /v1/private/get-current-holding with your admin wallet’s Orderly API credentials to fetch your current holdings (including accrued fees). Then perform a withdrawal by calling the private withdrawal API with an EIP-712 signed request as detailed in the withdrawal user flow docs.",
    "last_referenced_date": "2025-02-12T06:33:00"
  },
  {
    "question": "When do daily trading fee rebates settle on Orderly, and where are they credited?",
    "answer": "Trading fee rebates are processed once per day a few minutes after 00:00 UTC and automatically credited to your registered broker admin wallet’s Orderly account on Orderly L2.",
    "last_referenced_date": "2025-02-12T12:01:29"
  },
  {
    "question": "Which API endpoint returns referral history with details on referred users’ trading volume and the rebates I have earned?",
    "answer": "Call the private endpoint GET /v1/private/get-referral-history authenticated with your admin wallet’s Orderly key. The response includes all referral codes you created along with each referred user’s trading volume and your earned rebate amounts.",
    "last_referenced_date": "2025-03-04T09:22:12"
  },
  {
    "question": "Which API endpoint provides the funding fee history so I can see funds added or deducted due to funding rates?",
    "answer": "Use the private REST endpoint GET /v1/private/get-funding-fee-history. It returns your account’s funding fee transactions, showing both fees you paid and funding you received.",
    "last_referenced_date": "2025-03-04T09:41:35"
  },
  {
    "question": "How can I fetch daily open interest for all markets and get a detailed record of user transactions (position opens/closes, leverage, notional, order type)?",
    "answer": "For open interest, use the public endpoint GET /v1/public/get-open-interests-for-all-symbols. For detailed user transaction records, there is no direct REST API—use the Orderly Dashboard Query Service’s Pull Trading Events API v2 on EVM (see the orderly-dashboard-query-service repo) to retrieve on-chain trade events and reconstruct position history client-side.",
    "last_referenced_date": "2025-03-04T15:50:07"
  },
  {
    "question": "Why do calls to the register_account endpoint sometimes time out when the user’s device clock is skewed, and how can I resolve this issue?",
    "answer": "This timeout is caused by client‐side timestamp mismatches. Ensure the user’s device clock is correct, or upgrade to @orderly.network/hooks SDK v1.5.3 (or later), which uses the server’s timestamp instead of the local device time when signing requests. This eliminates the timeout errors caused by clock skew.",
    "last_referenced_date": "2024-05-17T04:13:54"
  },
  {
    "question": "Do STOP_LIMIT (non–reduce-only) algo orders affect the maxQty and totalCollateral calculations in the Hooks SDK, or are they excluded?",
    "answer": "By design, the maxQty formula does not include any algo orders directly; it only uses the totalCollateral value. The totalCollateral calculation explicitly excludes STOP_LIMIT orders (and other non–reduce-only algo orders), so STOP_LIMIT orders do not impact your account’s maxQty or totalCollateral in the current SDK behavior.",
    "last_referenced_date": "2024-05-17T21:04:18"
  },
  {
    "question": "Is it possible to disable the edit-referral-code-split feature so that users cannot change their own rebate rates after a code is created?",
    "answer": "There is no built-in toggle to disable the edit-referral-code-split endpoint. While you can technically intercept or restrict these calls in your own backend to enforce fixed rebate options, the SDK/API does not currently offer a native setting to lock user rebate rates. You may need to implement custom guardrails in your application until an official feature is provided.",
    "last_referenced_date": "2024-05-21T10:41:20"
  },
  {
    "question": "What does the max_rebate_rate parameter represent when creating a referral code, and how does it relate to referrer_rebate_rate and referee_rebate_rate?",
    "answer": "max_rebate_rate is the total rebate pool you’re willing to share (as a decimal, e.g., 0.1 for 10%). It must equal the sum of referrer_rebate_rate and referee_rebate_rate. In other words:\n  max_rebate_rate = referrer_rebate_rate + referee_rebate_rate\nAll rebate values are specified as decimal fractions (e.g., 0.1 for 10%).",
    "last_referenced_date": "2024-07-03T02:54:34"
  },
  {
    "question": "What is the valid format for a referral_code when calling the create-referral-code API?",
    "answer": "The referral_code must be between 4 and 10 characters long and may include only uppercase letters (A–Z) and digits (0–9).",
    "last_referenced_date": "2024-07-04T09:43:14"
  },
  {
    "question": "Who is responsible for calling the bind-referral-code API to associate a user with a referral code—the broker admin or the end user?",
    "answer": "Binding a referral code is done by the end user, not the broker admin. Your frontend should prompt the user to enter the code and then call the private bind-referral-code endpoint authenticated with the user’s own Orderly key so it attaches to their account.",
    "last_referenced_date": "2024-06-26T15:40:12"
  },
  {
    "question": "How can I query withdrawal history and status directly from the Orderly backend database?",
    "answer": "You can run these SQL queries:\n1. Find the user’s internal user_id:\n   `SELECT id FROM orderly_user WHERE user_address = '<user_wallet_address>';`\n2. Fetch that user’s transactions:\n   `SELECT * FROM wallet_transaction WHERE user_id = <user_id> AND side = 2;`  \n   (Here, side=1 is deposit, side=2 is withdrawal.)  \nCheck the `trans_status` column: a value of `CONFIRMED` means the withdrawal is processed by Orderly’s system but has not yet been sent on-chain (i.e., is delayed).",
    "last_referenced_date": "2024-06-13T23:22:42"
  },
  {
    "question": "How can I retrieve historical trading volume by trading pair via Orderly’s API, and is there a breakdown by blockchain chain as well?",
    "answer": "Orderly does not provide volume broken down by chain, but you can fetch historical volume by pair using the private REST endpoint GET /v1/volume/kline (also documented as get-kline). To get daily volume, call it with interval=’1d’ and the desired symbol. For example:\n\nGET https://api-evm.orderly.org/v1/volume/kline?symbol=PERP_ETH_USDC&interval=1d&start_time=...&end_time=...\n\nThis returns OHLC bars including a volume field for each day; there is no separate chain-level volume endpoint.",
    "last_referenced_date": "2024-05-13T20:54:16"
  },
  {
    "question": "Who is allowed to transfer a broker admin wallet’s ownership on Orderly, and can the current admin perform that transfer?",
    "answer": "Only the Orderly team can change the registered broker admin wallet. The current admin wallet cannot transfer or delegate that role via API or UI; you must contact Orderly support to have the admin address updated.",
    "last_referenced_date": "2024-05-22T09:32:55"
  },
  {
    "question": "What is the average time it takes for a PnL settlement request to complete on Orderly?",
    "answer": "Once a user requests to settle PnL, the settlement should complete within about one minute under normal conditions.",
    "last_referenced_date": "2024-05-24T13:57:06"
  },
  {
    "question": "Which signing library and adapter does the Orderly trading page use for EIP-712 messages when calling window.ethereum.request with eth_signTypedData_v4?",
    "answer": "The Orderly trading page uses whichever Web3 adapter you configure—either ethers.js or web3.js—but by default the SDK’s core wallet adapter is built on ethers.js. You can inspect the adapter in the `@orderly.network/core` package at `packages/core/src/wallet/etherAdapter.ts` for details.",
    "last_referenced_date": "2024-05-28T21:39:39"
  },
  {
    "question": "Why am I getting an execution reverted error (CALL_REVERTED) when attempting to deposit USDC via Orderly’s vault on Polygon?",
    "answer": "Polygon deposits are restricted to certain brokers due to business agreements. If your broker_id is not authorized for Polygon vaults, deposit calls will revert. You’ll need to use one of the supported chains (Arbitrum, Optimism, Base, Mantle) or ask Orderly about enabling Polygon for your broker.",
    "last_referenced_date": "2024-05-28T20:56:03"
  },
  {
    "question": "How do I fix the error “Chain with chainId: 5000 and chainNamespace: evm has not been set” when initializing the Orderly React SDK?",
    "answer": "Upgrade your `@orderly.network` packages to version 1.5.7 or later. This release adds the Mantle chain configuration (chainId 5000) so you won’t see the “chain not set” error.",
    "last_referenced_date": "2024-05-29T13:20:42"
  },
  {
    "question": "How can I disable or whitelist specific EVM chains in the Orderly React SDK or TradingPage component?",
    "answer": "Use the `chainFilter` prop on `OrderlyConfigProvider` (or `OrderlyAppProvider` / `TradingPage`). First import the chain objects from `@orderly.network/types`, for example:\n\nimport { Arbitrum, Optimism } from '@orderly.network/types';\n\nThen configure:\n\n<OrderlyConfigProvider\n  chainFilter={{ mainnet: [Arbitrum, Optimism], testnet: [] }}\n>\n  {children}\n</OrderlyConfigProvider>\n\nThis limits the displayed chains to only those you include.",
    "last_referenced_date": "2024-05-29T14:12:10"
  },
  {
    "question": "Can the Orderly team settle PnL and transfer the resulting funds to a user’s address on their behalf?",
    "answer": "No. Orderly support can help debug settlement issues, but they cannot perform PnL settlement or fund transfers on behalf of users. Each user must trigger settlement and sign the transaction themselves.",
    "last_referenced_date": "2024-05-28T08:53:42"
  },
  {
    "question": "How can I integrate an external wallet provider (e.g., Magic.link) with Orderly’s prebuilt TradingPage component without rewriting the entire frontend?",
    "answer": "Implement a custom Wallet Connection Provider as documented under “Custom Wallet Connection Provider” in the React SDK docs: https://orderly.network/docs/sdks/react/wallet#custom-wallet-connection-provider. TradingPage and all other components consume the connection from that provider, so once you supply your own adapter (Magic.link or another EIP-1193 provider), the TradingPage will use it automatically.",
    "last_referenced_date": "2024-08-22T20:13:30"
  },
  {
    "question": "Which public API endpoints should I call to integrate Orderly’s bi-weekly $ORDER emissions and display users’ earned rewards?",
    "answer": "Use these public REST endpoints:\n• GET /v1/public/get-current-epoch-estimate – to fetch the current trading rewards epoch details.\n• GET /v1/public/get-account-trading-rewards-history – to retrieve a user’s past rewards by epoch.\n• GET /v1/public/get-wallet-trading-rewards-history – to fetch total and claimed rewards for an address over time.\n\nThese endpoints let you show users how much $ORDER they’ve earned and their reward history.",
    "last_referenced_date": "2024-09-06T07:36:33"
  },
  {
    "question": "How can I fetch a user’s total and claimable $ORDER trading rewards via API or smart contract?",
    "answer": "1. To get the cumulative rewards for an address, call the public endpoint GET /v1/public/get-wallet-trading-rewards-history.  \n2. To find out how much the user has already claimed, call the `getClaimed(distributionId, userAddress)` read function on the staking proxy contract (e.g., at 0x7819704B69a38fD63Cc768134b8410dc08B987D0). Use `_distributionId = 0` for $ORDER rewards or `2` for $esORDER rewards.\n\nBy comparing total rewards from the API with the claimed amount from the contract, you can compute the user’s outstanding claimable balance.",
    "last_referenced_date": "2024-09-24T15:06:53"
  },
  {
    "question": "Can I add custom logic or restrictions to the referral bind API so that users can only bind a referral code if they haven’t traded yet?",
    "answer": "No. The built-in bind-referral-code API does not support conditional logic based on trading activity. If you need to enforce that only non-traded users can bind a code, you must implement that check on your frontend or backend before calling the bind API.",
    "last_referenced_date": "2024-06-12T09:31:58"
  },
  {
    "question": "What information do I need to provide to set up a new broker ID on Orderly for our DEX (e.g., yum-my), and how does the fee structure work?",
    "answer": "When creating a broker ID you must supply:\n1. Broker ID: your chosen identifier (e.g., “yummy”).\n2. Broker Name: your display name (e.g., “Yummy”).\n3. Default Taker Fee Rate: the total taker fee you want charged (decimal form, e.g., 0.06 for 6 bps). Orderly’s base taker fee is 0.03%, so in this example you earn the extra 0.03%.\n4. Default Maker Fee Rate: the total maker fee you want (decimal form, e.g., 0.03 for 3 bps). Orderly’s base maker fee is 0%, so you earn the full 0.03%.\nThese defaults can be changed later once your admin wallet is set up. Orderly keeps its base fees (0.03% taker, 0% maker) and passes 100% of any excess to your broker account.",
    "last_referenced_date": "2025-03-28T09:15:54"
  },
  {
    "question": "After my broker ID has been created, how do I register and configure the admin wallet—on mainnet and optionally on testnet—so it can collect fees and access private APIs?",
    "answer": "Once your broker ID (e.g., “yummy”) is active, register the admin wallet by visiting the broker-registration web UI at https://orderlynetwork.github.io/broker-registration/. Connect the EOA address you wish to use as admin. You can register one address per environment; testnet registration is optional but recommended for testing. After you submit the address, inform the Orderly tech team so they can finalize the assignment. This admin wallet will collect all broker fee rebates and have exclusive access to private endpoints such as referral code management and custom fee updates.",
    "last_referenced_date": "2025-03-31T09:20:53"
  },
  {
    "question": "Do I need a broker_id to integrate on testnet, and can I use any existing broker_id before my own is set up?",
    "answer": "Yes. To send orders, register accounts, and call authenticated endpoints you need a broker_id. Until your own broker_id (“prime_protocol”) is configured, you can use any available broker_id returned by the public endpoint GET /v1/public/get-broker-list on the testnet API base URL.",
    "last_referenced_date": "2024-03-30T18:45:58"
  },
  {
    "question": "Who do I request access from for the TradingView Advanced Charts library when rendering the full trading page via the Components SDK?",
    "answer": "Apply directly on TradingView’s site for the Advanced Charts library by filling out the request form at tradingview.com/advanced-charts. Once approved (in this case access was already set up), you can host the charting_library files and configure your TradingPage’s tradingViewConfig accordingly.",
    "last_referenced_date": "2024-03-31T22:51:38"
  },
  {
    "question": "Will the Orderly React Hooks SDK and Components SDK be maintained going forward, and will I run into data‐fetch rate limiting issues when using them?",
    "answer": "Yes—the hooks and components packages are maintained in perpetuity and backward compatible. You should not encounter rate-limit errors in normal retail usage; no additional rate-limit configuration is needed on your end.",
    "last_referenced_date": "2024-04-01T22:46:36"
  },
  {
    "question": "What approvals or configurations are required before testing on mainnet? Do I need to specify an admin wallet now or later?",
    "answer": "For basic integration (orders, account registration) you only need a broker_id. To receive fee rebates and to access broker-admin–scoped endpoints (custom fees, referrals), you must register an admin wallet (an EOA) under your broker_id via the broker-registration UI. You can do this later, but you won’t see daily rebates until that wallet is registered.",
    "last_referenced_date": "2024-04-01T22:48:17"
  },
  {
    "question": "Where do I find the accountId, api_key (public key), and api_secret (private key) in the browser when using the Orderly SDK for admin API calls?",
    "answer": "They’re stored in localStorage under the key `orderly_mainnet_<chain>`. The `accountId` field is your `orderly_account_id`, and the `orderlyKey` value is the private key (api_secret). To derive your api_key (the public key), use your keystore instance’s `getOrderlyKey(walletAddress)` method followed by `keyPair.getPublicKey()`, or use ethers.js + @noble/ed25519 with base58 decoding.",
    "last_referenced_date": "2024-06-06T07:27:00"
  },
  {
    "question": "Does having the `orderlyKey` (api_secret) and accountId grant someone the ability to withdraw funds from the admin wallet?",
    "answer": "No. On-chain withdrawals require a signed blockchain transaction by the EOA private key. The `orderlyKey` only signs off-chain EIP-712 messages for API calls; it cannot by itself execute on-chain withdrawals.",
    "last_referenced_date": "2024-06-06T04:20:14"
  },
  {
    "question": "What fee split is currently configured between Orderly and Prime Protocol, and how often are fees distributed?",
    "answer": "Orderly keeps its base fees of 3 bps on taker trades and 0 bps on maker trades. Prime Protocol has been configured to charge 6 bps taker and 3 bps maker fees (the excess over Orderly’s base goes 100 % to your broker). Fee rebates are aggregated and credited to your registered admin wallet once per day, around midnight UTC.",
    "last_referenced_date": "2024-04-26T21:15:40"
  },
  {
    "question": "If I need to update the wallet address that receives broker fee rebates, how can I do this? Can I change it myself or must it be done through Orderly?",
    "answer": "You must register the new wallet address under your broker_id via the standard account registration flow and then notify the Orderly team. They will assign that address as your new broker admin wallet; it cannot be changed via API alone by you.",
    "last_referenced_date": "2024-06-04T14:43:08"
  },
  {
    "question": "Is Mantle chain support available in the current Orderly SDK, or do I need to wait for a new version?",
    "answer": "Mantle support has been added to the SDK. You can integrate Mantle via the existing React Hooks and Components SDK packages (the team confirmed it’s working and you can include it immediately).",
    "last_referenced_date": "2024-06-04T14:42:22"
  },
  {
    "question": "Why are withdrawals taking longer than expected (e.g., ~100 minutes), and what caused the delay?",
    "answer": "A recent uptick in on-chain activity—driven by the merits epoch closing—caused a backlog in the cross-chain withdrawal relayer. As a result, delays of around 100 minutes have been observed. Under normal conditions, withdrawal finality is much faster.",
    "last_referenced_date": "2024-06-12T21:21:33"
  },
  {
    "question": "How much NEAR should I attach to cover storage when using the deposit_and_create_order on-chain swap method?",
    "answer": "You only need to attach around 0.1 NEAR to cover the storage deposit for on-chain swaps when calling `deposit_and_create_order`.",
    "last_referenced_date": "2023-06-28T13:51:51"
  },
  {
    "question": "How long does it typically take to withdraw funds from the vault contract after an on-chain swap, and what causes delays?",
    "answer": "Withdrawals normally finalize in a couple of seconds once the off-chain indexer catches up. Delays of several minutes can occur if the off-chain infrastructure (indexer or settlement service) is lagging behind.",
    "last_referenced_date": "2023-06-28T19:38:30"
  },
  {
    "question": "Why does `get_onchain_order_fee` return zero for all tokens except NEAR, and do I need to adjust my deposit amount when swapping fungible tokens on-chain?",
    "answer": "For NEAR swaps, `deposit_and_create_order` automatically deducts the on-chain fee in NEAR. For FT tokens (e.g., USDC.e), the fee is not auto-charged by `deposit_and_create_order`. You must manually include the on-chain order fee (queried via the vault contract’s fee method) in your transfer amount by sending `order_amount + onchain_order_fee` tokens in the `ft_on_transfer` call.",
    "last_referenced_date": "2023-07-01T06:40:26"
  },
  {
    "question": "Which API can I use to fetch all users and their trading turnover for a global Orderly leaderboard?",
    "answer": "There is no dedicated global leaderboard endpoint today. You can use the private REST endpoint `GET /v1/private/get-builders-users-volumes` (per broker) to retrieve daily trading volumes per account. Orderly is building a script to aggregate truly global user lists and turnover on-chain, but no public API is available yet.",
    "last_referenced_date": "2023-09-12T04:10:34"
  },
  {
    "question": "In execution-report data, how do I interpret the `symbol` and `executed_quantity` fields for BUY vs SELL trades?",
    "answer": "The `symbol` remains `SPOT_<base>_<quote>` (e.g., `SPOT_ETH_USDC`) regardless of side. The `executed_quantity` always represents the base-asset amount (ETH in this case). To compute the quote volume (USDC), multiply `executed_quantity` by `executed_price`.",
    "last_referenced_date": "2023-09-12T05:36:36"
  },
  {
    "question": "Is there an API to retrieve logs of all failed operations (e.g., on-chain swap failures) from Orderly?",
    "answer": "Not currently. There is no REST endpoint that returns a history of failed operations. The team is exploring adding this feature but it is not yet available.",
    "last_referenced_date": "2023-08-24T09:02:23"
  },
  {
    "question": "How can I fetch historical price bars for integrating TradingView charts in my custom UI using Orderly Network?",
    "answer": "Use the public REST endpoint GET /v1/public/get-tradingview-history-bars. It returns OHLC price bars formatted for TradingView integrations. You can call this endpoint directly in your UI to populate your TradingView chart component.",
    "last_referenced_date": "2024-09-23T06:37:53"
  },
  {
    "question": "Is there a starter code example for building a custom trading frontend with the React Hooks SDK, since I need to add features (like a delta-neutral button) beyond the prebuilt Components SDK?",
    "answer": "Yes. We recommend the example-dex repository, which demonstrates how to build a trading UI from scratch using the Hooks SDK: https://github.com/OrderlyNetwork/example-dex. It shows how to wire up hooks like useOrderEntry and usePositionsStream and gives you full control to add custom components such as a delta-neutral button.",
    "last_referenced_date": "2024-10-02T08:38:59"
  },
  {
    "question": "Where can I find the source code for the main TradingPage component in the Orderly JavaScript SDK so I can import and customize individual UI components?",
    "answer": "The TradingPage implementation is in the js-sdk monorepo here:\nhttps://github.com/OrderlyNetwork/js-sdk/blob/main/packages/trading/src/pages/trading/trading.page.tsx\nYou can install the individual component packages and import any standalone components from this repo into your own project for deeper customization.",
    "last_referenced_date": "2025-02-10T07:04:38"
  },
  {
    "question": "Why do I see the “Please connect to a supported chain” message after refreshing or when signing in with the Orderly React SDK, and how can I resolve it?",
    "answer": "This is a known minor bug in the SDK. When the “Please connect to a supported chain” prompt appears after a refresh, simply click the “Switch Chain” button and then reconnect to the same chain you’re already on (for example, Arbitrum). That clears the stale state and removes the error.",
    "last_referenced_date": "2024-10-07T17:26:25"
  },
  {
    "question": "I’m trying to connect a Solana wallet via MetaMask Snap in the MetaMask mobile browser and get an “account id undefined” error. Which wallet and network should I use to trade on Orderly?",
    "answer": "MetaMask Snap (e.g., Solflare Snap) is designed for Solana and is not yet supported by Orderly’s EVM trading UI. To trade perpetuals you must use the official MetaMask extension or mobile app from metamask.io – that version supports EVM chains. Solana deposits are live on testnet only for now; mainnet support for Solana will be added in a future release.",
    "last_referenced_date": "2024-10-28T06:14:44"
  },
  {
    "question": "My MetaMask connection on desktop is failing or extremely slow when I’m using ProtonVPN Free. What troubleshooting steps should I take to restore connectivity to Orderly?",
    "answer": "Free VPN services like ProtonVPN Free can throttle connections or trigger IP-based restrictions. To troubleshoot:\n1. Disable your VPN or switch to a paid/private VPN endpoint.\n2. Remove any extra wallet extensions or browser add-ons (only keep the official MetaMask extension).  \n3. Clear your browser cache and reset settings to default (e.g., in Chrome: Settings > Reset settings → Restore settings to their original defaults).  \n4. Reinstall the official MetaMask extension/app and reload the Orderly UI.",
    "last_referenced_date": "2024-10-28T09:58:49"
  },
  {
    "question": "Can I transfer funds internally between two of my Orderly accounts on different chains (e.g., EVM → Solana) without on-chain withdraw and re-deposit, and how do I call that API?",
    "answer": "Yes. Orderly supports internal transfers via the private REST endpoint POST /v1/private/create-internal-transfer. Authenticate with your broker’s Orderly API key, and send a JSON payload like:\n{\n  \"token\": \"USDC\",\n  \"receiver_list\": [\n    {\"account_id\": \"<target_account_id>\", \"amount\": \"<quantity>\"}\n  ]\n}\nThis moves funds off-chain between accounts without incurring on-chain gas. Note that the front-end UI for cross-chain internal transfers may not be live yet, so you need to call this endpoint directly.",
    "last_referenced_date": "2025-01-22T13:26:11"
  },
  {
    "question": "Which public REST API endpoint should I call instead of GET /v1/public/futures/{symbol} to retrieve market info for all trading pairs and avoid per‐symbol rate limits?",
    "answer": "Use the public endpoint GET /v1/public/get-market-info-for-all-trading-pairs. This returns market info (price, open_interest, 24h_volume, etc.) for every symbol in one call, instead of fetching each symbol individually.",
    "last_referenced_date": "2024-05-18T22:12:39"
  },
  {
    "question": "Which private REST API endpoint returns historical PnL data, including both realized and unrealized PnL, that I can use to build a user’s portfolio performance chart?",
    "answer": "Call GET /v1/private/get-user-daily-statistics. Its response includes daily statistics for each date, with a `pnl` field that sums realized and unrealized PnL.",
    "last_referenced_date": "2024-05-20T09:35:55"
  },
  {
    "question": "How can I let my users enter their desired trade size in USD for short orders, and how do I compute the corresponding base-asset quantity?",
    "answer": "Use the formula:\n\nquantity (base asset) = amountUSD ÷ price\n\nFirst get the current market price for the symbol, then divide the user’s USD amount by that price to derive the order quantity in the base asset.",
    "last_referenced_date": "2024-06-08T16:03:01"
  },
  {
    "question": "Which public REST API endpoint returns the Merits leaderboard or trading points rankings?",
    "answer": "Use GET /v1/public/get-points-leaderboard under the Public EVM API. It returns the ranking of users by points for the current or past epochs.",
    "last_referenced_date": "2024-06-10T06:20:16"
  },
  {
    "question": "Is native perpetual trading on Orderly available directly on Polygon, or only through partner UIs like WOOFi and Quick Perp?",
    "answer": "Orderly does not offer a direct Polygon integration. Perpetual trading with Orderly on Polygon is only accessible via partners—namely the WOOFi Pro and Quick Perp interfaces.",
    "last_referenced_date": "2024-06-10T11:12:42"
  },
  {
    "question": "Where can I find the React Hooks SDK documentation for updating my account’s max leverage and retrieving the estimated liquidation price for positions?",
    "answer": "• To update max leverage: use the useLeverage hook. See https://orderly.network/docs/sdks/hooks/account/use-leverage\n• To get the estimated liquidation price: read `est_liq_price` from the state returned by usePositionStream. See https://orderly.network/docs/sdks/hooks/positions/use-position-stream",
    "last_referenced_date": "2024-06-30T14:32:34"
  },
  {
    "question": "Which API endpoints should I call to fetch TradingView‐compatible historical price bars and to programmatically request PnL settlement?",
    "answer": "• Historical chart data: GET /v1/public/get-tradingview-history-bars (under Public EVM API → get-tradingview-history-bars)\n• PnL settlement: POST /v1/private/request-pnl-settlement (first call Get Settle PnL Nonce then use that nonce in this request). See https://orderly.network/docs/build-on-evm/evm-api/restful-api/private/request-pnl-settlement",
    "last_referenced_date": "2024-07-06T04:04:11"
  },
  {
    "question": "How can I retrieve the average execution price (entry price) for previously filled orders when using the useOrderStream hook?",
    "answer": "Filled orders returned by useOrderStream include an `average_executed_price` (or `avg_price`) field. Limit orders also include a `price` field, but for completed fills read the `average_executed_price` from each order object.",
    "last_referenced_date": "2024-07-22T19:25:32"
  },
  {
    "question": "Can I integrate the Privy wallet provider with Orderly’s React SDK, and are there any limitations or upcoming official connectors to be aware of?",
    "answer": "Yes. To use Privy with Orderly, implement a custom WalletAdapter and provider in your OrderlyProvider (replace the default EthersProvider). On EVM chains it works immediately; for Solana you must account for adapter differences. An official Privy connector for Solana is in development and expected by end of February.",
    "last_referenced_date": "2025-01-30T09:58:05"
  },
  {
    "question": "I’m a market maker in Orderly’s MM Reward Program and need to track my daily maker volume and market share. How can I access this information regularly?",
    "answer": "As a qualified market maker, you can receive a daily trading report by email. Contact our team with your email address(es) and we’ll send your maker volume ratios and market share averages each day from mmreports@orderly.network.",
    "last_referenced_date": "2024-09-13T05:49:53"
  },
  {
    "question": "If I place an algo order using place_algo_order with Take-Profit and Stop-Loss legs, will I receive the maker fee rebate or incur a fee?",
    "answer": "TP/SL exit orders execute as taker trades when they trigger, so they incur the taker fee—you will not receive a maker rebate on those legs.",
    "last_referenced_date": "2024-09-14T04:10:50"
  },
  {
    "question": "I submitted a USDC deposit transaction via MetaMask on Arbitrum (Tx 0x30d8e80795fb49732025da36a5e167936266e24ed3396d55127e5de5c0f1562e) and it confirmed on-chain, but my Orderly account balance did not increase. Why wasn’t it credited?",
    "answer": "Your deposit went to your own wallet address (0x3e029d738dccbbf2c688ea95056b349b54fbf521) rather than the Orderly vault contract. To deposit, send USDC to the vault contract address, not to your EOA.",
    "last_referenced_date": "2024-09-24T12:34:49"
  },
  {
    "question": "How can I retrieve the list of positions currently eligible for liquidation via Orderly’s API?",
    "answer": "Call the public REST endpoint GET /v1/public/get-positions-under-liquidation. It returns the positions that have reached liquidation threshold and are open for anyone to claim as liquidator.",
    "last_referenced_date": "2024-10-04T05:08:49"
  },
  {
    "question": "In my market-making setup I have two separate applications subscribing to the same WebSocket orderbook topic under one account. Will this cause any issues?",
    "answer": "Both applications will receive each orderbook update, but because they process messages independently you can encounter race conditions. It works technically, but having multiple subscribers managing the same data stream is not recommended.",
    "last_referenced_date": "2024-10-28T09:34:16"
  },
  {
    "question": "Is Binance Smart Chain (BNB) support coming to Orderly’s perpetuals DEX, and how can I allow users to deposit from BNB before native integration?",
    "answer": "BNB support is on the horizon, and some brokers already enable BNB deposits today by integrating a cross-chain bridge feature that swaps BNB-chain USDC into one of Orderly’s native vaults. For example, WOOFi Pro uses its cross-chain swap to deposit USDC into Orderly on another chain. You can integrate a similar bridge or swap service in your DEX frontend to allow BNB-chain deposits while the official BNB vault is being deployed.",
    "last_referenced_date": "2025-04-02T15:22:36"
  },
  {
    "question": "How do I fix Solana wallet connection errors (e.g., \"wrong network\" or \"account id undefined\") when using Phantom with the Orderly React SDK?",
    "answer": "Ensure your Orderly React SDK packages are all pinned to the same latest version (e.g., 2.0.7) and add the recommended network configuration line in your `WalletConnectorProvider`. See the broker-template example at:\nhttps://github.com/OrderlyNetwork/broker-template/blob/main/app/components/orderlyProvider/index.tsx#L30\nThis ensures the SDK detects Solana correctly and resolves the Phantom connection error. After upgrading and pinning versions, rebuild and reconnect—Solana wallets will then work as expected.",
    "last_referenced_date": "2025-04-07T06:40:42"
  },
  {
    "question": "Which API endpoint can we use to retrieve builder data such as per-user trading volumes for our internal dashboard?",
    "answer": "Call the private REST endpoint GET /v1/private/get-builders-users-volumes (documented under “Build on Omnichain → EVM API → RESTful API → Private → get-builders-users-volumes”) authenticated with your broker’s Orderly API key. It returns daily trading volume records per account linked to your broker_id. No additional setup is required from your side beyond having a registered broker ID and admin key.",
    "last_referenced_date": "2025-04-09T06:17:50"
  },
  {
    "question": "Is there a public API to fetch trending tokens data or token volume programmatically?",
    "answer": "Orderly does not provide a dedicated API for trending tokens. Instead, use the Orderly Dune Analytics dashboard (https://dune.com/orderly_network/orderly-dashboard) and its public queries (for example, https://dune.com/queries/3582801/6033451) to retrieve token volume and trending token data.",
    "last_referenced_date": "2025-04-09T08:55:00"
  },
  {
    "question": "What are the theme and shareOptions props on OrderlyAppProvider, and where can I find documentation to configure them?",
    "answer": "In the latest @orderly.network/react v1.3+ release the OrderlyAppProvider requires two new props:  \n• theme: Controls CSS theme variables for the components (currently undocumented).  \n• shareOptions: Configuration for PnL-sharing images (e.g., colors, layout) used by the shareable PnL card.  \nUnfortunately the official Components SDK docs are still incomplete. You can preview the (slightly outdated) components docs here: https://sdk.orderly.network/components  \nFor now, inspect the js-sdk-demo example to see how shareOptions is passed in: https://github.com/OrderlyNetwork/js-sdk-demo/blob/main/app/perp/[symbol]/view.tsx  \n",
    "last_referenced_date": "2024-04-24T07:06:25"
  },
  {
    "question": "Which hook allows me to fetch a full list of all active perpetual symbols supported by Orderly (e.g., PERP_ETH_USDC, PERP_BTC_USDC)?",
    "answer": "Use the hooks SDK’s market-data hooks:  \n• useMarkets (https://orderly.network/docs/sdks/hooks/market-data/use-markets) returns detailed info on every market symbol.  \n• For a simpler, lightweight list of symbol identifiers, use useSymbolsInfo (https://orderly.network/docs/sdks/hooks/market-data/use-symbols-info) which is optimized for symbol selection screens.",
    "last_referenced_date": "2024-04-25T11:01:15"
  },
  {
    "question": "Why is wallet sign-in failing in my Orderly React SDK app after connecting the wallet on testnet, and how can I fix it?",
    "answer": "Sign-in failures usually mean your SDK configuration’s networkId doesn’t match your environment. In your TradingPage you either have two providers (OrderlyConfigProvider + OrderlyAppProvider) or the wrong networkId hardcoded to mainnet. To fix:  \n1. Remove OrderlyConfigProvider if you’re using OrderlyAppProvider (only one is needed).  \n2. Set networkId to \"testnet\" for your testnet build, or \"mainnet\" for production, matching where your brokerId is registered.  \n3. Ensure your brokerId is configured for that environment.  \nAfter that, reconnect your wallet and retry sign-in.",
    "last_referenced_date": "2024-04-26T10:37:29"
  },
  {
    "question": "How do I register my broker admin wallet as an Orderly account, and how does the system distinguish admin accounts from regular user accounts?",
    "answer": "Admin wallets use the same registration flow as normal users:  \n1. Call the private POST /v1/register_account endpoint (or use the broker-registration UI) with your broker_id and EOA address.  \n2. Generate and add your Orderly key via the AddOrderlyKey EIP-712 flow.  \nOrderly’s backend team will then mark that address as the broker admin on their side, granting access to private APIs (fee updates, referral admin) and directing broker fee rebates to it. You don’t need a separate endpoint—just inform Orderly once the address is registered so they can tag it as admin.",
    "last_referenced_date": "2024-04-29T11:55:10"
  },
  {
    "question": "Where do I obtain the verifyingContract address for the OFF_CHAIN_DOMAIN in EIP-712 authentication, and do I need to register my admin account separately per chain?",
    "answer": "Use the standard verifyingContract value published in the docs, e.g.:  \n```\nconst OFF_CHAIN_DOMAIN = {\n  name: \"Orderly\",\n  version: \"1\",\n  chainId: 421614,\n  verifyingContract: \"0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC\"\n};\n```\nThis contract address is the same across all supported EVM chains—no per-chain registration is required. The EIP-712 domain is chain-agnostic; you only register your admin account once and use it on any chain.",
    "last_referenced_date": "2024-04-29T12:06:48"
  },
  {
    "question": "What data must be included when generating the orderly-signature for private API requests, and how is the signature constructed when there are no request parameters?",
    "answer": "For EIP-712, always use your wallet’s private key. The orderly-signature covers your timestamp, HTTP method, and request path. When there are no request parameters, construct the message as:\n```\n{timestamp}{HTTP_METHOD}{PATH}\n```\nFor example, a GET to `/v1/volume/user/daily` signed at timestamp 1680000000000 becomes:  \n```\n1680000000000GET/v1/volume/user/daily\n```\nSign this payload per the API Authentication guide to produce the `orderly-signature` header.",
    "last_referenced_date": "2024-04-30T12:34:54"
  },
  {
    "question": "Why doesn’t testnet trading volume data match my transaction history, and in what units is volume reported?",
    "answer": "Testnet volume metrics (e.g., from GET /v1/private/get-builders-users-volumes) are refreshed once per day. If you’ve traded today, your volume may not appear until the next daily update. Volume is reported in USDC notional units.",
    "last_referenced_date": "2024-04-30T12:36:06"
  },
  {
    "question": "Why did I receive a small ETH refund after submitting a cross-chain USDC deposit on Arbitrum Sepolia, and how does the contract handle excess LayerZero fees?",
    "answer": "When you call the deposit function, you attach an ETH value to cover LayerZero cross-chain messaging fees. If you over-estimate and send more ETH than needed, the vault contract refunds the excess back to your wallet. That small ETH credit you see is the leftover after the actual message fee was deducted.",
    "last_referenced_date": "2024-05-14T08:21:41"
  },
  {
    "question": "Why did my deposit transaction revert on Arbitrum Sepolia testnet, and how can I avoid these rate-limit errors?",
    "answer": "Arbitrum Sepolia’s LayerZero relayer enforces a testnet message rate limit which can cause CALL_REVERTED errors on deposits. To work around this, switch to a different supported testnet (e.g., Optimism Sepolia, Polygon Mumbai, or Base Sepolia) until the LayerZero team increases the rate limits.",
    "last_referenced_date": "2024-05-14T08:59:09"
  },
  {
    "question": "Can the button text in the Orderly React Components SDK (e.g., \"Buy\", \"Short\") be customized to \"Long\" and \"Short\", and is there i18n support?",
    "answer": "Full text customization—including changing \"Buy\" to \"Long\"—will be supported once we roll out i18n for the Components SDK. An upcoming SDK update will enable you to override every UI string via localization configuration.",
    "last_referenced_date": "2024-06-05T08:53:36"
  },
  {
    "question": "Where can I find the localization (i18n) configuration in the Orderly SDK to customize UI text?",
    "answer": "The SDK does not yet support i18n. Text customization is planned for a future release, at which point you’ll be able to supply locale JSON files or theme overrides.",
    "last_referenced_date": "2024-05-03T05:25:04"
  },
  {
    "question": "How do I create a Market Maker (MM) account on Orderly and what information is required? How are my initial taker/maker fees and rate limits configured?",
    "answer": "MM accounts can only be created via the DMM portal at dmm.orderly.network. You must provide:\n• Account ID  \n• EVM wallet address  \n• IP address used for trading  \nOnce created, Orderly sets your account fees to taker:+2.5 bps and maker:–1.5 bps by default and configures a rate limit of 50 API calls per second. To remain eligible for maker rewards, you must maintain a maker volume ratio above 75%.",
    "last_referenced_date": "2025-03-03T08:56:33"
  },
  {
    "question": "Which cloud region hosts Orderly’s API servers, and do you offer colocation for lower latency?",
    "answer": "Orderly’s production API servers are hosted on Google Cloud in the Tokyo region. At this time, Orderly does not offer any colocation services or dedicated racks; all clients connect to the shared GCP Tokyo infrastructure.",
    "last_referenced_date": "2025-03-26T16:36:13"
  },
  {
    "question": "What are the API rate limits for creating and cancelling orders on Orderly, and how does the batch‐order endpoint factor in?",
    "answer": "Rate limits are enforced at the broker account level:\n• Up to 50 create-order requests per second  \n• Up to 50 cancel-order requests per second  \nWhether you use the single-order endpoints (`POST /v1/order`, `DELETE /v1/order`) or the batch endpoints (`POST /v1/batch-order`, `DELETE /v1/batch-order`), you may submit up to 50 orders (or cancellations) per second.",
    "last_referenced_date": "2025-03-27T09:52:36"
  },
  {
    "question": "Which public REST API endpoint returns the market‐maker leaderboard and how do I identify Q_final in its response?",
    "answer": "Call the public endpoint GET /v1/public/leaderboard-for-market-maker-rewards. In the JSON response, the field `est_score` corresponds to Q_final for each market maker.",
    "last_referenced_date": "2025-03-27T10:03:58"
  },
  {
    "question": "In the market-maker rewards calculation, what do the parameters “min depth” and “min spread” represent?",
    "answer": "• min depth: the minimum size (in USDC notional) that an individual order must reach on one side for that order to count toward eligibility; orders below this threshold are excluded.  \n• min spread: the minimum distance (in bps) from the mid‐price at which you must post an order on a single side (i.e., distance from mid to your bid or ask), not the full bid‐ask spread.",
    "last_referenced_date": "2025-03-28T10:26:15"
  },
  {
    "question": "Is the high‐tier (5%+) market‐maker reward pool publicly visible, and how is that reward calculated?",
    "answer": "The 500,000-$ORDER high‐tier reward allocation (for makers maintaining ≥ 5% maker share) is intentionally not exposed publicly. Its calculation is simple: each eligible maker’s share of that pool is proportional to their maker volume relative to the sum of all eligible makers’ volumes. Rewards are tallied and distributed at the end of each 14-day epoch.",
    "last_referenced_date": "2025-03-28T08:55:29"
  },
  {
    "question": "Does Orderly support the Solana chain, which perpetual symbols are available, and which wallet providers does the platform support?",
    "answer": "Orderly supports trading on Solana as a perpetual DEX. It offers many perpetual symbols—you can see the full list and live liquidity on https://demo.orderly.network. The SDK and UIs support mainstream Solana wallets, including Phantom and OKX Wallet.",
    "last_referenced_date": "2025-03-31T08:11:50"
  },
  {
    "question": "Where can I find documentation describing the overall integration flow for Orderly?",
    "answer": "Orderly publishes an integration guide in English at the Omnichain docs: https://orderly.network/docs/build-on-omnichain/building-on-omnichain. It covers account setup, API authentication, deposits, trading, and withdrawals.",
    "last_referenced_date": "2025-03-31T08:18:28"
  },
  {
    "question": "How do I get started integrating Orderly, and is the demo front-end code available?",
    "answer": "You can start by exploring our open-source demo front end: clone the js-sdk-demo repository at https://github.com/OrderlyNetwork/js-sdk-demo. It shows end-to-end integration using the React SDK and Hooks SDK.",
    "last_referenced_date": "2025-03-31T08:27:08"
  },
  {
    "question": "Where can I find the API documentation to fetch data and support leveraged trading on Orderly?",
    "answer": "All public and private REST and WebSocket API details are documented in the Omnichain API docs at https://orderly.network/docs/build-on-omnichain/building-on-omnichain. That guide includes endpoints for market data, account info, order creation, and more.",
    "last_referenced_date": "2025-03-31T08:34:49"
  },
  {
    "question": "Can the same wallet address create multiple accounts under different broker IDs on Orderly, and will a previously created Phantom-based account be reused or associated?",
    "answer": "Each wallet address yields a distinct Orderly account under each broker ID. Accounts are isolated per broker, so even if a user already registered with Phantom under one broker, they’ll get a new account under another broker ID.",
    "last_referenced_date": "2025-03-31T10:57:56"
  },
  {
    "question": "After a user account is created and funded on Orderly, can I execute trades by calling the create-order API, and do those trades require wallet signatures?",
    "answer": "Once an Orderly account is registered and funded, you can place buy or sell orders by directly calling the create-order endpoint. No additional wallet signature is required for each trade.",
    "last_referenced_date": "2025-03-31T11:00:50"
  },
  {
    "question": "Does user registration via the register_account API require a wallet signature verification step, or can I register by simply passing the required parameters?",
    "answer": "User registration does not require a wallet signature. You can call the register_account API with the brokerId, chainId, chainType, timestamp, registrationNonce, and userAddress without additional on-chain signing.",
    "last_referenced_date": "2025-03-31T15:23:38"
  },
  {
    "question": "Where can I find the API logic and endpoints for depositing tokens into a newly created Orderly account?",
    "answer": "The deposit and withdrawal flows are detailed in the user-flows guide: https://orderly.network/docs/build-on-omnichain/user-flows/withdrawal-deposit. It shows how to call the vault contract via the SDK or REST API to deposit USDC and check fees.",
    "last_referenced_date": "2025-04-01T03:58:38"
  },
  {
    "question": "Is there any fee for opening an enterprise account to integrate with Orderly beyond the stated base trading fees?",
    "answer": "No. There are no additional fees to open an enterprise or builder account. The only fees are the base taker fee (3 bps) and maker fee (0 bps) retained by Orderly, plus any custom fees you choose to charge on top.",
    "last_referenced_date": "2025-04-01T10:21:00"
  },
  {
    "question": "How do I integrate staking functionality for $ORDER when there are no dedicated API docs, and what on-chain steps and contracts are involved?",
    "answer": "Staking is entirely on-chain via the ORDER proxy contract. No REST/SDK docs exist. Use these steps:\n1. Approve the ORDER token (0x4E200fE2f3eFb977d5fd9c430A41531FB04d97B8) for the proxy contract (0xC8A8Ce0Ab010E499ca57477AC031358febCbbF17).  \n2. Call the view function quoteStakeOrder(amount, userAddress) on the proxy to fetch the LayerZero messaging fee.  \n3. Call stakeOrder(amount) on the proxy contract, attaching the quoted fee as value (many UIs multiply by ~1.1 as a buffer).",
    "last_referenced_date": "2024-09-30T07:30:28"
  },
  {
    "question": "How can I generate or locate the ORDERLY_SECRET required for EVM API authentication?",
    "answer": "You must generate your own ed25519 keypair for Orderly and extract the secret. Follow the wallet authentication flow in the docs under “User Flows → Wallet Authentication → Orderly Key”: https://orderly.network/docs/build-on-evm/user-flows/wallet-authentication#orderly-key. That guide shows how to produce and retrieve your ORDERLY_SECRET.",
    "last_referenced_date": "2024-10-04T12:08:04"
  },
  {
    "question": "What information do I need to provide to set up a new broker ID (for example “blazpay”) in Orderly’s EVM integration?",
    "answer": "To register a broker ID, supply:\n• brokerId: your chosen identifier (e.g., “blazpay”)  \n• brokerName: the display name (e.g., “Blazpay”)  \n• defaultTakerFeeRate: decimal taker fee (e.g., 0.06 for 6 bps total; Orderly keeps 3 bps)  \n• defaultMakerFeeRate: decimal maker fee (e.g., 0.03 for 3 bps total; Orderly keeps 0 bps)  \nYou can adjust these fees later once your admin wallet is configured.",
    "last_referenced_date": "2024-10-09T09:22:28"
  },
  {
    "question": "Is Polygon supported for deposits and trading on Orderly, and where can I find the list of supported networks?",
    "answer": "Polygon is not available due to an exclusive integration agreement. Orderly currently supports Ethereum, Arbitrum, Optimism, Base, and Mantle for native USDC deposits and trading. See the supported-chain list in the docs under “Building on EVM → Smart Contract Addresses” or via GET /v1/public/get-vault-chain-config.",
    "last_referenced_date": "2024-10-09T09:30:56"
  },
  {
    "question": "Which API endpoint returns the full orderbook snapshot with liquidity per price level?",
    "answer": "Call the private REST endpoint GET /v1/private/orderbook-snapshot on your authenticated API base URL. Its response includes bid and ask levels with quantities at each price point.",
    "last_referenced_date": "2024-10-14T10:25:55"
  },
  {
    "question": "Why do I get `account does not exist` when calling addOrderlyKey on testnet even though I registered my account, and how do I fix it?",
    "answer": "That error means you’re hitting the wrong environment. Your account is only registered on mainnet, but you called the testnet API. Either register the same wallet on testnet or switch your calls to the mainnet base URL (https://api-evm.orderly.org) when adding the ORDERLY key for your mainnet account.",
    "last_referenced_date": "2024-10-10T10:36:56"
  },
  {
    "question": "I get a TypeError “Cannot read properties of undefined (reading 'get')” in useConfig when rendering TradingView charts in the EVM React Components SDK. What is causing this and how do I fix it?",
    "answer": "This error happens because you are mixing SDK v1 and v2 packages, which are incompatible. To resolve it, use SDK v2 exclusively by installing only the v2 alpha builds of @orderly.network/react and @orderly.network/hooks and follow the Next.js template example (https://github.com/OrderlyNetwork/orderly-js-sdk-nextjs-template). Also configure a custom wallet connection provider per the React SDK docs under “Custom Wallet Connection Provider” so your existing wallet setup is wired correctly.",
    "last_referenced_date": "2025-01-24T11:28:48"
  },
  {
    "question": "What information do I need to provide to set up my PumpSpace broker ID on Orderly Network, and what are the default fee rates?",
    "answer": "To create your broker ID, supply:\n• broker_id: “pump_space”\n• broker_name: “Pump Space”\n• default_taker_fee_rate: 0.06 (6 bps total; Orderly’s base taker fee is 3 bps, so you earn the extra 3 bps)\n• default_maker_fee_rate: 0.03 (3 bps total; Orderly’s base maker fee is 0 bps)\nYou can change these rates later once your admin wallet is registered. See the “Building on EVM → User Flows → Custom Fees” guide in the Orderly docs for full instructions.",
    "last_referenced_date": "2025-02-11T09:27:00"
  },
  {
    "question": "In our integration only USDC appears as a deposit token. How can we add support for more collateral assets?",
    "answer": "Multi-collateral (support for tokens beyond USDC) is not yet available on Orderly. It is on the product roadmap, but until then only USDC deposits are supported.",
    "last_referenced_date": "2025-02-14T09:23:38"
  },
  {
    "question": "How can we add a trading leaderboard UI like Bundex’s site in our Orderly integration?",
    "answer": "Orderly does not ship a leaderboard UI. Bundex built their own front end on top of Orderly’s campaign APIs (for example, GET /v1/public/get-list-of-campaigns). To implement a leaderboard, you must develop your own UI that calls those public campaign endpoints. If you need a campaign configured, Orderly’s team can set that up for you—campaign creation is not permissionless.",
    "last_referenced_date": "2025-02-14T09:37:55"
  },
  {
    "question": "Do users of our PumpSpace broker automatically participate in Orderly epoch events, or do we need additional configuration?",
    "answer": "All users who trade through your PumpSpace broker_id automatically participate in Orderly’s epoch-based reward events. No further setup is required on your side.",
    "last_referenced_date": "2025-02-20T10:00:51"
  },
  {
    "question": "The Bundex site includes referral, reward, and leaderboard features. Are these provided by Orderly, or must we build them ourselves?",
    "answer": "Those features on Bundex are entirely self-developed. Orderly only provides the underlying APIs (e.g., campaign endpoints) and infrastructure—each DEX must build and host its own referral, reward, and leaderboard UI and logic.",
    "last_referenced_date": "2025-02-20T10:00:51"
  },
  {
    "question": "Is it necessary to separately set up a referral code for PumpSpace, and do users have to manually enter that code?",
    "answer": "Yes, you must create your own referral code (either via the admin dashboard or the create-referral-code API). Users do not need to manually type in the code—if they arrive via your referral link or you bind the code programmatically, the SDK handles the referral binding automatically once they register and sign the message.",
    "last_referenced_date": "2025-04-14T08:25:28"
  },
  {
    "question": "Where can we check or confirm our broker’s referral code once it’s been created?",
    "answer": "You can view and manage referral codes in the Orderly admin portal at https://admin.orderly.network/ under the Referrals section. You can also retrieve codes via the private API endpoint GET /v1/private/get-referral-code-info authenticated with your admin wallet.",
    "last_referenced_date": "2025-04-14T08:31:10"
  },
  {
    "question": "How can we monitor our users’ wallet addresses and trading volume programmatically?",
    "answer": "You can track user volumes via the Orderly Dune Analytics dashboard at https://dune.com/orderly_network/orderly-dashboard, which breaks down volumes by broker_id and user account. For programmatic access, use the private REST endpoint GET /v1/private/get-builders-users-volumes to fetch daily trading volumes per account under your broker_id.",
    "last_referenced_date": "2025-02-20T10:00:51"
  },
  {
    "question": "If a user executes a $1,000 trade at 10× leverage (total notional $10,000) with a 0.06% taker fee, how is that fee split between Orderly and PumpSpace? What about if the position is later closed or liquidated at $20,000?",
    "answer": "Orderly’s base taker fee is 0.03%; any additional taker fee is yours. For a $10 000 notional, 0.06% = $6 total fee. Orderly keeps $3 (0.03%), and PumpSpace earns $3. If the notional doubles to $20 000 and you pay another 0.06% = $12, again Orderly takes $6 and PumpSpace takes $6.",
    "last_referenced_date": "2025-02-20T10:00:51"
  },
  {
    "question": "How do I ensure the symbol prop I pass to the OrderEntryWidget is valid before rendering the widget?",
    "answer": "You need to fetch the list of available perpetual trading symbols first. Call the public REST endpoint GET /v1/public/get-available-symbols on the Orderly EVM API to retrieve every market’s symbol field (e.g., \"PERP_ETH_USDC\"). Alternatively, if you’re using the JS SDK, you can use the useSymbolsInfo or useMarkets hook from @orderly.network/hooks to get a live list of valid symbols, then pass one of those strings into <OrderEntryWidget symbol=\"PERP_ETH_USDC\" />.",
    "last_referenced_date": "2025-04-29T05:23:43"
  },
  {
    "question": "What format should my broker_id use when registering on Orderly, and does it have to be lowercase?",
    "answer": "Broker IDs must be all lowercase letters. For example, use \"bbx\" rather than \"BBX\" when confirming or registering your broker_id. The platform is case-sensitive and expects lowercase values.",
    "last_referenced_date": "2025-04-15T08:20:01"
  },
  {
    "question": "Would Orderly Network be used to source liquidity for our perpetuals DEX integration?",
    "answer": "Yes. Protocols that build on top of our SDK or integrate directly with Orderly can source from our unified, omnichain liquidity layer. Orderly is also multi-chain to make cross-chain trading seamless.",
    "last_referenced_date": "2025-04-18T04:00:14"
  },
  {
    "question": "What percentage fees does Orderly Network charge on trades?",
    "answer": "Orderly’s base fee structure is a 0.03% taker fee and a 0% maker fee. Any additional fees you configure on top of those rates go 100% to your broker account.",
    "last_referenced_date": "2025-04-28T08:43:24"
  },
  {
    "question": "How do I configure OrderlyAppProvider to include only Monad Testnet and exclude all mainnet chains in the React Components SDK?",
    "answer": "Pass a custom `chainFilter` prop to `OrderlyAppProvider`. For example:\n\n<OrderlyAppProvider\n  brokerId=\"your_broker_id\"\n  brokerName=\"Your Name\"\n  networkId=\"mainnet\"\n  chainFilter={{\n    testnet: [\n      {\n        id: 10143,\n        chainInfo: {\n          name: \"Monadeee Testnet\",\n          public_rpc_url: \"https://testnet-rpc.monad.xyz\",\n          chainId: 10143,\n          currency_symbol: \"MON\",\n          explorer_base_url: \"\",\n          vault_address: \"\"\n        }\n      }\n    ],\n    mainnet: []\n  }}\n>\n  {children}\n</OrderlyAppProvider>\n\nThis hides mainnet chains and shows only the specified testnet chain.",
    "last_referenced_date": "2025-04-26T07:19:35"
  },
  {
    "question": "What is the process to register an admin wallet after our broker profile has been created?",
    "answer": "Once the broker profile is set up, you need to register an Orderly account linked to your `broker_id` to serve as the admin account. Follow the broker registration guide (currently at Step 4) in the Orderly docs, which walks you through connecting your EOA wallet and registering it as the administrative Orderly account.",
    "last_referenced_date": "2025-04-29T15:58:23"
  },
  {
    "question": "Can we use the official Monad testnet USDC token address for deposits in our Orderly testnet integration?",
    "answer": "Not at this time. Orderly’s testnet integration only supports our managed USDC via the built-in faucet and vault flow. You cannot switch to the official Monad testnet USDC address until we support that token in our faucet, indexing, and vault infrastructure.",
    "last_referenced_date": "2025-05-04T21:12:24"
  },
  {
    "question": "Can users deposit and withdraw native MON tokens on Monad Testnet through Orderly?",
    "answer": "No. On Monad Testnet, Orderly currently supports only USDC deposits and withdrawals. Native MON token deposits and withdrawals are not supported by the vault or faucet flow.",
    "last_referenced_date": "2025-05-01T17:33:08"
  },
  {
    "question": "What is the contract address for Orderly’s USDC vault on Monad Testnet?",
    "answer": "You can find the vault and token addresses in our docs under “Building on Omnichain → Smart Contract Addresses → Monad”: https://orderly.network/docs/build-on-omnichain/addresses#monad",
    "last_referenced_date": "2025-05-15T13:36:33"
  },
  {
    "question": "Can we create an Orderly-managed liquidity pool for USDC:Testnet USDC within the Orderly orderbook system?",
    "answer": "No. Orderly is an orderbook-based trading infrastructure and does not support automated market maker pools. While you can create your own AMM pool externally, Orderly’s system does not provide a built-in pool for any token pair.",
    "last_referenced_date": "2025-05-15T13:39:14"
  },
  {
    "question": "When will the permissionless token listing feature be available on Orderly, and how can we list a new token until it’s launched?",
    "answer": "Permissionless token listings will take a few months to implement and there is no firm release date yet. In the meantime, to get a token listed on Orderly you must contact our listing team directly—they will review your project and coordinate with market makers to include your token on the platform.",
    "last_referenced_date": "2024-09-24T15:11:24"
  },
  {
    "question": "What is Orderly’s fee model and how do we configure our own custom fees to capture a percentage of trading volume?",
    "answer": "Orderly’s total trading fee equals the base fee plus your custom fee. The base fee is 0 bps for maker orders and 3 bps for taker orders (which you can reduce to 2.5 bps by staking ORDER). You choose the custom fee on top at any level you wish. To set or update your custom maker/taker fees, use the broker admin UI or call the private fee‐rate API endpoints authenticated with your admin Orderly key.",
    "last_referenced_date": "2024-11-05T12:27:26"
  },
  {
    "question": "How does Orderly calculate the index price for token price correlation against major exchanges, and where can I find this documentation?",
    "answer": "Orderly’s index price is computed by volume‐weighted aggregation of prices from multiple major exchanges. Full details on the mark price, index price, and last price formulas are published under “Perpetual Futures → Mark Price, Index Price and Last Price” in the developer docs: https://orderly.network/docs/introduction/trade-on-orderly/perpetual-futures/mark-price-index-price-and-last-price#index-price",
    "last_referenced_date": "2025-05-05T09:24:14"
  },
  {
    "question": "Where can I find the full list of trading markets (symbols) supported by Orderly?",
    "answer": "See the Supported Markets section in the official Orderly docs under “Introduction → Trade on Orderly → Supported Markets”. It lists every perpetual market symbol along with its parameters such as tick sizes and margin ratios: https://orderly.network/docs/introduction/trade-on-orderly/supported-markets",
    "last_referenced_date": "2024-09-10T12:49:56"
  },
  {
    "question": "How can I adjust my leverage when trading on Orderly given that different symbols have different max leverage limits, and can I set a specific leverage like 2× for BTC?",
    "answer": "Orderly uses cross-margin so leverage is configured at the account level, not per order or per symbol. Each symbol has its own max leverage cap (e.g., 50× for BTC, 10× for others). To change your leverage, adjust your account max leverage via the UI leverage control or programmatically with the Hooks SDK’s useLeverage hook. For example:\n\nconst [maxLeverage, { update }] = useLeverage();\nawait update({ leverage: 2 });\n\nAfter setting maxLeverage, your position size relative to your free collateral will determine the actual leverage for each trade.",
    "last_referenced_date": "2025-02-05T08:37:30"
  },
  {
    "question": "Do I need a TradingView license to embed Advanced Charts in my Orderly DEX UI, and how do I obtain it?",
    "answer": "Yes. TradingView’s Advanced Charts library requires a commercial license for embedded use. To obtain one, follow the instructions in Orderly’s onboarding guide under “TradingView License Guide.” This document walks you through applying for and licensing the charting library for your DEX.",
    "last_referenced_date": "2025-02-10T03:20:21"
  },
  {
    "question": "How do I integrate staking functionality for $ORDER when there are no dedicated API docs, and what on-chain steps and contracts are involved?",
    "answer": "Staking is entirely on-chain via Orderly’s proxy contract. First, consult the Tokenomics → Addresses guide at https://orderly.network/docs/introduction/tokenomics/addresses. Then:\n1. Approve the ORDER token (0x4E200fE2f3eFb977d5fd9c430A41531FB04d97B8) for the proxy contract at 0xC8A8Ce0Ab010E499ca57477AC031358febCbbF17.\n2. Call the view function quoteStakeOrder(amount, userAddress) on the proxy to fetch the LayerZero message fee (pass the ORDER amount and the user’s address).\n3. Call stakeOrder(amount) on the proxy contract, attaching the quoted fee as the transaction value (many apps multiply this fee by ~1.1 as a small buffer).\n",
    "last_referenced_date": "2024-10-02T09:17:12"
  },
  {
    "question": "What integration options does Orderly provide for building a DEX frontend, and how do they differ in time to market and customizability?",
    "answer": "Orderly offers four main paths for DEX integration:\n1. Components SDK: Prebuilt React UI components for a full trading page. Fastest to market with minimal coding; customize only via theming. See https://orderly.network/docs/sdks/react/overview and the broker-template example.  \n2. Hooks SDK: React hooks for fetching data and sending transactions; you build your own components. More flexible UI control. See https://orderly.network/docs/sdks/hooks/overview and example-dex.  \n3. Core SDK: A minimal EIP-712 + REST wrapper usable in any framework. Highest flexibility but not yet fully documented. See https://www.npmjs.com/package/@orderly.network/core.  \n4. No SDK: Direct REST and WebSocket calls with manual EIP-712 signing. Full control, more boilerplate. See the Omnichain integration guide at https://orderly.network/docs/build-on-omnichain/building-on-omnichain.",
    "last_referenced_date": "2025-04-22T08:48:17"
  },
  {
    "question": "Does Orderly support a credit line feature for trading—i.e., borrowing funds to trade and settling with collateral later?",
    "answer": "Orderly does not offer a traditional credit line. However, it supports leveraged trading: users can deposit USDC collateral and trade on margin up to their account’s maximum leverage setting. You configure leverage at the account level rather than borrowing per trade.",
    "last_referenced_date": "2025-04-22T12:16:57"
  },
  {
    "question": "Is there a fee charged on maker orders in Orderly, and if so what is the maker fee rate?",
    "answer": "Orderly’s base maker fee is 0 basis points (0%). You pay no fee when your limit orders rest on the book and are later filled as makers.",
    "last_referenced_date": "2025-04-24T09:26:37"
  },
  {
    "question": "Do I need to whitelist my integration or IP addresses to integrate with Orderly, or is the platform open to everyone once the admin wallet is set up?",
    "answer": "No whitelist or IP restriction is required. Once you register your broker’s admin wallet (so it can collect fees), Orderly is open to all integrations—no further whitelisting is needed.",
    "last_referenced_date": "2025-04-28T05:06:31"
  },
  {
    "question": "Does Orderly support multi-asset collateral and when will that feature become available? Which assets will be supported at launch?",
    "answer": "Multi-collateral support is not yet available; it’s planned for release by the end of Q2. Initial supported collateral assets will include BTC, ETH, USDT, and DAI.",
    "last_referenced_date": "2025-05-01T15:07:08"
  },
  {
    "question": "When I request USDC from the Orderly testnet faucet, where are the funds credited—to my wallet or directly into my Orderly account?",
    "answer": "Funds from the testnet USDC faucet are credited directly into your Orderly account balance on testnet, not to your EOA wallet.",
    "last_referenced_date": "2025-05-08T10:24:28"
  },
  {
    "question": "Do I need to set up my own broker_id before integrating on Orderly testnet, or can I use any existing broker_id for testing?",
    "answer": "You can use any existing broker_id (for example, “Orderly”) to start development on testnet. A dedicated broker_id can be configured later when you’re ready to collect fees and go live.",
    "last_referenced_date": "2025-04-30T09:31:58"
  },
  {
    "question": "Is there an API to retrieve open interest data per broker, and how can I fetch my broker’s trading volume programmatically?",
    "answer": "There is no broker-specific open interest API—open interest is only available as global market data via the public endpoint GET /v1/public/get-open-interests-for-all-trading-pairs. To fetch your broker’s trading volume per account or aggregated by date, use the private REST endpoint GET /v1/private/get-builders-users-volumes authenticated with your broker’s Orderly API key, or query the Dune Analytics dashboard for broker-specific volume.",
    "last_referenced_date": "2025-05-22T09:08:10"
  },
  {
    "question": "Can I configure the Orderly SDK to only display a subset of trading symbols (e.g., meme tokens), or must my frontend filter the full symbol list client-side?",
    "answer": "The SDK pulls the full list of available symbols directly from the endpoint and does not currently support showing only a subset by configuration. You will need to filter unwanted markets in your frontend code.",
    "last_referenced_date": "2025-05-27T13:00:23"
  },
  {
    "question": "What information do I need to provide to set up a new broker ID for Orderly integration?",
    "answer": "You must supply:\n1. broker_id: your chosen identifier (e.g., \"panda_terminal\").\n2. Broker Name: the display name for your DEX.\n3. Broker admin wallet: an externally owned account (EOA) address. This wallet collects fee rebates and authenticates admin API calls.\n4. Default fee rates: the maker_fee_rate and taker_fee_rate (decimal form) you want charged by default. Orderly’s base fees (0 bps maker, 3 bps taker) are kept by Orderly; any excess goes 100 % to your broker.\nOnce you share these details, Orderly will configure your broker ID.",
    "last_referenced_date": "2024-04-17T12:48:36"
  },
  {
    "question": "Do I need to register an Orderly account separately for each EVM chain (e.g., Arbitrum, Optimism), or is one registration sufficient?",
    "answer": "You only need to register your wallet once under your broker_id on any supported chain. The account registration is global across Orderly’s EVM networks, so you do not have to repeat registration per chain.",
    "last_referenced_date": "2024-04-18T14:10:34"
  },
  {
    "question": "Is the Orderly testnet environment still active for development and testing?",
    "answer": "Yes. The testnet API is still live and your testnet broker_id (e.g., \"panda_terminal\") remains registered. You can continue to call the testnet endpoints and integrate against the testnet environment.",
    "last_referenced_date": "2024-10-03T05:07:54"
  },
  {
    "question": "Can users list a market with their own liquidity on Orderly, and when will that feature be available?",
    "answer": "Orderly is actively working on enabling user‐created markets with custom liquidity. This capability is on the product roadmap but is not yet live. It is expected to take a few months before it becomes available.",
    "last_referenced_date": "2024-08-13T23:53:50"
  },
  {
    "question": "How do I register my broker admin wallet to collect fees and access private APIs on Orderly?",
    "answer": "After your broker_id is created, register your admin wallet via the broker-registration UI at https://orderlynetwork.github.io/broker-registration/. Connect and register your EOA there (you may do so on any one chain, testnet or mainnet). Once registered, inform Orderly so they can finalize the assignment. That admin wallet will receive your broker fee rebates and has exclusive access to private endpoints like referral code management and custom fee updates.",
    "last_referenced_date": "2024-10-08T14:12:03"
  },
  {
    "question": "Can I integrate Orderly’s settlement layer with my own smart contracts and backend logic for custom products (e.g., binary options or prediction markets), and what are the limitations?",
    "answer": "Orderly’s blockchain settlement layer is open—you can build your own on-chain logic and call the Orderly vault and orderbook contracts directly. However, our current engine only supports standard perpetual and spot order flows. Custom products (like binary options with a 2× payout) or alternate risk engines are not supported out of the box. To add new product types or bespoke settlement logic, you would need to work directly with the Orderly team to extend our engine and risk-management modules. For an exploratory discussion on feasibility, schedule a technical call with us.",
    "last_referenced_date": "2024-08-28T12:09:06"
  },
  {
    "question": "Is it possible to add custom fields (for example, a new order type or extra metadata) into Orderly’s order schema, and how would I integrate those into the settlement layer?",
    "answer": "At present, Orderly’s on-chain and off-chain settlement layers only accept the predefined order parameters in our API/SDK (symbol, side, quantity, price, algo_type, etc.). There is no mechanism to include arbitrary custom fields in the order payload. If you need additional fields, you must propose a new product integration—our team can review and, if approved, extend the engine schema to support those fields in a future release.",
    "last_referenced_date": "2024-08-28T12:16:56"
  },
  {
    "question": "What integration options does Orderly provide for building a custom DEX frontend, and how do they differ in time to market and customization?",
    "answer": "Orderly offers four integration paths:\n1. Components SDK (React UI components, minimal coding): https://orderly.network/docs/sdks/react/overview. Fastest to launch with theming only (see js-sdk-demo and live demo).\n2. Hooks SDK (React hooks for data/transactions): https://sdk.orderly.network/docs/hooks/overview. You wire up your own components for full UI control (see example-dex).\n3. Core SDK (@orderly.network/core): a minimal EIP-712 + REST wrapper usable in any framework; flexible but currently undocumented on frontend.\n4. No SDK (direct REST/WebSocket & EIP-712 signing): full flexibility, more boilerplate. See https://orderly.network/docs/build-on-evm/building-on-evm for code samples.",
    "last_referenced_date": "2024-08-21T10:42:38"
  },
  {
    "question": "Where can I find the current list of markets supported on Orderly?",
    "answer": "The full set of perpetual and spot markets is documented under “Supported Markets” in the Orderly docs. See the EVM section here:\n\nhttps://orderly.network/docs/introduction/trade-on-orderly/supported-markets\n\nThis page lists each symbol along with its tick sizes, margin parameters, and other trading limits.",
    "last_referenced_date": "2024-09-11T10:48:59"
  },
  {
    "question": "Why do my withdrawal requests return a \"pre-margin check failed\" error after closing positions, and how can I programmatically detect and resolve unsettled PnL before withdrawing?",
    "answer": "After closing positions, your PnL remains “unsettled” in your account’s free collateral calculation, so any withdrawal exceeding freeCollateral triggers a pre-margin check failure. To detect unsettled PnL, call the private REST endpoint GET /v1/private/get-all-positions-info and read the `unsettled_pnl` field for each returned position (including closed ones). Sum those values to get your total unsettled PnL. Before withdrawing, invoke the settle PnL endpoint (or SDK’s account.settle()/account.settle() method) to clear unsettled PnL, then withdraw up to your updated freeCollateral.",
    "last_referenced_date": "2025-03-13T08:28:27"
  },
  {
    "question": "Do I need to pay anything to integrate with Orderly or use your APIs, and how are trading fees structured?",
    "answer": "No—there are no integration or API‐usage fees. Orderly charges only base trading fees on taker volume (default 0.03% taker fee and 0% maker fee). Based on your daily volume or ORDER token stake, your base taker fee can be further reduced (e.g., to 0.0275% or 0.025%). Anything you configure on top of the base fee (maker or taker) goes 100% to your broker.",
    "last_referenced_date": "2025-02-26T13:54:15"
  },
  {
    "question": "Which prebuilt pages (views) are available in the js-sdk-demo repository for integrating Orderly’s React SDK, and where can I find their source code?",
    "answer": "The js-sdk-demo provides three main view pages out of the box:  \n• TradingPage: in `app/perp/[symbol]/view.tsx` of the js-sdk-demo repo,  \n• Portfolio page: in `app/portfolio/view.tsx`, and  \n• Referral page: in `app/referral/view.tsx`.  \nYou can browse the full source at https://github.com/OrderlyNetwork/js-sdk-demo and preview the live demo at https://sdk-demo.orderly.network/.",
    "last_referenced_date": "2024-08-02T14:13:29"
  },
  {
    "question": "Is there a prebuilt page for managing API keys in the Orderly React SDK demo, and how can I implement an API keys UI?",
    "answer": "No—there is no dedicated “API Keys” page in the js-sdk-demo. To build one yourself, you can use the Hooks SDK’s keystore API. For example, the `useAccount` hook exposes a `keystore` object and methods to read and update the stored keys. See the docs under “Hooks → Account → useAccount #keystore”: https://orderly.network/docs/sdks/hooks/account/use-account#keystore",
    "last_referenced_date": "2024-08-02T14:13:29"
  },
  {
    "question": "How do I set up the affiliate/referral system for my broker after my broker ID is configured? What steps and documentation should I follow?",
    "answer": "After your broker ID is active, you need to:  \n1. Register your admin wallet (so you can create and manage codes).  \n2. Create referral codes for each referrer on your end—there is no auto-creation API by broker.  \n3. Use the Referral component in the React SDK to display and bind codes.  \nFor implementation details, follow the “Building on EVM → User Flows → Referral System” guide in the docs: https://orderly.network/docs/build-on-evm/user-flows/referral-system  \nYou can also generate codes via the admin UI once your admin wallet is registered: https://admin.orderly.network/",
    "last_referenced_date": "2024-08-06T06:26:19"
  },
  {
    "question": "How often are broker fee rebates (commissions) processed on Orderly, and when are they credited to my admin wallet?",
    "answer": "Broker fee rebates settle once per day. After “Enable trading,” your collected fees are posted to your broker admin wallet’s Orderly account around 00:00 UTC each night.",
    "last_referenced_date": "2024-08-12T08:59:12"
  },
  {
    "question": "Where and how can I view or withdraw the accrued broker commissions on Orderly once they’ve been credited to my admin wallet?",
    "answer": "Connect your registered admin wallet to your broker DEX UI or visit the Orderly admin portal in your browser.  \n• DEX UI: use the Withdraw flow in your front end once the wallet is connected.  \n• Admin portal: go to https://admin.orderly.network/, connect your admin wallet, and use the Withdraw action under Assets to move USDC on-chain.",
    "last_referenced_date": "2024-09-10T15:24:57"
  },
  {
    "question": "What steps must I take to register and configure my broker admin wallet so it can collect fees and access private endpoints?",
    "answer": "After your broker ID is set up, register your admin wallet by connecting it in the broker-registration UI:\nhttps://orderlynetwork.github.io/broker-registration/\nYou may use an EOA or a multisig via the Delegate Signer feature. Once registered, that wallet will collect your broker’s fee rebates and have exclusive access to private APIs (e.g., fee updates and referral management).",
    "last_referenced_date": "2024-08-06T06:27:39"
  },
  {
    "question": "Which public REST API endpoints can I use to fetch historical trading data and liquidation positions via Orderly Network?",
    "answer": "Use the following public REST endpoints:\n• GET /v1/public/get-market-trades: returns historical trade executions for a specified market symbol.\n• GET /v1/public/get-liquidated-positions-info: returns records of positions that have been liquidated.",
    "last_referenced_date": "2025-01-06T08:46:53"
  },
  {
    "question": "What is the current average daily trading volume for perpetuals on Raydium via Orderly, and how much revenue is being generated daily at the base fee rate?",
    "answer": "During the beta, Raydium perpetuals are averaging around $55 million per day in trading volume. They are charging Orderly’s base taker fee of 2.5 bps, so all of that fee revenue is currently going to Orderly. Partners earn nothing until they add their own on-top fee structure.",
    "last_referenced_date": "2025-01-23T21:49:41"
  },
  {
    "question": "What integration costs should I expect when building on Orderly Network, given its EVM and SVM compatibility?",
    "answer": "There are no integration fees. Orderly does not charge for SDK or API integration, and you simply pull from our shared liquidity layer without additional cost.",
    "last_referenced_date": "2025-01-03T11:59:45"
  },
  {
    "question": "How long does it typically take to integrate Orderly using the React Components SDK?",
    "answer": "If you use our React Components SDK, a basic integration can be completed in a matter of days.",
    "last_referenced_date": "2025-01-24T17:47:23"
  },
  {
    "question": "Is it possible to stake $ORDER tokens from my wallet on behalf of another user so that the stake is assigned to the end user rather than my router contract?",
    "answer": "No—you cannot delegate staking to another user. ORDER staking requires that each user stake from their own wallet. If a router or contract stakes ORDER, from the staking contract’s perspective the router is the staker and rewards accrue to it. See OrderSafe.sol in the OFT repo for details: https://github.com/OrderlyNetwork/oft-token/blob/main/contracts/crosschain/OrderSafe.sol#L20.",
    "last_referenced_date": "2024-10-23T09:19:53"
  },
  {
    "question": "Which chains have liquidity for the $ORDER token, and on which chains is ORDER available but lacks swap liquidity?",
    "answer": "The $ORDER token is deployed as an OFT on Ethereum, Arbitrum, Optimism, Polygon PoS, and Base. However, active swap liquidity today exists only on Ethereum and Arbitrum.\n\n• Ethereum (0xABD4C63d2616A5201454168269031355f4764337)  \n  – Uniswap LP: https://dexscreener.com/ethereum/0xff00f45a9cd1b4044c449aa09c05613c2ce4f098  \n  – PancakeSwap LP: https://dexscreener.com/ethereum/0xb2dc4d7627501338b578985c214208eb32283086  \n\n• Arbitrum (0x4E200fE2f3eFb977d5fd9c430A41531FB04d97B8)  \n  – Camelot LP: https://dexscreener.com/arbitrum/0x256899bd2e99c6736b34caf298719cc709925819  \n\n• Optimism, Polygon, Base (same OFT address) have the token but currently no significant swap liquidity on integrated DEXs.",
    "last_referenced_date": "2024-11-27T02:07:20"
  },
  {
    "question": "What information is required to register a broker ID and admin wallet on Orderly Network so we can collect fees and set up broker endpoints?",
    "answer": "You must provide your desired broker_id (string), a broker name (display name), default taker and maker fee rates (as decimal bps above Orderly’s base), and an admin wallet address that must be an externally owned account (EOA). The admin wallet collects fee rebates and authenticates private broker endpoints.",
    "last_referenced_date": "2024-05-21T05:59:29"
  },
  {
    "question": "What is the purpose of the broker admin wallet on Orderly Network?",
    "answer": "The broker admin wallet is used to collect your broker’s fee rebates (100 % of any fees you configure above Orderly’s base) and to sign and authenticate admin‐only API calls such as updating custom fees or creating referral codes.",
    "last_referenced_date": "2024-05-21T06:39:08"
  },
  {
    "question": "What are the typical custom maker and taker fee rates brokers charge on Orderly Network?",
    "answer": "Most brokers set their custom on‐top fees at around 6 bps taker and 3 bps maker (in addition to Orderly’s base fees of 3 bps taker and 0 bps maker).",
    "last_referenced_date": "2024-05-21T06:39:23"
  },
  {
    "question": "Which chains does Orderly Network currently support for deposits and trading, and when will Mantle support go live?",
    "answer": "Orderly supports deposits and trading on Base, Optimism, and Arbitrum today. Mantle integration is planned to go live on the 28th.",
    "last_referenced_date": "2024-05-21T09:28:31"
  },
  {
    "question": "How can brokers integrate Orderly merits into their front end to display user-earned points?",
    "answer": "Brokers can call the public REST endpoint GET /v1/public/get-users-points to fetch users’ merits (points) data. See the docs under “Public → get-users-points” for request parameters and response format.",
    "last_referenced_date": "2024-05-21T10:27:52"
  },
  {
    "question": "How do I register my admin wallet with my broker ID for Orderly Network using the standard registration flow?",
    "answer": "You can register your admin wallet by running the registration script (see examples/api/ts/src/registerExample.ts in the Orderly examples repo) or by using the broker-registration UI at https://orderlynetwork.github.io/broker-registration/. If you’re on mainnet, point the script’s base URL to https://api-evm.orderly.org, set your broker_id, and use the appropriate chain_id from chainlist.org.",
    "last_referenced_date": "2024-05-22T07:03:08"
  },
  {
    "question": "Do I need to apply for a Web3-Onboard API key when integrating Orderly’s React SDK, or should I create one myself?",
    "answer": "You need to create your own WalletConnect/Web3-Onboard API key; Orderly does not provision it for you.",
    "last_referenced_date": "2024-06-14T04:33:06"
  },
  {
    "question": "Which private REST API endpoint returns my broker’s daily trading volume aggregated by date?",
    "answer": "Use GET /v1/private/get-builders-users-volumes with the query parameter aggregatedBy=DATE. This endpoint returns daily volume records per account under your broker_id.",
    "last_referenced_date": "2024-06-20T10:12:43"
  },
  {
    "question": "Which public REST API endpoint returns the list of available trading symbol pairs on Orderly Network?",
    "answer": "Call GET /v1/public/get-available-symbols on the public EVM API. The response includes every perpetual market’s symbol, base_tick, base_min, and other parameters.",
    "last_referenced_date": "2024-06-20T10:17:16"
  },
  {
    "question": "How can I filter executed trades or user_perp_summary data by a specific broker_id (e.g., “interlink”) when building a custom leaderboard with the Orderly Dashboard analyzer?",
    "answer": "In the analyzer’s Postgres schema, the user_info table includes each account’s broker_id. To filter for your broker “interlink”:  \n1. Insert your broker into broker_info:  \n   INSERT INTO broker_info(broker_id, broker_hash) VALUES('interlink','0x7d210bced7ce07203b92a82865d4f0ce8375a9e42a328407057bc60ee8d5deae');  \n2. Delete or reset the analyzer database so you can reprocess all blocks.  \n3. Rerun the analyzer over the desired block range:  \n   orderly-dashboard-analyzer -e <END_BLOCK> --config-path <CONFIG_PATH>  \n4. In your queries, join user_perp_summary (or executed_trades) on user_info.account_id to user_info, then filter WHERE user_info.broker_id = 'interlink'.",
    "last_referenced_date": "2025-05-20T07:01:19"
  },
  {
    "question": "If my real-time indexing pipeline isn’t ready, which public REST API endpoint can I use as a fallback to fetch daily trading volume for my broker every 24 hours?",
    "answer": "As a fallback, you can call the public endpoint GET /v1/public/get-builders-leaderboard (add ?playground=open if you’re testing in the docs) once per day to retrieve each broker’s daily volume and ranking. For details, see the “Public → get-builders-leaderboard” section in the EVM API docs.",
    "last_referenced_date": "2025-05-21T16:45:52"
  },
  {
    "question": "Does Orderly Network currently support the BNB chain (Binance Smart Chain) for deposits and trading?",
    "answer": "No. BSC (the BNB chain) is not supported yet by Orderly’s vault and trading infrastructure.",
    "last_referenced_date": "2025-05-22T12:52:48"
  },
  {
    "question": "What information do I need to register a new broker ID on Orderly, and how are the default maker and taker fees applied?",
    "answer": "When you register a broker ID, provide:\n• broker_id: your chosen identifier (e.g., “beraliquid”)\n• broker_name: the display name (e.g., “Beraliquid”)\n• default_taker_fee_rate: total taker fee you want charged (decimal, e.g., 0.06 for 6 bps)\n• default_maker_fee_rate: total maker fee you want charged (decimal, e.g., 0.03 for 3 bps)\nOrderly’s base fees are 0.03 % taker and 0 % maker (which Orderly keeps). Any fee you configure above the base goes 100 % to your broker account. You can change these defaults later once you register your admin wallet in the next step.",
    "last_referenced_date": "2025-04-04T08:20:05"
  },
  {
    "question": "Can we adjust custom maker and taker fees on a per-user basis based on their trading volume, and what tooling does Orderly provide to automate this?",
    "answer": "Yes. Orderly supports per-user fee overrides. You can use the Python helper script in the orderly-evm-broker-fee-admin repository (https://github.com/OrderlyNetwork/orderly-evm-broker-fee-admin) to set custom maker and taker rates for individual user addresses. The recommended approach is to run this script daily from your own servers, updating fees as user volumes change.",
    "last_referenced_date": "2025-04-04T15:29:02"
  },
  {
    "question": "How do I configure referral rebate rates using the create-referral-code API, specifically the max_rebate_rate, referrer_rebate_rate, and referee_rebate_rate parameters?",
    "answer": "When creating a referral code:\n• max_rebate_rate is the total rebate pool (sum of referrer plus referee shares) as a decimal (e.g., 0.5 = 50 %).\n• referrer_rebate_rate is the portion the referrer receives (decimal).\n• referee_rebate_rate is the portion the referee (new trader) receives (decimal).\nAll values use absolute decimals and must satisfy max_rebate_rate = referrer_rebate_rate + referee_rebate_rate (for example, to split 50/50, set max_rebate_rate: 0.5, referrer_rebate_rate: 0.25, referee_rebate_rate: 0.25).",
    "last_referenced_date": "2025-04-08T01:11:56"
  },
  {
    "question": "Hibachi is building an off-chain orderbook perp DEX on Arbitrum and wants to integrate Orderly liquidity so that a single user order could fill partly from Hibachi orders and partly from Orderly orders. Is partial filling across both matching engines technically feasible?",
    "answer": "No. Orderly and Hibachi each match orders exclusively in their own engines, so any individual order must be routed entirely to one book or the other. To leverage both liquidity sources, you would build an aggregator that queries both orderbooks for price and depth and then sends each order in full to whichever venue offers the best execution.",
    "last_referenced_date": "2024-09-18T16:52:44"
  },
  {
    "question": "Do you have a list of all perpetual markets for which Orderly provides liquidity, and where can I find that market list?",
    "answer": "Yes—the full list of supported perpetual markets is published in the Orderly docs under “Supported Markets” in the EVM section. You can view it here:\nhttps://orderly.network/docs/introduction/trade-on-orderly/supported-markets",
    "last_referenced_date": "2024-09-18T17:29:14"
  },
  {
    "question": "We’re evaluating a perp aggregator integration (combining our own off-chain matching engine with Orderly’s orderbook). Which documentation should our technical team review to understand how to connect to Orderly’s orderbook endpoints?",
    "answer": "To integrate with Orderly’s orderbook you can use:\n1. Public REST endpoint GET /v1/public/orderbook-snapshot (full depth per symbol).  \n2. Public WebSocket topics “orderbook” and “order-book-update” for real-time orderbook deltas.  \nSee the Omnichain EVM API docs under:\n• Public → get-orderbook-snapshot (REST)  \n• WebSocket API → Public → orderbook, order-book-update  \nThis will let you pull Orderly’s full and incremental orderbook data into your aggregator.",
    "last_referenced_date": "2024-11-07T08:14:41"
  },
  {
    "question": "Our exchange currently holds user funds in a smart contract for off-chain trading. Can those users trade directly against Orderly’s orderbook without on-chain withdrawal from our contract?",
    "answer": "Technically you could use Orderly’s delegate signer feature to register a smart-contract account and delegate EIP-712 signing to an EOA, but Orderly does not support isolated margin—every trade under that shared account would share collateral, so you lose per-user isolation. Also, the Hooks SDK currently does not support delegate signer flows, and you’d need a separate smart contract and delegate setup per user. Given the complexity and lack of isolation, this approach is not recommended.",
    "last_referenced_date": "2024-11-27T20:36:51"
  },
  {
    "question": "Does Orderly aggregate liquidity from multiple perpetual protocols, or does it provide its own omnichain orderbook?",
    "answer": "Orderly provides its own liquidity in a single omnichain orderbook. The same orderbook is accessible from any supported chain—liquidity is not aggregated from external perp protocols.",
    "last_referenced_date": "2025-03-13T17:09:12"
  },
  {
    "question": "How can I customize the UI and branding when integrating Orderly into my front end?",
    "answer": "Use one of four integration paths: \n1. Components SDK for drop-in React UI components with theming (colors, logos) \n2. Hooks SDK to build your own React components with data/transaction hooks \n3. Core SDK (@orderly.network/core) for minimal EIP-712+REST integration in any framework \n4. No SDK: direct REST/WebSocket calls with custom UI. \nThe Components SDK requires only theming; deeper UI changes require the Hooks or Core SDK.",
    "last_referenced_date": "2025-03-13T17:19:30"
  },
  {
    "question": "How do I set or adjust the fee spread when integrating Orderly, and what default fees does Orderly charge?",
    "answer": "Orderly’s base fees are 0.03% taker (reducible to 0.025% via volume or ORDER staking) and 0% maker. Any additional maker or taker fee you configure on top of these base fees goes 100% to your broker account. You can update your custom fees at any time via your admin dashboard or the private fee-rate API.",
    "last_referenced_date": "2025-03-13T17:23:52"
  },
  {
    "question": "How can I obtain an on-chain transaction hash for a liquidation order on Orderly Network?",
    "answer": "Orderly liquidation orders are executed entirely off-chain, so there is no on-chain transaction hash (txhash) for those events. You cannot fetch a txhash because the matching and liquidation logic runs off-chain.",
    "last_referenced_date": "2024-11-25T03:52:40"
  },
  {
    "question": "Which API endpoints can I use to detect that a trader’s position has been liquidated on Orderly Network?",
    "answer": "To list positions currently eligible for liquidation (market-wide) use the public endpoint GET /v1/public/get-positions-under-liquidation. To fetch liquidation records that have actually settled for a specific authenticated account, call the private endpoint GET /v1/private/get-liquidated-positions-of-account (requires the user’s Orderly authentication).",
    "last_referenced_date": "2024-11-25T04:47:46"
  },
  {
    "question": "Can I fetch another user’s liquidation records via the public APIs on Orderly, or do I need to authenticate? Which endpoint provides per-account liquidation data?",
    "answer": "You cannot retrieve arbitrary users’ liquidation data via the public APIs; per-account liquidation records require authentication. To fetch a user’s own settled liquidation events, call the private REST endpoint GET /v1/private/get-liquidated-positions-of-account with that user’s Orderly credentials.",
    "last_referenced_date": "2024-11-25T06:04:48"
  },
  {
    "question": "How can I programmatically retrieve settled liquidation events for a specific account and broker over a time range using Orderly’s dashboard API?",
    "answer": "Orderly’s dashboard query service exposes an events API. You can call:\n```\nGET https://orderly-dashboard-query-service.orderly.network/events\n  ?address=<user_wallet_address>\n  &broker_id=<your_broker_id>\n  &event_type=LIQUIDATION\n  &from_time=<start_unix_timestamp>\n  &to_time=<end_unix_timestamp>\n```\nThis returns liquidation events for that account and broker. You can fetch up to a 2-week window per query.",
    "last_referenced_date": "2024-11-25T07:21:52"
  },
  {
    "question": "What are the criteria for Orderly’s Market Making Rewards participation eligibility and how often is performance evaluated?",
    "answer": "Orderly selects market makers based on these criteria: (1) a daily maker volume ratio above 75%, (2) a maker volume market share (across all listed pairs) above 1%, and (3) the average maker volume market share of BTC, ETH, ARB, and SOL combined with that of other alt pairs, divided by 2, exceeding 1%. Performance is monitored across every two epochs post-Token Generation Event (each epoch lasts 14 days), with criteria subject to change with advance notice.",
    "last_referenced_date": "2024-08-20T15:50:55"
  },
  {
    "question": "Which blockchains does Orderly support for native USDC deposits, including recent additions?",
    "answer": "Orderly supports native USDC deposits on Ethereum mainnet and the following EVM chains: Arbitrum, Optimism, Base, Mantle, and Avalanche. You can verify precise token parameters per chain via the GET /v1/public/get-supported-collateral-info endpoint and view contract addresses in the docs under “Building on EVM → Smart Contract Addresses.”",
    "last_referenced_date": "2024-11-15T10:51:10"
  },
  {
    "question": "In my Dune query for Orderly’s net flows per chain, the `amount` field is returned – is that the USD value of USDC flow or the raw token amount?",
    "answer": "The `amount` field in that Dune query represents the USD value of net USDC flow per chain per day, not the raw token quantity.",
    "last_referenced_date": "2024-11-22T03:03:38"
  },
  {
    "question": "Can I use Orderly’s APIs or Dune to fetch trading volume separated by market (e.g., PERP_BTC_USDC) per chain or per broker?",
    "answer": "No. Orderly is an omnichain perp protocol: all trading occurs on Orderly’s own chain. There is no volume broken down by market or source chain via the public APIs or Dune; you must fetch overall perp volume and then correlate with other data sources if needed.",
    "last_referenced_date": "2024-11-22T03:07:41"
  },
  {
    "question": "The public REST endpoint GET /v1/public/market_trades?symbol=PERP_BTC_USDC&limit=20 returns up to 500 transactions – is there a way to retrieve more than 500, or to get older trades?",
    "answer": "The `market_trades` REST endpoint supports a maximum `limit` of 500 records per request. To access additional or real-time fills beyond that cap, subscribe to the private WebSocket `execution-report` topic and aggregate the streamed messages locally.",
    "last_referenced_date": "2024-12-09T02:00:09"
  },
  {
    "question": "What is the recommended integration method for building a fully custom front-end UI on top of Orderly’s perps engine?",
    "answer": "If you want complete control over your UI, use Orderly’s Hooks SDK. It provides React hooks for all core functionality (orders, positions, balances) so you can wire up your own components. See the Hooks SDK overview at https://orderly.network/docs/sdks/hooks/overview and the extended example in the example-dex repository (https://github.com/OrderlyNetwork/example-dex). Integration takes a bit longer than using the prebuilt Components SDK, but lets you implement any design or workflow you need.",
    "last_referenced_date": "2025-04-11T11:41:27"
  },
  {
    "question": "What are the rate limits when using the Orderly Hooks SDK for trading and market data?",
    "answer": "There are no additional rate limits imposed by the Hooks SDK itself—your requests are subject only to the rate limits of Orderly’s underlying REST and WebSocket APIs. If you have questions about specific endpoint limits, the team can advise further.",
    "last_referenced_date": "2025-04-16T13:14:55"
  },
  {
    "question": "How customizable is the order placement and signing flow in the Hooks SDK? Can we implement our own authentication logic and custom UI components?",
    "answer": "The Hooks SDK is fully customizable. You can replace or extend every UI component, implement your own authentication flows or wallet pop-ups, and style the order-placement forms any way you like. Many partners already use Hooks for bespoke UX and signing logic.",
    "last_referenced_date": "2025-04-16T13:14:55"
  },
  {
    "question": "What happens to user actions—such as deposits, withdrawals, and order submissions—if Orderly’s infrastructure or API goes down?",
    "answer": "If Orderly’s API or backend services go offline, in-flight operations will fail until service is restored. Your frontend could queue actions locally, but deposits, withdrawals, and order placements will not be processed on Orderly’s side during the outage. Once the infrastructure is back up, you can retry those requests.",
    "last_referenced_date": "2025-04-16T13:14:55"
  },
  {
    "question": "What are the most critical points of failure in Orderly’s infrastructure that could impact DEX functionality?",
    "answer": "The primary failure points would be a major hard fork of the Orderly chain and significant outages in our Google Cloud (GCP) infrastructure. Outside of those, our REST and WebSocket services are highly available.",
    "last_referenced_date": "2025-04-16T13:14:55"
  },
  {
    "question": "If Orderly updates or changes core smart contract logic, will our Hooks SDK integration need manual updates?",
    "answer": "Breaking changes to core contracts are possible but rare. When they occur, we communicate well in advance, and provide SDK releases (and migration guides) so you can update your integration before the change goes live.",
    "last_referenced_date": "2025-04-16T13:14:55"
  },
  {
    "question": "Is there a way to monitor the Orderly Hooks SDK’s behavior and detect when it needs updating?",
    "answer": "We publish detailed release notes and change logs for every SDK version. If there’s a forced upgrade or breaking change, you’ll receive advance notification. For custom runtime monitoring, you can wrap the hooks (e.g., usePrivateQuery) with your own error tracking or console logs to detect unexpected failures or deprecations.",
    "last_referenced_date": "2025-04-16T13:14:55"
  },
  {
    "question": "How do current DEX integrations on Orderly handle the deposit/withdraw UX given the need to move funds between spot and perp balances—are there protocols that implement account abstraction or seamless flows?",
    "answer": "Most integrations (e.g., Raydium, WOOFi Pro, QuickSwap Perps) use the same deposit/withdraw UX as Orderly’s own UI, akin to moving funds from spot to futures on a CEX. While ERC-4337-style account abstraction could eventually streamline this, today all of these protocols require on-chain deposit and withdrawal steps between spot and perp balances.",
    "last_referenced_date": "2025-04-21T12:05:50"
  },
  {
    "question": "What is Orderly’s standard base fee structure for perps trading, and what additional fees do builders typically charge on top?",
    "answer": "Orderly’s base fees are 3 basis points (0.03%) for taker trades and 0 basis points for maker trades. Builders can add any custom fee on top—most builders charge a total of around 6 bps taker and 3 bps maker. Additionally, our builder staking program lets you reduce the base taker fee from 3 bps to 2.5 bps based on volume or ORDER token stakes.",
    "last_referenced_date": "2025-05-08T16:11:10"
  },
  {
    "question": "How can I retrieve all-time historical trading volumes when the GET /v1/volume/kline endpoint has no pagination option?",
    "answer": "The GET /v1/volume/kline endpoint returns up to 1,000 bars per request and does not support pagination. To obtain a complete history beyond that limit, please contact the Orderly team to request a pre-generated daily volumes data file for your markets.",
    "last_referenced_date": "2024-09-06T03:02:46"
  },
  {
    "question": "Is there an API to fetch historical open interest per trading symbol for daily snapshots, and if not, how can I access open interest data?",
    "answer": "There is no historical open interest archive API at this time. You can fetch real-time open interest via the public REST endpoint GET /v1/public/get-open-interests-for-all-trading-pairs or subscribe to the “open-interest” WebSocket topic for live updates, but past daily snapshots are not available via API.",
    "last_referenced_date": "2024-09-06T03:02:46"
  },
  {
    "question": "Why does the account_value field always return 0 when calling GET /v1/client/statistics/daily on testnet for a recently registered and funded account?",
    "answer": "The daily statistics endpoint is only updated with a delay—often once per day—so new deposits and trades may not appear immediately in the account_value field. For real‐time balance data, call the private REST endpoint GET /v1/private/get-current-holding instead, which returns your up-to-date USDC holdings.",
    "last_referenced_date": "2024-11-04T21:34:54"
  },
  {
    "question": "How can I retrieve a user’s realized PnL or trade history programmatically with more up-to-date data than the delayed daily statistics endpoint?",
    "answer": "Use the Orderly Dashboard Query Service’s events API to pull PERP trade events directly. For testnet, call:\n\nGET https://dev-orderly-dashboard-query-service.orderly.network/events\n  ?address=<user_wallet_address>\n  &broker_id=<your_broker_id>\n  &event_type=PERPTRADE\n  &from_time=<start_unix_timestamp>\n  &to_time=<end_unix_timestamp>\n\nThis undocumented endpoint returns up to two weeks of PERPTRADE events with accurate timestamps for building PnL and trade history charts.",
    "last_referenced_date": "2024-11-04T21:55:05"
  },
  {
    "question": "How do I convert the raw USDC quantities returned by GET /v1/private/get-current-holding into USD values for display in my UI?",
    "answer": "The get-current-holding response returns balances in USDC token units. To display USD values, multiply the returned USDC quantity by the current USDC price (which is 1:1), or for other tokens multiply quantity × executed price. For realized PnL from trades, calculate trade_qty × executed_price in your frontend code.",
    "last_referenced_date": "2024-11-05T15:07:07"
  },
  {
    "question": "Which collateral assets are currently supported on Orderly Network and when will multi-collateral support become available?",
    "answer": "Orderly currently supports only native USDC as collateral. Multi-collateral support (e.g., ETH, other stablecoins) is on the roadmap but not yet released.",
    "last_referenced_date": "2024-11-06T06:43:21"
  },
  {
    "question": "Why did my application crash when using the useHoldingStream hook after switching to usePrivateQuery, and how can I prevent such crashes?",
    "answer": "If you call usePrivateQuery without supplying a `formatter` option, React Query may cache unexpected response shapes that break the internal useHoldingStream logic (e.g., `.find` errors). To fix this, add a formatter that returns the raw response, for example:\n\n```ts\nconst { data } = usePrivateQuery(\n  '/v1/client/holding',\n  {\n    formatter: response => response\n  }\n);\n```\nThis ensures the data shape matches what useHoldingStream expects and avoids crashes. Clearing localStorage/cookies may also clear stale caches during development.",
    "last_referenced_date": "2024-11-11T15:31:27"
  },
  {
    "question": "How can I integrate Orderly’s perpetual DEX trading into the ElizaOS AI agent framework?",
    "answer": "Develop and submit an Orderly plugin for ElizaOS by opening a pull request in the ElizaOS GitHub repository. For example, see PR #2925 at https://github.com/elizaOS/eliza/pull/2925. Once merged, agents built on ElizaOS can invoke Orderly trading functions directly.",
    "last_referenced_date": "2025-02-13T10:18:58"
  },
  {
    "question": "What steps are required to add Orderly trading capabilities into the AgentKit by Send framework for AI agents?",
    "answer": "Fill out Send’s PR form on GitHub and create a pull request against the solana-agent-kit repository, for example at https://github.com/sendaifun/solana-agent-kit/pull/147. Be prepared to submit audit reports or additional documentation when requested. After the PR is merged, AgentKit agents can access Orderly’s perp trading endpoints.",
    "last_referenced_date": "2025-01-08T11:42:24"
  },
  {
    "question": "What does error code 5 'Amount error' mean when attempting a withdrawal on Orderly, and how can I resolve it?",
    "answer": "Error code 5 ‘Amount error’ indicates the requested withdrawal amount is invalid—typically it exceeds your current withdrawable balance or falls below the minimum allowed. To resolve this, first calculate your withdrawable balance using the formula under “Perpetual Futures → Formulas & Definitions → Withdrawable Balance” in the docs, ensure your request amount is ≤ that value, and also check the market’s `base_min` via GET /v1/public/get-available-symbols to meet the minimum notional requirement.",
    "last_referenced_date": "2025-03-24T09:21:55"
  },
  {
    "question": "What does error code 20 'Withdrawal Pre Margin Check Failed' mean on Orderly, and how do I fix it?",
    "answer": "Error code 20 ‘Withdrawal Pre Margin Check Failed’ means that withdrawing the specified amount would leave your account undercollateralized given your current open positions and orders. To fix this, close or reduce your open positions and/or cancel any pending orders to free up margin, then retry the withdrawal with an amount that passes the pre-margin check.",
    "last_referenced_date": "2025-03-24T09:21:55"
  },
  {
    "question": "What does error code -1104 'The order must fit in the filter requirement.' indicate when creating an order via the Orderly API, and how do I address it?",
    "answer": "Error code -1104 means your order’s quantity or price does not adhere to the market’s tick size constraints. Retrieve the symbol’s `base_tick` and `quote_tick` fields from GET /v1/public/get-available-symbols, then round or truncate your `order_quantity` and `order_price` to match those tick increments so the order fits the filter requirements.",
    "last_referenced_date": "2025-03-24T09:21:55"
  },
  {
    "question": "What should the ORDERLY_PRIVATE_KEY environment variable contain: the user’s EVM wallet private key or an Orderly ed25519 key for API authentication?",
    "answer": "ORDERLY_PRIVATE_KEY must be the Orderly ed25519 private key (not your EVM wallet key) used to gaslessly authenticate and sign EIP-712 messages for Orderly’s EVM API. Generate this key pair via the broker-registration UI (https://orderlynetwork.github.io/broker-registration/) as described in the API Authentication guide.",
    "last_referenced_date": "2025-03-26T12:03:44"
  },
  {
    "question": "Can I use the 'demo' broker ID (ORDERLY_BROKER_ID) in production, and what should I use instead?",
    "answer": "No—‘demo’ is a placeholder broker ID for testing only. In production you must use a proper broker ID that’s been configured by the Orderly team. Contact your Orderly account manager or refer to the broker-registration process to obtain and register your official broker ID before going live.",
    "last_referenced_date": "2025-03-26T12:01:52"
  },
  {
    "question": "How should I handle sensitive backend actions requiring the Orderly private key when integrating the plugin in a frontend environment?",
    "answer": "Best practice is to split responsibilities: perform sensitive operations (such as signing Orderly API requests with the ed25519 key) in a secure backend or middleware service that holds the credentials, and expose only safe, publicly callable endpoints to your frontend. The frontend (e.g., your wagmi wallet provider) can then invoke those backend endpoints for actions, avoiding exposure of private keys in the browser.",
    "last_referenced_date": "2025-03-28T18:07:55"
  },
  {
    "question": "When using the useReferralInfo hook from @orderly.network/hooks, I get undefined for a user—why is that?",
    "answer": "The hook calls the private GET /v1/private/get-referral-info API and reads `data.referrer_info.referral_codes`. If the user hasn’t created any referral codes yet, that array is empty and the hook returns undefined.",
    "last_referenced_date": "2025-03-10T08:48:19"
  },
  {
    "question": "Which API endpoint does the useReferralInfo hook call under the hood to fetch referral codes?",
    "answer": "It calls the private REST endpoint GET /v1/private/get-referral-info and then accesses `data.referrer_info.referral_codes`. See the EVM API docs under “RESTful API → Private → get-referral-info.”",
    "last_referenced_date": "2025-03-10T08:48:19"
  },
  {
    "question": "Where can I find example code and documentation for the AffiliatePage component to integrate a referral page UI?",
    "answer": "Orderly’s AffiliatePage component lives in the affiliate package of the JS SDK. You can view a working demo in the js-sdk-demo repo at `sdk-demo/src/app/referral/view.tsx`. The useReferralInfo hook is documented under modules/orderly_network_hooks here: https://orderly.network/docs/sdks/tech-doc/modules/orderly_network_hooks#usereferralinfo",
    "last_referenced_date": "2025-03-19T08:59:31"
  },
  {
    "question": "Where is the source code for the Orderly demo referral page (https://demo.orderly.network/referral)?",
    "answer": "The referral demo is in the Orderly JS SDK demo repository. See the code at: https://github.com/OrderlyNetwork/js-sdk-demo/blob/sdk-demo/src/app/referral/view.tsx (recently updated to match the deployed demo).",
    "last_referenced_date": "2025-03-19T08:59:52"
  },
  {
    "question": "Which private API endpoint returns daily trading volume per user under my broker_id so I can build a leaderboard?",
    "answer": "Use the private REST endpoint GET /v1/private/get-builders-users-volumes (see the EVM API docs under “Private → get-builders-users-volumes”). It returns daily volume records per account linked to your broker_id, which you can download and process into a leaderboard.",
    "last_referenced_date": "2025-03-21T05:57:45"
  },
  {
    "question": "Is there a limit on how many referral codes a single user can create under one broker_id?",
    "answer": "Yes. Each user can create up to 10 referral codes per broker_id.",
    "last_referenced_date": "2025-03-21T05:54:35"
  },
  {
    "question": "How can I obtain PnL data for users over a fixed date range to include in a leaderboard?",
    "answer": "Orderly can provide PnL for a specified start time via a custom leaderboard endpoint. This PnL is calculated after fees. You need to specify the tracking start time (which must be in the future), and the Orderly team will deploy an endpoint returning each user’s PnL from that time onward.",
    "last_referenced_date": "2025-03-24T05:54:01"
  },
  {
    "question": "Can I use the Orderly SDK before my own broker_id is configured, and if so which broker_id should I use for development?",
    "answer": "Yes. You can use the SDK without your own broker_id by supplying any existing broker_id returned from the public broker list. Call the public REST endpoint GET /v1/public/get-broker-list on the Orderly EVM API to retrieve available broker_id values, then use one of those in your OrderlyConfigProvider.",
    "last_referenced_date": "2024-04-03T16:26:37"
  },
  {
    "question": "Which advanced order types does Hyperliquid support today that are not yet available in Orderly, and when can we expect those features in Orderly’s roadmap?",
    "answer": "Hyperliquid currently offers Scale and TWAP (time-weighted average price) algorithmic orders. Orderly does not yet support those order types but has them on its product roadmap for Q1–Q2 2025.",
    "last_referenced_date": "2024-12-17T10:49:43"
  },
  {
    "question": "Will Orderly support the Monad chain from day one of its launch, including providing omnichain liquidity to brokers?",
    "answer": "Yes. Orderly will support Monad from day one, so all brokers and their front ends can access Orderly’s omnichain liquidity on Monad as soon as the chain goes live.",
    "last_referenced_date": "2024-12-17T10:50:27"
  },
  {
    "question": "Are there plans for Orderly to integrate Somnia Network’s chain, and what is the expected timeline for that integration?",
    "answer": "Somnia Network integration is under evaluation but there is no firm ETA yet. Orderly is assessing deployment on Somnia and will share details once a decision and timeline are confirmed.",
    "last_referenced_date": "2025-04-18T10:11:09"
  },
  {
    "question": "Is it technically feasible to automatically generate a unique on-chain address per user on perps.exmo.com, have users control their own private keys, and use Orderly’s customizable front-end framework for branding?",
    "answer": "Yes. Orderly supports standard EVM account registration and wallet flows. Your front-end can generate or connect each user’s EOA (e.g., via Privy or Web3-Onboard), call the SDK’s registration flow to create the Orderly account for that address, and the user retains control of their private key. You then embed Orderly’s React Components or use the Hooks/Core SDK to build a fully themable trading UI with your colors, fonts, and logo.",
    "last_referenced_date": "2024-08-28T10:58:57"
  },
  {
    "question": "How long does it typically take today to integrate a custom perp DEX front end with Orderly, and why did the WOO integration take much longer?",
    "answer": "Most builder integrations complete in approximately 2–3 weeks using today’s polished SDKs and docs. The WOOFi integration took several months because it was the first Perp DEX built on Orderly, and our documentation and SDK maturity level were lower at that time.",
    "last_referenced_date": "2024-08-28T11:53:32"
  },
  {
    "question": "Can I hide specific trading pairs in the Orderly UI based on a user’s IP address?",
    "answer": "No. While you can hide or remove specific pairs globally in your front end (for example, using the SDK’s chainFilter prop or custom UI logic), you cannot dynamically show/hide market pairs per user IP via Orderly’s backend.",
    "last_referenced_date": "2024-08-28T11:53:32"
  },
  {
    "question": "Does Orderly’s base trading fee include a 3 bps taker fee, and can my broker charge additional fees on top of that?",
    "answer": "Yes—Orderly’s base taker fee is 3 bps (0.03%), and you can configure any additional maker or taker fee above that. All excess fees you set go 100 % to your broker account.",
    "last_referenced_date": "2024-08-28T11:53:32"
  },
  {
    "question": "Are there grants available to help offset the development and integration costs when building on Orderly?",
    "answer": "Yes. Orderly offers a grant program for builders, structured around milestones such as integration completion and achieving specified average daily volume targets.",
    "last_referenced_date": "2024-08-28T11:53:32"
  },
  {
    "question": "How can I programmatically fetch individual trade events or cumulative notional trading volume for my broker over a specific date range?",
    "answer": "Use the private REST endpoint GET /v1/private/get-builders-users-volumes with `start_date=YYYY-MM-DD&end_date=YYYY-MM-DD`. This returns daily volume records per account under your broker_id. It supports pagination via `page` and `size`, but only aggregates by date (not by timestamp).",
    "last_referenced_date": "2024-10-22T11:33:58"
  },
  {
    "question": "Is there an API to retrieve traders' PnL for a date range, for example to power a trading competition leaderboard?",
    "answer": "Orderly does not expose a general PnL endpoint except for campaigns. You can set up a trading campaign via Orderly support and then call GET /v1/public/get-campaign-ranking to retrieve per-user PnL for that campaign. For custom date-range PnL outside of campaigns, you can pull raw trade events from the Orderly Dashboard Query Service (`/events` endpoint) and calculate PnL yourself.",
    "last_referenced_date": "2024-10-22T11:33:58"
  },
  {
    "question": "Does Orderly provide a native referral program for fee sharing where a referrer earns a portion of the fees paid by the referee?",
    "answer": "Yes. Orderly’s built-in referral program is documented under “Building on EVM → User Flows → Referral System.” It lets you create referral codes with configurable rebate rates for both referrers and referees.",
    "last_referenced_date": "2024-10-22T11:33:58"
  },
  {
    "question": "Can we create or configure trading campaigns via API, or must campaigns be set up by Orderly per builder?",
    "answer": "Campaigns must be configured by the Orderly team—they are not self-service. You can query campaign data with GET /v1/public/get-campaign-ranking, but there’s no public endpoint to create or manage campaigns; you must request Orderly support to set them up.",
    "last_referenced_date": "2024-10-23T03:52:17"
  },
  {
    "question": "Are the trading rewards APIs scoped per builder, and can we configure a weekly fixed-supply points rewards program through Orderly?",
    "answer": "The existing trading rewards program is a global Orderly initiative and not builder-specific. To run a custom points program (e.g., weekly epochs with fixed supply) based on user volumes, you must implement your own logic using Orderly’s volume APIs (e.g., GET /v1/private/get-builders-users-volumes). The built-in rewards endpoints can’t be customized per builder.",
    "last_referenced_date": "2024-10-23T03:52:17"
  },
  {
    "question": "What exactly are user merits in Orderly, and do we need to integrate them?",
    "answer": "User merits refer to Orderly’s airdrop campaign, which has already ended. There is no active merits program to integrate at this time—those records can be ignored for new integrations.",
    "last_referenced_date": "2024-10-23T03:52:59"
  },
  {
    "question": "What is the typical latency for Orderly’s orderbook API calls and matching engine execution?",
    "answer": "Orderly’s orderbook and trade execution latency is approximately 20–50 milliseconds under normal conditions. Our services run on Google Cloud (GCP) in the Tokyo region, so your observed end-to-end latency will also depend on your geographic location.",
    "last_referenced_date": "2024-10-23T03:52:59"
  },
  {
    "question": "Is Orderly’s backend L2 open-source so we can spin up our own private version for paper trading, or must we use the public testnet?",
    "answer": "Orderly’s L2 backend is closed-source and cannot be self-hosted. For paper trading and testing, you should use Orderly’s public testnet environment, which provides the same orderbook and matching functionality without on-chain settlement.",
    "last_referenced_date": "2024-10-26T06:34:01"
  },
  {
    "question": "Can the delegate signer or smart-contract trading feature be used to create special-purpose sub-accounts for contests (e.g., same initial balance per user)?",
    "answer": "In theory, you can use the delegate-signer flow to let a smart contract act on behalf of a user, but it requires custom contract development to manage sub-accounts and delegate an EOA signature. There is no turnkey sub-account API—implementing contest accounts would need bespoke smart-contract logic.",
    "last_referenced_date": "2024-10-26T06:34:45"
  },
  {
    "question": "What integration options does Orderly provide for building a custom DEX frontend, and how do they differ in customization and time to market?",
    "answer": "Orderly supports four integration paths:\n1. Components SDK: Prebuilt React UI components with theming. Quickest to launch with minimal coding. Docs: https://orderly.network/docs/sdks/react/overview. Example: https://github.com/OrderlyNetwork/broker-template\n2. Hooks SDK: React hooks for data and transaction logic. You build your own components for full UI control. Docs: https://orderly.network/docs/sdks/hooks/overview. Example: https://github.com/OrderlyNetwork/example-dex\n3. Core SDK: Minimal EIP-712 + REST wrapper usable in any framework (not React-specific). Provides greatest flexibility but lacks full documentation. npm: https://www.npmjs.com/package/@orderly.network/core\n4. No SDK: Direct REST and WebSocket API calls with EIP-712 signing. Maximum control at the cost of more boilerplate. Docs and code samples: https://orderly.network/docs/build-on-omnichain/building-on-omnichain",
    "last_referenced_date": "2025-04-24T10:39:53"
  },
  {
    "question": "How can I obtain my Orderly key (ed25519 key pair) and secret for EVM and Solana integrations?",
    "answer": "For EVM chains, use the lightweight web app mentioned in the chat to generate and download your Orderly key and secret locally (the app handles key computation per the theoretical article). For Solana, run the provided script to compute the Orderly key from your Solana wallet address. Note: specific URLs or script details were not included in this transcript segment; check with DevRel or the internal examples repo for links.",
    "last_referenced_date": "2025-04-25T10:30:32"
  },
  {
    "question": "What integration paths are available for building a custom front end on Orderly Network, and how do they compare in terms of development effort and customizability?",
    "answer": "Orderly offers four ways to integrate its perpetual DEX into your application:\n\n1. Components SDK: A set of ready-made React UI components (TradingPage, Asset panels, etc.) you simply theme via the Theme Builder. This is the fastest route (minutes to hours) but limits you to the existing component layouts and flows.  \n2. Hooks SDK: A library of React hooks (@orderly.network/hooks) for market data, orders, positions, collateral, etc. You build all your own components around these hooks for unlimited UI flexibility. Expect a few days to a couple of weeks of work depending on your design.  \n3. Core SDK: A minimal EIP-712 + REST wrapper (@orderly.network/core) usable in any JavaScript framework. You write every UI and interaction. This gives you maximum control but requires more boilerplate and manual implementation of data-fetching and signing.  \n4. No SDK: Direct use of the public & private REST and WebSocket APIs with manual EIP-712 signing. Full flexibility with zero SDK abstraction but the most development overhead. Guides and code samples are available in the Omnichain Docs under “Building on Omnichain.”",
    "last_referenced_date": "2025-03-10T10:08:06"
  },
  {
    "question": "How long does it take to integrate the standard out-of-the-box trading front end using Orderly’s Components SDK?",
    "answer": "If you use Orderly’s React Components SDK and drop in the provided TradingPage, Asset panels, and wallet flows, a developer can have a working demo (customized with your colors, logo, and fonts) in about 2–3 days. The demo looks like https://sdk-demo.orderly.network/ and the example code is at https://github.com/OrderlyNetwork/js-sdk-demo.",
    "last_referenced_date": "2025-03-02T20:37:52"
  },
  {
    "question": "How can I obtain a broker ID for testing on Orderly’s testnet?",
    "answer": "To get started on testnet immediately, just use the broker ID “demo”. You can point all of your testnet API and SDK calls to brokerId=demo and begin development without waiting for a custom broker setup.",
    "last_referenced_date": "2025-03-19T20:26:19"
  },
  {
    "question": "What information do I need to provide Orderly to set up a new mainnet broker ID?",
    "answer": "To register a broker on Orderly mainnet, supply the following:\n• broker_id: your chosen identifier (e.g., “mune”)\n• broker_name: your display name (e.g., “Mune Exchange”)\n• default_taker_fee: decimal form of your total taker fee (e.g., 0.06 for 6 bps)\n• default_maker_fee: decimal form of your total maker fee (e.g., 0.03 for 3 bps)\nOrderly’s base fees are 3 bps taker and 0 bps maker; any excess you configure goes 100 % to your broker. You can adjust these rates later once your admin wallet is set up. See the Custom Fees guide under Building on Omnichain → User Flows → Custom Fees for full details.",
    "last_referenced_date": "2025-03-20T06:39:26"
  },
  {
    "question": "Do I need a custom broker ID before I start integrating Orderly, or can I continue development with a placeholder?",
    "answer": "You do not need a final broker ID to begin integration. Use the placeholder broker ID “demo” while you configure your own. Once development is nearly complete, you can switch from demo to your custom broker ID without blocking your build.",
    "last_referenced_date": "2025-03-20T16:47:15"
  },
  {
    "question": "How can a liquidity pool smart contract account hedge exposures on Orderly’s perpetual DEX? Do I need to use the delegate signer feature?",
    "answer": "While Orderly’s delegate signer flow lets you register a smart contract account as an Orderly user (see “Building on EVM → User Flows → Delegate Signer”), fully on-chain automated trading isn’t supported. Instead, have your pool or LP open and close positions via an externally owned account (EOA) wallet calling the Orderly SDK or REST APIs. This avoids the complexity of delegate signer since you can’t execute trades entirely on-chain.",
    "last_referenced_date": "2025-03-26T14:13:43"
  },
  {
    "question": "Which trading pairs does Orderly support and do you offer coin-margined ETH-margined markets?",
    "answer": "Orderly currently offers only USDC-margined perpetual markets—there are no coin-margined pairs (e.g., ETH-margined) at this time. You can see the full list of supported USDC-margined symbols in the docs under “Supported Markets”: https://orderly.network/docs/introduction/trade-on-orderly/supported-markets",
    "last_referenced_date": "2025-03-27T11:13:12"
  },
  {
    "question": "Do users have to deposit funds into Orderly’s vault contracts to trade perpetual futures, or can they continue using our own smart contract deposits and still access the Orderly orderbook?",
    "answer": "Users must deposit their funds into Orderly’s vault contracts in order to access and trade on the Orderly orderbook. You can keep your existing front-end UI and flow, but under the hood deposits need to go to the Orderly vault rather than your own contract.",
    "last_referenced_date": "2024-07-11T17:55:54"
  },
  {
    "question": "What are the available integration options for building a custom Orderly DEX frontend, and where can I find the documentation for each approach?",
    "answer": "Orderly supports four main integration paths:\n\n1. Components SDK (React UI components):\n   • Docs: https://orderly.network/docs/sdks/react/overview\n   • Example repo: https://github.com/OrderlyNetwork/js-sdk-demo\n   • Live demo: https://sdk-demo.orderly.network/\n   \n2. Hooks SDK (React hooks for data + transactions):\n   • Docs: https://sdk.orderly.network/docs/hooks/overview\n   • Example repo: https://github.com/OrderlyNetwork/example-dex\n   • Live demo: https://orderly-dex.pages.dev/\n   \n3. Core SDK (EIP-712 + REST wrapper for any framework):\n   • npm: https://www.npmjs.com/package/@orderly.network/core\n   • Note: minimal abstraction, no formal docs yet\n   \n4. No SDK (direct REST & WebSocket + EIP-712 signing):\n   • Docs: https://orderly.network/docs/build-on-evm/building-on-evm\n   • Code examples in multiple languages are provided in the docs.\n\nYou can start with any approach and later extend or swap as needed. Integrating Solana or additional chains follows the same process once the network support is live.",
    "last_referenced_date": "2024-08-07T21:28:41"
  },
  {
    "question": "What is the timeline for Orderly’s Solana integration on testnet and mainnet?",
    "answer": "As of 2024-11-06, Solana integration is deployed on Orderly testnet. The mainnet launch is scheduled to occur two weeks after that date.",
    "last_referenced_date": "2024-11-06T11:51:54"
  },
  {
    "question": "Then how much commission do I earn for opening and closing positions given my default taker fee is 0.06% and maker fee is 0.04%?",
    "answer": "Orderly’s base fees are 0.03% taker and 0% maker. With your default taker fee of 0.06% and maker fee of 0.04%, your broker earns the excess over the base: that is 0.03% on taker trades and 0.04% on maker trades for all volume.",
    "last_referenced_date": "2025-05-24T15:14:44"
  },
  {
    "question": "Is it permissible to use one broker ID for multiple DEX front ends or projects, and what are the implications for the admin wallet and user accounts?",
    "answer": "Yes—you can use a single broker ID across multiple front ends or projects. Only one admin wallet can be registered under that broker ID, and users will share the same Orderly account across all of those projects.",
    "last_referenced_date": "2025-05-25T10:16:37"
  },
  {
    "question": "My Orderly broker account is registered only on mainnet and not on testnet or staging. Can I still use the broker ID on mainnet, and what happens if I call the staging environment?",
    "answer": "Yes—you can trade on mainnet using your broker ID as long as your account is registered there. If the account isn’t registered on testnet or staging, calls to the staging API will fail, but production mainnet API calls will succeed.",
    "last_referenced_date": "2025-05-25T10:10:06"
  },
  {
    "question": "Can I use the broker ID to execute trades before the admin wallet is configured, and will I earn any broker commission in that case?",
    "answer": "Yes—you can start placing trades with your broker ID even if the admin wallet isn’t configured yet. Trades will execute normally, but no broker commission fees will be credited until the admin wallet is registered.",
    "last_referenced_date": "2025-05-24T14:33:30"
  },
  {
    "question": "What UI/UX enhancements and bug fixes are included in the Orderly SDK v2.1.3 release?",
    "answer": "Orderly SDK v2.1.3 introduces these changes:\n\n🔧 UI/UX Enhancements\n• Funding Rate Comparison now supports sorting  \n• “Buy/Sell” labels replaced with “Long/Short” for clarity  \n• Selected sorting preferences are preserved after collapsing and reopening the market tab\n\n🐞 Bug Fixes\n• Fixed an issue where error messages were not displaying correctly",
    "last_referenced_date": "2025-05-26T10:14:55"
  },
  {
    "question": "Can we white-label the Orderly trading interface under our own domain, what branding customization options are available, and where can I find example implementations using both the Components SDK and the Hooks SDK?",
    "answer": "Yes. You can host the Orderly UI on your own domain. If you use the React Components SDK, you are limited to its theming options and it will display a “powered by Orderly” watermark; see the broker-template example at https://github.com/OrderlyNetwork/broker-template. If you need full UI control and want to remove the watermark, use the Hooks SDK to build your own components; see the example-dex repo at https://github.com/OrderlyNetwork/example-dex.",
    "last_referenced_date": "2025-04-29T09:04:08"
  },
  {
    "question": "Where can I find Orderly Network’s security audit reports, and how are smart contract upgrades managed?",
    "answer": "Orderly’s security audits are published in the GitHub repository under the “Audits” folder: https://github.com/OrderlyNetwork/Audits. Smart contract upgrades are performed via a multi-signature (multisig) governance process.",
    "last_referenced_date": "2025-05-08T10:44:43"
  },
  {
    "question": "What is Orderly’s revenue share model for brokers, including any discounted taker fee rates for gold-tier brokers?",
    "answer": "Orderly’s base fee is 0.03% taker and 0% maker (retained by Orderly). Brokers collect 100% of any custom fee above that. Gold-tier brokers qualify for a reduced base taker fee as low as 0.025%.",
    "last_referenced_date": "2025-05-08T10:44:43"
  },
  {
    "question": "Where can I view and monitor my broker’s trading volume and activity metrics programmatically?",
    "answer": "Orderly publishes daily trading volume and activity data on a public Dune Analytics dashboard. You can filter by your broker_id to view volumes, fees, and other stats at https://dune.com/orderly_network/orderly-dashboard.",
    "last_referenced_date": "2025-05-08T10:45:38"
  },
  {
    "question": "Is it possible to integrate Orderly to build a perpetual DEX on a Solana‐based SVM rollup, and what is the recommended integration approach?",
    "answer": "Yes—SVM rollups on Solana can integrate Orderly’s perpetual engine, but you must wire your rollup into Orderly’s cross‐chain infrastructure. The preferred path is to embed LayerZero in your rollup so that user deposits on your rollup are relayed directly into Orderly’s Solana vault via LayerZero messaging. If LayerZero isn’t available, you can instead implement a custom bridge from your rollup to the Solana vault so deposits automatically arrive in Orderly’s vault contract. Without one of these bridges, deposit/withdrawal flows in the Orderly SDK will not function.",
    "last_referenced_date": "2025-04-16T13:11:31"
  },
  {
    "question": "Our rollup stack uses Hyperlane for cross‐chain transfers—will that suffice for integrating with Orderly’s Solana vault, or do we need a LayerZero integration?",
    "answer": "Hyperlane alone is not sufficient. Orderly relies on LayerZero for its cross‐chain messaging, so your rollup must integrate with LayerZero for deposits and withdrawals to flow into the Orderly vault. While a custom bridge using Hyperlane could theoretically be built, it would require bespoke development and would not support the out-of-the-box deposit/withdraw hooks in the Orderly SDK.",
    "last_referenced_date": "2025-04-16T13:45:13"
  },
  {
    "question": "Does my rollup need to be EVM-compatible to integrate with Orderly, or can a pure Solana/SVM rollup also access Orderly’s services?",
    "answer": "EVM compatibility is not required. Orderly supports Solana/SVM rollups directly as long as your rollup integrates with LayerZero for cross-chain messaging. You can use the Orderly Solana vault and the Solana adapter in the SDK without an EVM layer. However, without LayerZero integration, deposit/withdraw features and certain SDK modules will not work.",
    "last_referenced_date": "2025-04-17T06:12:05"
  },
  {
    "question": "Can we open a trade via on-chain smart contract calls, or must we use Orderly’s API?",
    "answer": "No. Opening trades on Orderly is only possible via the REST/WebSocket API; there is no on-chain contract call to submit a new order.",
    "last_referenced_date": "2024-08-25T09:07:50"
  },
  {
    "question": "Can we open a trade on someone else’s behalf by passing in their address or signature?",
    "answer": "Yes—if you have the user’s Orderly secret key (the ed25519 key), you can place trades on their behalf via the API.",
    "last_referenced_date": "2024-08-25T21:57:21"
  },
  {
    "question": "Have any account abstraction (AA) wallets (e.g., Coinbase Wallet) been integrated with Orderly, and how are AA wallets supported?",
    "answer": "Currently, AA wallets are not directly supported because Orderly relies on EIP-712 for key generation and signing. To use a smart contract account, you must employ the delegate signer feature, which registers a contract and delegates EIP-712 signatures to an externally owned account.",
    "last_referenced_date": "2024-08-26T07:40:26"
  },
  {
    "question": "Is it possible to execute trades directly from smart contract wallets on Orderly, and how would integration work?",
    "answer": "If each user uses a smart contract wallet, you must use Orderly’s delegate signer flow for account registration, Orderly key creation, deposits, withdrawals, and order submission. This flow delegates signing to an EOA via EIP-712. See the “Building on EVM → User Flows → Delegate Signer” guide for full instructions.",
    "last_referenced_date": "2025-05-21T11:19:27"
  },
  {
    "question": "What does the delegateSignerEnabled option do in the Orderly SDK and how do I use it?",
    "answer": "delegateSignerEnabled enables using a smart-contract account (e.g., multisig or custom smart wallet) on Orderly by delegating EIP-712 signing to an externally owned account. It supports all key user flows—registration, Orderly key creation, deposits, withdrawals, and trading—via the delegate signer process. For step-by-step instructions and sample code, see the “Building on EVM → User Flows → Delegate Signer” guide.",
    "last_referenced_date": "2025-05-21T11:19:27"
  },
  {
    "question": "Can you share the documentation you mentioned about the automation integration API or framework?",
    "answer": "The chat did not include a specific link or title for an “automation integration API or framework” document. The only references provided were the general integration guides:  \n\n• Building on EVM → React Components SDK overview: https://orderly.network/docs/sdks/react/overview  \n• Building on EVM → Hooks SDK overview: https://sdk.orderly.network/docs/hooks/overview  \n• Core SDK on npm: https://www.npmjs.com/package/@orderly.network/core  \n• No‐SDK guide (direct REST/WebSocket and EIP-712 examples): https://orderly.network/docs/build-on-evm/building-on-evm  \n\nNo separate “automation integration” docs were attached or linked in this transcript segment.",
    "last_referenced_date": "2024-11-19T18:09:18"
  },
  {
    "question": "Where can I find comprehensive developer documentation and an SDK overview for integrating with Orderly Network, including guides for account creation, wallet authentication, and delegate signer flows?",
    "answer": "Orderly’s main developer resources are available at:\n• Official docs: https://orderly.network/docs/home\n• Hooks SDK overview: https://sdk.orderly.network/docs/hooks/overview\nFor user flow guides, see:\n• Account creation: https://orderly.network/docs/build-on-evm/user-flows/accounts\n• Wallet authentication: https://orderly.network/docs/build-on-evm/user-flows/wallet-authentication\n• Delegate signer setup: https://orderly.network/docs/build-on-evm/user-flows/delegate-signer",
    "last_referenced_date": "2024-07-23T18:10:48"
  },
  {
    "question": "Can brokers start on the public fee tier and later switch to staking ORDER for improved fee tiers? What steps are required to configure ORDER staking for a broker admin wallet?",
    "answer": "Yes. You can begin on the public tier and later move to an ORDER-staking tier. To do so, notify the Orderly team which admin wallet address you will use to stake ORDER tokens. They will configure your broker ID to use the staking-based fee tier for that wallet.",
    "last_referenced_date": "2025-05-16T13:59:02"
  },
  {
    "question": "Does Orderly Network support spot trading, or is only perpetual futures trading available?",
    "answer": "Orderly currently supports only perpetual futures trading. Spot trading is not available on Orderly at this time.",
    "last_referenced_date": "2025-05-24T14:46:14"
  },
  {
    "question": "Is there a minimum amount required for broker fee distributions? Where and when can I check the pending fees and see when they are distributed?",
    "answer": "There is no minimum distribution amount. Broker fee rebates are automatically credited to your registered admin wallet once per day at 00:00 UTC. You can programmatically check accrued and pending broker fees by calling the private endpoint GET /v1/private/get-builders-users-volumes on the Orderly EVM API, which returns daily volume and fee fields.",
    "last_referenced_date": "2025-05-26T07:07:20"
  },
  {
    "question": "How does Orderly’s integration work so that orders placed on my platform are sent to Orderly’s orderbook?",
    "answer": "By integrating Orderly’s SDK into your front end, you connect to Orderly’s omnichain orderbook and trading APIs. When your users place orders in your UI, those calls invoke the SDK and automatically submit the orders to Orderly’s orderbook. You get market data and execution via the same SDK without running your own matching engine.",
    "last_referenced_date": "2024-08-06T20:21:41"
  },
  {
    "question": "If our platform is deployed on a non-EVM chain (e.g., Aptos), can we still use Orderly’s liquidity and orderbook?",
    "answer": "Orderly currently supports perpetual futures only on EVM chains. Integration uses LayerZero cross-chain messaging to record trades on Orderly’s L2. Today the supported EVM networks are Arbitrum, Optimism, Mantle, Ethereum, Polygon, and Base. Non-EVM chains like Aptos are not supported at this time.",
    "last_referenced_date": "2024-08-06T20:25:30"
  },
  {
    "question": "Which chains and token standards does Orderly currently support for deposits, and what is the minimum order size?",
    "answer": "Orderly accepts only native USDC deposits and withdrawals on these EVM chains: Arbitrum, Optimism, Mantle, Ethereum, Polygon, and Base. The minimum order size for any market is the USDC-equivalent of 10 USDC. To verify exact tick sizes and limits per symbol, call GET /v1/public/get-available-symbols and check the base_tick and base_min fields for each market.",
    "last_referenced_date": "2024-08-06T20:25:30"
  },
  {
    "question": "When setting up a new broker ID on Orderly Network (for example, “hyperai”), what information do I need to provide and what do the default fee settings and broker tier mean?",
    "answer": "When you register a broker ID on Orderly, submit the following:\n• broker_id: your unique identifier (e.g., “hyperai”)  \n• broker_name: display name (e.g., “HyperAI”)  \n• default_taker_fee_rate: total taker fee in decimal (e.g., 0.06 for 6 bps)  \n• default_maker_fee_rate: total maker fee in decimal (e.g., 0.03 for 3 bps)  \n• broker_tier: choose “Public wallet” (no staking) or select a staking tier to reduce Orderly’s base taker fee (0.03 %) further.  \nOrderly’s base fees are 0.03 % taker and 0 % maker (Orderly keeps these). Any fee above the base becomes your revenue (e.g., 0.06 % – 0.03 % = 0.03 % income). These defaults can be adjusted later once your admin wallet is registered.",
    "last_referenced_date": "2025-05-16T03:14:38"
  },
  {
    "question": "After my broker profile is set up on Orderly Network, how do I register an admin wallet so I can collect broker fee rebates and access private API calls?",
    "answer": "Once your broker ID is created, register an admin EOA address under that broker_id via the broker-registration UI or the private registration endpoint. For example, go to https://orderlynetwork.github.io/broker-registration/, connect your wallet, select your broker_id (e.g., “hyperai”), and complete the prompts. Then share that registered address with the Orderly team so they can finalize it as your admin wallet. That wallet will receive all daily broker fee rebates and authenticate private endpoints (e.g., custom fees, referral management).",
    "last_referenced_date": "2025-05-23T09:40:41"
  },
  {
    "question": "Where can I find the main Orderly Network developer documentation and key resources for integration, including omnichain docs, getting started guide, SDK reference, fee structure, theme building, and analytics dashboard?",
    "answer": "All core developer resources are linked from the Orderly documentation home at https://orderly.network/docs. There you’ll find:\n• Omnichain integration guide under “Build on Omnichain”  \n• Getting Started guide under “Building on EVM → Getting Started”  \n• SDK reference for React Components and Hooks under “SDKs”  \n• Fee Structure documentation under “Introduction → Fee Structure”  \n• Theme Builder tool under “Components → Theming”  \n• Analytics and volume metrics on the Orderly Dune Analytics dashboard at dune.com/orderly_network/orderly-dashboard",
    "last_referenced_date": "2024-09-03T17:42:53"
  },
  {
    "question": "What are the four integration options Orderly provides for building a custom DEX frontend, and where can I find the documentation and example implementations for each?",
    "answer": "Orderly supports four integration paths:\n1. Components SDK (React UI components with theming):\n   • Docs: https://orderly.network/docs/sdks/react/overview  \n   • Example repo: https://github.com/OrderlyNetwork/js-sdk-demo  \n   • Live demo: https://sdk-demo.orderly.network/\n2. Hooks SDK (React hooks for data and transaction logic):\n   • Docs: https://sdk.orderly.network/docs/hooks/overview  \n   • Example repo: https://github.com/OrderlyNetwork/example-dex  \n   • Live demo: https://orderly-dex.pages.dev/\n3. Core SDK (minimal EIP-712 + REST wrapper for any UI framework):\n   • npm: https://www.npmjs.com/package/@orderly.network/core  \n   • Note: minimal docs currently\n4. No SDK (direct REST/WebSocket + EIP-712 signing):\n   • Docs and code samples: https://orderly.network/docs/build-on-evm/building-on-evm",
    "last_referenced_date": "2024-09-03T17:43:23"
  },
  {
    "question": "Can I submit new orders via the WebSocket API, or must order placement be done through REST endpoints?",
    "answer": "Order placement is only supported via our REST API endpoints. The WebSocket API is provided solely for subscribing to public market data and private account data streams, not for sending order submissions.",
    "last_referenced_date": "2025-05-27T06:38:59"
  },
  {
    "question": "Does integrating Orderly’s perp DEX on a new chain (for example, CDK chain) require LayerZero integration, and are there any other technical blockers for using Orderly on that chain?",
    "answer": "Yes. To build a perpetual DEX front end on any new EVM-compatible chain with Orderly’s omnichain matching engine, you must integrate LayerZero for cross-chain messaging. Beyond LayerZero integration, there are no additional blockers mentioned—once LZ is in place, you can connect and trade using Orderly’s APIs and SDKs as usual.",
    "last_referenced_date": "2025-04-22T11:55:50"
  },
  {
    "question": "What information do I need to provide to set up a new broker ID on Orderly’s EVM environment, and how does the default fee structure work including Orderly’s base fee and the broker’s additional earnings?",
    "answer": "When you request a new broker ID, supply:\n• broker_id: your chosen identifier (e.g., “one_bow”)  \n• broker_name: the display name (e.g., “OneBow”)  \n• default_taker_fee: the total taker fee you want charged (decimal, e.g., 0.06 for 6 bps)  \n• default_maker_fee: the total maker fee you want charged (decimal, e.g., 0.03 for 3 bps)  \nOrderly’s base fees are a 0.025 % taker fee and 0 % maker fee (Orderly keeps that base). Any fee you configure above the base goes 100 % to your broker account. You can change these rates later via your admin wallet once it’s registered. For full instructions, see the “Custom Fees” guide in the docs under Build on EVM → User Flows → Custom Fees.",
    "last_referenced_date": "2024-10-16T06:21:14"
  },
  {
    "question": "When will Solana network support be available on Orderly, and can I begin integrating on testnet right now using the Hooks SDK?",
    "answer": "Solana support is scheduled to go live by the end of this month. In the meantime, if you’re using the Hooks SDK (without the React Components), you can already start integrating against our testnet today. See the example-dex repository for a working Hooks-based integration: https://github.com/OrderlyNetwork/example-dex",
    "last_referenced_date": "2024-11-04T10:49:42"
  },
  {
    "question": "What is the correct API endpoint to request testnet USDC faucet deposits on the Solana network?",
    "answer": "Use the Solana-specific faucet endpoint on testnet:  \nPOST https://testnet-operator-sol.orderly.org/v1/faucet/usdc  \nThis URL differs from the EVM faucet endpoint and will credit USDC directly to your Solana testnet Orderly account.",
    "last_referenced_date": "2024-12-15T13:48:35"
  },
  {
    "question": "Which public REST API endpoint returns predicted funding rates for all markets?",
    "answer": "Call the public REST endpoint GET /v1/public/get-predicted-funding-rates-for-all-markets. For details, see the Public EVM API section in the Orderly docs under “get-predicted-funding-rates-for-all-markets.”",
    "last_referenced_date": "2025-02-27T09:59:50"
  },
  {
    "question": "Are the funding rate values returned by the Orderly API 8-hour rates, and how do I annualize them?",
    "answer": "Yes—the funding rate field represents the 8-hour funding rate. To approximate an annualized rate, multiply the 8-hour rate by 3 to get a daily rate and then by 365 for the yearly rate (annualized rate ≈ fundingRate * 3 * 365).",
    "last_referenced_date": "2025-03-25T15:28:27"
  },
  {
    "question": "For builders looking to launch a perpetual DEX on top of Orderly Network, what integration options are available and how do they differ in time to market and customizability?",
    "answer": "Orderly offers four paths to integrate a perp DEX frontend:\n1. Components SDK – Drop-in React UI components (TradingPage, asset panels, etc.). Least custom code required; customize appearance via theming. Docs: “Components → Introduction” at sdk.orderly.network/components/introduction\n2. Hooks SDK – React hooks (@orderly.network/hooks) for market data, orders, positions, collateral, etc. You build your own components for full UI control. Docs: “Hooks → Overview” at sdk.orderly.network/docs/hooks/overview and example at github.com/OrderlyNetwork/sdk-workshop\n3. Core SDK – Minimal wrapper (@orderly.network/core) for API calls and EIP-712 signing usable in any JS framework. Provides the raw primitives with minimal abstraction; not yet fully documented. npm: www.npmjs.com/package/@orderly.network/core\n4. No SDK – Direct REST and WebSocket APIs with manual EIP-712 message signing. Full flexibility; example flows in the docs under “Building on EVM → Building on EVM” at orderly.network/docs/build-on-evm/building-on-evm",
    "last_referenced_date": "2024-09-06T11:41:50"
  },
  {
    "question": "What are the criteria and liquidity requirements for a project to list its token on Orderly Network?",
    "answer": "To list on Orderly, a project must satisfy three core criteria:\n1. Price index availability: At least three independent price feed sources.  \n2. Market maker: You must have a market maker engaged and that market maker must integrate with Orderly’s orderbook.  \n3. Fully diluted valuation (FDV) of at least $20 million.\n\nIn addition, you must meet these liquidity requirements in the live orderbook:\n• Depth: ≥ $20 000 USD of aggregate orders on both the bid side (–2% from mid) and the ask side (+2% from mid).  \n• Levels: At least 15 distinct price levels (legs) on each side within ± 2% of the mid price.  \n• Spread: Maximum bid‐ask spread of 50 bps.  \n• Uptime: ≥ 90% orderbook availability.",
    "last_referenced_date": "2025-02-24T17:33:01"
  },
  {
    "question": "Which market makers does Orderly Network work closely with and can introduce to help support perpetual listings?",
    "answer": "Orderly has established relationships with several professional market makers who can provide liquidity support for new perp listings. The team can facilitate introductions to any of these firms:\n\n• Kronos  \n• Vovega  \n• Selini  \n• Presto Labs  \n• Pulsar  \n• Wintermute  \n• Laser Digital  \n• Manifold  \n\nYou can reach out to Orderly’s listings lead to request introductions and discuss retainer arrangements.",
    "last_referenced_date": "2025-02-26T13:27:55"
  },
  {
    "question": "What details do I need to provide to register a new broker ID on Orderly for BugsDEX, and how do I confirm that the prefilled information is correct?",
    "answer": "To register your broker on Orderly, supply the following information to the DevRel team for both production and staging environments:\n• broker_id: Bugs\n• broker_name: bugs\n• default_taker_fee: 0.06%\n• default_maker_fee: 0.04%\n• tier: public\n• staking_wallet: (if any)\nReview these values and confirm they are correct. Once confirmed, the Orderly team will configure your broker account accordingly.",
    "last_referenced_date": "2025-05-26T13:05:28"
  },
  {
    "question": "Does the `broker-template` starter repo include a complete React front end with wallet connection, deposit, trading, withdrawal and history pages that I can clone and modify for BugsDEX?",
    "answer": "Yes. The `broker-template` repository on GitHub (https://github.com/OrderlyNetwork/broker-template) provides a starter React application scaffolded with basic Orderly integration, including wallet connection, deposit, trading, withdrawal and history page components. You can clone that repo, insert your broker key, and customize it to fit your branding and feature needs.",
    "last_referenced_date": "2025-05-26T13:08:42"
  },
  {
    "question": "How do base fees and custom broker fees work on Orderly, and what is the minimum taker fee I can configure for a public-tier broker?",
    "answer": "Orderly enforces a base fee of 0.03% taker and 0% maker (retained by Orderly). For a public-tier broker, you cannot set rates below this base. Any fee you configure above the base is 100% your revenue. For example, if you set a 0.055% taker fee, Orderly keeps 0.03% and you earn the extra 0.025%.",
    "last_referenced_date": "2025-05-27T02:57:32"
  },
  {
    "question": "What details do I need to confirm and provide for broker registration to set up my DEX on Orderly Network?",
    "answer": "Provide and confirm the following for both production and staging environments:\n• Broker ID: your chosen identifier (e.g., “Blitz”)  \n• Broker Name: display name (e.g., “blitz”)  \n• Environment: Production and Staging  \n• Default Taker Fee: decimal form of total taker fee (e.g., 0.06 for 6 bps)  \n• Default Maker Fee: decimal form of total maker fee (e.g., 0.04 for 4 bps)  \n• Tier: e.g., public  \n• Staking Wallet: address or “–” if none specified  \nOnce you confirm these values, DevRel will proceed with your broker configuration.",
    "last_referenced_date": "2025-05-21T15:32:48"
  },
  {
    "question": "Which guide should I follow for affiliate/DX onboarding and what preparation is needed for applying for the TradingView Charting Library license?",
    "answer": "Follow the Affiliate Onboarding guide at “Build on Omnichain → Affiliate Onboarding”:\nhttps://orderly.network/docs/build-on-omnichain/affiliate-onboarding\n\nPlan a demo deployment as soon as possible so you can apply for the TradingView Advanced Charts license early—approval may take time. Also confirm and secure a domain for your DEX before submitting your license request.",
    "last_referenced_date": "2025-05-22T06:56:11"
  },
  {
    "question": "How can I integrate a custom .orderly domain name resolution smart contract into the Orderly React SDK so that users see domain names instead of raw addresses?",
    "answer": "You can extend the `useAccount` hook from `@orderly.network/hooks` to query your domain contract and attach the result to the account state. For example, inside your custom hook implementation:\n\n```ts\nconst { state, account } = useAccount();\nuseEffect(() => {\n  if (!state.address) return;\n  const fetchDomain = async () => {\n    const domainName = await domainContract.getDomainForAddress(state.address);\n    account.setState({ ...state, orderly_domain: domainName });\n  };\n  fetchDomain();\n}, [state.address]);\n```\n\nThen in your UI:\n\n```tsx\nconst { state } = useAccount();\nreturn <span>{state.orderly_domain || state.address}</span>;\n```\n\nThis approach makes domain resolution a native part of the account object without additional REST endpoints or manual calls.",
    "last_referenced_date": "2024-12-23T22:35:51"
  },
  {
    "question": "What new features, UI/UX enhancements, and bug fixes are included in Orderly SDK v2.1.2?",
    "answer": "Orderly SDK v2.1.2 (May 19, 2025) adds support for eight new default languages (ru, id, tr, it, pt, uk, pl, nl), auto-fill of orderbook price with Limit order switch on click, preservation of order input after submission, an integrated Announcement API (with type & updated time), a redesigned language selection modal, a toggle between Coin and USDC in the order book, and auto-capitalization of referral code input. Bug fixes include correct update of Take-Profit offset (%) with market price and a fix for portfolio page alignment.",
    "last_referenced_date": "2025-05-19T07:04:16"
  },
  {
    "question": "What UI/UX enhancements and bug fixes are included in Orderly SDK v2.1.3?",
    "answer": "Orderly SDK v2.1.3 (May 26, 2025) introduces:\n\n🔧 UI/UX Enhancements\n• Funding Rate Comparison now supports sorting  \n• “Buy/Sell” labels replaced with “Long/Short” for clarity  \n• Selected sorting preferences are preserved after collapsing and reopening the market tab\n\n🐞 Bug Fixes\n• Fixed an issue where error messages were not displaying correctly",
    "last_referenced_date": "2025-05-26T10:14:43"
  },
  {
    "question": "Where can I find Orderly’s System Updates Channel and what is it used for?",
    "answer": "Join the Orderly System Updates Channel on Telegram at https://t.me/+VnpoOvYpJXA2ZTc1. The channel is used to announce upcoming scheduled maintenance, new listing launches, and other important system updates so you can keep your users informed.",
    "last_referenced_date": "2024-05-10T02:44:19"
  },
  {
    "question": "Where can I find FAQs and troubleshooting guides for common user issues on Orderly?",
    "answer": "Orderly’s comprehensive FAQs and troubleshooting guides are available at https://orderly.network/docs/troubleshooting/introduction. That page covers common issues and initial triage steps. If further help is required after following the guide, submit a ticket via the Customer Service portal linked there.",
    "last_referenced_date": "2024-05-10T02:44:19"
  },
  {
    "question": "How do I configure automatic cancellation of pending orders during Orderly’s scheduled maintenance windows?",
    "answer": "Pending orders are not automatically cancelled by default. To enable automatic cancellation during maintenance windows, call the private EVM API endpoint PUT /v1/private/set-maintenance-config with the appropriate payload (e.g., {\"cancel_pending_orders\": true}), signed by your broker admin key. See the docs under “Build on EVM → RESTful API → Private → set-maintenance-config” at https://orderly.network/docs/build-on-evm/evm-api/restful-api/private/set-maintenance-config",
    "last_referenced_date": "2024-05-10T02:44:19"
  },
  {
    "question": "When is the next scheduled maintenance for Orderly’s EVM and NEAR systems, and how long will each window last?",
    "answer": "The upcoming maintenance is scheduled for May 28, 2024:  \n• EVM systems: 14:00–15:30 UTC+8 (1.5 hours)  \n• NEAR systems: 15:00–16:30 UTC+8 (1.5 hours)  \nNo trading will occur during those windows, so plan accordingly.",
    "last_referenced_date": "2024-05-22T10:51:51"
  },
  {
    "question": "What integration options are available for developers building on Orderly Network, and where can I find their documentation and examples?",
    "answer": "Orderly provides four integration paths:\n1. Components SDK: React UI components with theming. Docs: https://orderly.network/docs/sdks/react/overview; Example repo: https://github.com/OrderlyNetwork/broker-template; Live demo: https://broker-template-seven.vercel.app/\n2. Hooks SDK: React hooks for data fetching and transactions. Docs: https://orderly.network/docs/sdks/hooks/overview; Example repo: https://github.com/OrderlyNetwork/example-dex; Live demo: https://orderly-dex.pages.dev/\n3. Core SDK: Minimal EIP-712 + REST wrapper usable with any UI library. npm: https://www.npmjs.com/package/@orderly.network/core (no formal docs yet)\n4. No SDK: Direct use of REST/WebSocket APIs with EIP-712 signing examples. Docs: https://orderly.network/docs/build-on-omnichain/building-on-omnichain",
    "last_referenced_date": "2025-05-23T10:15:17"
  },
  {
    "question": "How can I integrate WeaveVM for ledger archiving of Orderly’s EVM chain, and what technical work is required on our side?",
    "answer": "For ledger archiving, simply point the WeaveVM archiver at your Orderly chain; they handle the full archival process on Arweave and cover the fees on their side. No additional technical integration is required. If you also want to use WeaveVM as a Data Availability (DA) layer, that is possible but requires separate, deeper technical integration.",
    "last_referenced_date": "2024-09-25T16:21:19"
  },
  {
    "question": "What integration options are available for building a frontend on Orderly Network, and where can I find the documentation and examples for each?",
    "answer": "Orderly provides four main paths to integrate your frontend with its omnichain perpetual trading engine:\n\n1. Components SDK (React UI components):\n   • Docs: https://orderly.network/docs/sdks/react/overview\n   • Example repo: https://github.com/OrderlyNetwork/js-sdk-demo\n   • Live demo: https://sdk-demo.orderly.network/\n\n2. Hooks SDK (React hooks for data & transactions):\n   • Docs: https://sdk.orderly.network/docs/hooks/overview\n   • Example repo: https://github.com/OrderlyNetwork/example-dex\n   • Live demo: https://orderly-dex.pages.dev/\n\n3. Core SDK (minimal EIP-712 + REST wrapper for any framework):\n   • npm: https://www.npmjs.com/package/@orderly.network/core\n   • Note: this SDK is not yet fully documented but offers the raw API + signing primitives.\n\n4. No SDK (direct REST/WebSocket + custom EIP-712 signing):\n   • Docs & examples in multiple languages: https://orderly.network/docs/build-on-evm/building-on-evm",
    "last_referenced_date": "2024-09-23T11:07:06"
  },
  {
    "question": "What integration options does Orderly provide for building a DEX frontend, and where can I find the documentation, example repositories, and live demos for each?",
    "answer": "Orderly offers four integration paths:\n\n1. Components SDK: Prebuilt React UI components you can theme. Documentation at https://orderly.network/docs/sdks/react/overview. Example repo: https://github.com/OrderlyNetwork/js-sdk-demo. Live demo: https://sdk-demo.orderly.network/.\n\n2. Hooks SDK: React hooks for data fetching and transaction logic. Documentation at https://sdk.orderly.network/docs/hooks/overview. Example repo: https://github.com/OrderlyNetwork/example-dex. Live demo: https://orderly-dex.pages.dev/.\n\n3. Core SDK: Minimal wrapper for REST and EIP-712 signing usable in any JavaScript framework. Package on npm: https://www.npmjs.com/package/@orderly.network/core (note: not yet fully documented).\n\n4. No SDK: Direct REST and WebSocket API calls with manual EIP-712 signing. Guide and code examples at https://orderly.network/docs/build-on-evm/building-on-evm.",
    "last_referenced_date": "2024-10-23T14:29:07"
  },
  {
    "question": "What new features, UI/UX enhancements, and bug fixes are included in Orderly SDK v2.1.2?",
    "answer": "Orderly SDK v2.1.2 (released May 19, 2025) introduces support for 8 new default languages: Russian (ru), Indonesian (id), Turkish (tr), Italian (it), Portuguese (pt), Ukrainian (uk), Polish (pl), and Dutch (nl). UI/UX enhancements include clicking on the order book to auto-fill the price and switch to Limit order, preserving order input after submission, an integrated Announcement API with type and updated time, a redesigned language selection modal, a toggle between Coin and USDC in the order book, and auto-capitalization of referral code input. Bug fixes address the Take-Profit offset (%) updating correctly with market price and correct alignment on the portfolio page.",
    "last_referenced_date": "2025-05-19T07:03:03"
  },
  {
    "question": "What UI/UX enhancements and bug fixes are included in Orderly SDK v2.1.3?",
    "answer": "Orderly SDK v2.1.3 (released May 26, 2025) adds several UI/UX improvements: Funding Rate Comparison now supports sorting; “Buy/Sell” labels have been replaced with “Long/Short” for clarity; and selected sorting preferences persist after collapsing and reopening the market tab. A bug fix resolves an issue where error messages were not displaying correctly.",
    "last_referenced_date": "2025-05-26T10:14:31"
  },
  {
    "question": "How do I register an admin wallet address on Orderly’s testnet so it can act as the staging admin for generating referral codes?",
    "answer": "Use the broker-registration UI on the testnet environment. Go to https://orderlynetwork.github.io/broker-registration/, switch the network selector to Ethereum Sepolia Testnet, connect the desired admin wallet address (for example, 0x5898eA0941831d32AF6E007cecef6E6a399D8b9c), and complete the registration flow. Then inform the Orderly team to finalize admin setup (they’ll configure any required multisig). Once they confirm (as of 2025-04-14T10:29:55), your address is set up as admin on testnet.",
    "last_referenced_date": "2025-04-14T10:29:55"
  },
  {
    "question": "We need a separate admin wallet for our staging environment on mainnet to keep development data separate from production. How do we set up a second broker ID in Orderly for that purpose?",
    "answer": "Orderly requires a distinct broker ID for each unique admin wallet on mainnet. To set up a second broker ID, contact the Orderly team with your desired broker_id (e.g., “your_staging_broker_id”), broker_name, default maker/taker fee rates, and the staging admin wallet address. The team will configure the new broker ID, after which you register the staging admin wallet under that broker via the broker-registration UI. The new broker_id and admin wallet will then collect and isolate staging broker fees.",
    "last_referenced_date": "2025-04-11T10:56:13"
  },
  {
    "question": "When integrating the affiliate dashboard along with the Affiliate and Trader pages, does the Orderly SDK automatically hide those pages unless the connected wallet is an affiliate or trader, or must I implement visibility logic myself?",
    "answer": "The Dashboard page is independent of the Affiliate and Trader pages—it will always render, but if the connected wallet isn’t an affiliate or trader the data sections simply appear empty. If you want to hide links or prevent the page from appearing for non-affiliates/traders, you must add that visibility logic yourself in your front end.",
    "last_referenced_date": "2025-02-17T13:06:55"
  },
  {
    "question": "What integration options does Orderly provide for building a custom DEX frontend, and where can I find documentation and examples for each?",
    "answer": "Orderly offers four integration paths that trade off time-to-market and UI control:\n1. Components SDK (React UI components): \n   – Docs: https://sdk.orderly.network/components/introduction  \n   – You get ready-built pages and components; customize look via theming.  \n2. Hooks SDK (React hooks): \n   – Docs: https://sdk.orderly.network/docs/hooks/overview  \n   – Example: https://github.com/OrderlyNetwork/sdk-workshop  \n   – Build your own UI using hooks like `useOrderEntry`, `useMarkets`, etc.  \n3. Core SDK (minimal EIP-712 + REST wrapper): \n   – npm: https://www.npmjs.com/package/@orderly.network/core  \n   – Use with any JS framework; you handle UI and signing.  \n4. No SDK: direct REST & WebSocket + EIP-712 signing: \n   – Guide: https://orderly.network/docs/build-on-evm/building-on-evm  \n   – Full control but requires manual implementation of account flows, signing, and API calls.",
    "last_referenced_date": "2024-10-11T09:36:29"
  },
  {
    "question": "What new features, UI/UX enhancements, and bug fixes are included in Orderly SDK v2.1.2 released May 19, 2025?",
    "answer": "✨ New Feature\n- Added support for 8 new default languages: Russian (ru), Indonesian (id), Turkish (tr), Italian (it), Portuguese (pt), Ukrainian (uk), Polish (pl), Dutch (nl)\n\n💡 UI/UX Enhancements\n- Clicking on the order book auto-fills the price and switches to Limit order\n- Order input is preserved after submission\n- Integrated Announcement API (with type & updated time)\n- Redesigned language selection modal\n- Toggle between Coin and USDC in the order book\n- Referral code input now auto-capitalizes\n\n🐞 Bug Fixes\n- Take-Profit offset (%) now correctly updates with market price\n- Fixed portfolio page alignment",
    "last_referenced_date": "2025-05-19T07:03:05"
  },
  {
    "question": "What UI/UX enhancements and bug fixes are included in Orderly SDK v2.1.3 released May 26, 2025?",
    "answer": "🔧 UI/UX Enhancements\n- Funding Rate Comparison now supports sorting\n- “Buy/Sell” has been replaced with “Long/Short” for improved clarity and consistency\n- Selected sorting preferences are now preserved after collapsing and reopening the market tab\n\n🐞 Bug Fixes\n- Fixed an issue where error messages were not displaying correctly",
    "last_referenced_date": "2025-05-26T10:14:31"
  },
  {
    "question": "Is it possible to fetch older or full historical kline data (e.g., from January 2023) via the /v1/kline endpoint by filtering on dates rather than only retrieving the last 1,000 rows?",
    "answer": "No. The public /v1/kline endpoint is capped at returning a maximum of 1,000 rows and does not offer date-range or pagination parameters. To access data older than the last 1,000 entries (for example January 2023), you must request a historical data export (such as daily snapshots or a larger CSV/JSON file) directly from the Orderly team.",
    "last_referenced_date": "2025-02-26T03:02:47"
  },
  {
    "question": "How quickly can I integrate Orderly using the standard React Components SDK, and are those components designed to be easily reskinned for branding (logo, colors, selected chains)?",
    "answer": "If you use Orderly’s standard Components SDK and simply add your logo, color scheme, and configure the chains you support, you can have a working integration in a matter of days rather than weeks. The Components are standardized to allow easy theming via your own styles and assets.",
    "last_referenced_date": "2025-04-24T21:53:41"
  },
  {
    "question": "How does the Orderly fee structure work—what base fees does Orderly keep, how much of the custom fee does my broker earn, and can I reduce the base fee through staking or volume?",
    "answer": "Orderly’s base fee is 3 basis points (0.03%) on taker trades and 0 basis points on maker trades; these base fees are kept by Orderly. Any additional maker or taker fee you configure on top of that goes 100% to your broker. There are no infrastructure or API usage fees. You can lower the base taker fee by staking ORDER tokens: staking 100 000 ORDER reduces it to 2.75 bps, staking 250 000 ORDER reduces it to 2.5 bps, or by averaging $3 million per day in trading volume to qualify for the 2.5 bps tier by default.",
    "last_referenced_date": "2025-04-24T21:54:51"
  },
  {
    "question": "How do I obtain a broker_id for testnet integration with the Orderly SDK, and what default broker_id and broker_name can I use before my own broker_id is configured?",
    "answer": "On testnet, you can use any existing broker_id returned by the public REST endpoint GET /v1/public/get-broker-list. For example, set \"broker_id\": \"woofi_pro\" and \"broker_name\": \"WOOFi Pro\" for immediate testing before your custom broker_id is set up.",
    "last_referenced_date": "2024-10-22T20:35:53"
  },
  {
    "question": "Is there a webhook endpoint I can use to receive order change notifications, or how can I be notified when an order’s status changes?",
    "answer": "Orderly does not offer webhooks for order events. Instead, subscribe to the private WebSocket topic “execution-report” to receive real-time updates for any order changes. See the WebSocket API docs under “Private → execution-report” for subscription details.",
    "last_referenced_date": "2025-02-26T23:28:16"
  }
]